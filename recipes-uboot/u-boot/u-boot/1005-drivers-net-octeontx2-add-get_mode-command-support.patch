From ce5287d0ce4a5fcf9ab096922e23d4aa6f0ff483 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Mon, 11 Nov 2019 16:55:36 -0800
Subject: [PATCH 1005/1239] drivers: net: octeontx2: add get_mode command
 support

Add get_mode command support with additional parameter
mode based on cgx_mode_t enum using interface command
CMD_GET_LINK_STS in cgx_intf.h file.
As of now, only modes relevant to LIO3 cards are displayed
and can be expanded as needed.

Change-Id: I42eab51d9f5f00894900342ac8148c31ddeec52e
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/18492
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
(cherry picked from commit e036dde44c0310c4878ded5cb86845e14b43ca49)
Reviewed-on: https://sj1git1.cavium.com/19359
Reviewed-by: Suneel Garapati <sgarapati@caviumnetworks.com>
Tested-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 cmd/marvell/eth_cmds.c           |  9 +++++++
 drivers/net/octeontx2/cgx_intf.c | 45 ++++++++++++++++++++++++++++++++
 drivers/net/octeontx2/cgx_intf.h |  3 ++-
 3 files changed, 56 insertions(+), 1 deletion(-)

diff --git a/cmd/marvell/eth_cmds.c b/cmd/marvell/eth_cmds.c
index e594de2e8a..9c7e3d1f4f 100644
--- a/cmd/marvell/eth_cmds.c
+++ b/cmd/marvell/eth_cmds.c
@@ -16,6 +16,7 @@ extern int cgx_intf_get_fec(struct udevice *ethdev);
 extern int cgx_intf_get_phy_mod_type(struct udevice *ethdev);
 extern int cgx_intf_set_phy_mod_type(struct udevice *ethdev, int type);
 extern int cgx_intf_set_mode(struct udevice *ethdev, int mode);
+extern int cgx_intf_get_mode(struct udevice *ethdev);
 extern void nix_print_mac_info(struct udevice *dev);
 
 static int do_ethlist(cmd_tbl_t *cmdtp, int flag, int argc,
@@ -81,6 +82,8 @@ static int do_ethparam_common(cmd_tbl_t *cmdtp, int flag, int argc,
 		ret = cgx_intf_set_phy_mod_type(dev, type);
 	} else if (strcmp(cmd, "get_phymod") == 0) {
 		ret = cgx_intf_get_phy_mod_type(dev);
+	} else if (strcmp(cmd, "get_mode") == 0) {
+		ret = cgx_intf_get_mode(dev);
 	} else if (strcmp(cmd, "set_mode") == 0) {
 		if (argc < 3)
 			return CMD_RET_FAILURE;
@@ -126,6 +129,12 @@ U_BOOT_CMD(
 	"Use 'ethlist' command to display network interface names\n"
 );
 
+U_BOOT_CMD(get_mode, 2, 1, do_ethparam_common,
+	   "Display Interface mode for selected ethernet interface",
+	   "Example - get_mode <ethX>\n"
+	   "Use 'ethlist' command to display network interface names\n"
+);
+
 U_BOOT_CMD(set_mode, 3, 1, do_ethparam_common,
 	   "Modify Interface mode for selected ethernet interface",
 	   "Example - set_mode <ethX> [mode]\n"
diff --git a/drivers/net/octeontx2/cgx_intf.c b/drivers/net/octeontx2/cgx_intf.c
index dfbb057035..bc3e8712de 100644
--- a/drivers/net/octeontx2/cgx_intf.c
+++ b/drivers/net/octeontx2/cgx_intf.c
@@ -398,6 +398,51 @@ int cgx_intf_set_mode(struct udevice *ethdev, int mode)
 	return 0;
 }
 
+int cgx_intf_get_mode(struct udevice *ethdev)
+{
+	struct rvu_pf *rvu = dev_get_priv(ethdev);
+	struct nix *nix = rvu->nix;
+	union cgx_scratchx0 scr0;
+	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_GET_LINK_STS;
+	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
+			   cmd, &scr0.u, 1);
+	if (ret) {
+		printf("Get link status failed for %s\n", ethdev->name);
+		return -1;
+	}
+	printf("Current Interface Mode: ");
+	switch (scr0.s.link_sts.mode) {
+	case CGX_MODE_10G_C2C_BIT:
+		printf("10G_C2C\n");
+		break;
+	case CGX_MODE_10G_C2M_BIT:
+		printf("10G_C2M\n");
+		break;
+	case CGX_MODE_10G_KR_BIT:
+		printf("10G_KR\n");
+		break;
+	case CGX_MODE_25G_C2C_BIT:
+		printf("25G_C2C\n");
+		break;
+	case CGX_MODE_25G_2_C2C_BIT:
+		printf("25G_2_C2C\n");
+		break;
+	case CGX_MODE_50G_C2C_BIT:
+		printf("50G_C2C\n");
+		break;
+	case CGX_MODE_50G_4_C2C_BIT:
+		printf("50G_4_C2C\n");
+		break;
+	default:
+		printf("Unknown\n");
+		break;
+	}
+	return 0;
+}
+
 int cgx_intf_get_fec(struct udevice *ethdev)
 {
 	struct rvu_pf *rvu = dev_get_priv(ethdev);
diff --git a/drivers/net/octeontx2/cgx_intf.h b/drivers/net/octeontx2/cgx_intf.h
index 3a5ae227b2..bea4726c6b 100644
--- a/drivers/net/octeontx2/cgx_intf.h
+++ b/drivers/net/octeontx2/cgx_intf.h
@@ -232,7 +232,8 @@ struct cgx_lnk_sts_s {
 	u64 an:1;		/* Current AN state : enabled/disabled */
 	u64 fec:2;		/* Current FEC type if enabled, if not 0 */
 	u64 port:8;	/* Share the current port info if required */
-	u64 reserved2:28;
+	u64 mode:8;	/* cgx_mode_t enum integer value */
+	u64 reserved2:20;
 };
 
 struct sh_fwd_base_s {
-- 
2.29.0

