From d2a7baa6e61c7c3ca7d3a8a7343adcb6a6bf7c39 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Fri, 6 May 2016 21:16:23 -0700
Subject: [PATCH 0411/1239] cavium: Add external PCIe support

This commit adds support for external PCIe module core, PEM

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/pci/pci_thunderx_ecam.c | 112 +++++++++++++++++++++++++++-----
 1 file changed, 96 insertions(+), 16 deletions(-)

diff --git a/drivers/pci/pci_thunderx_ecam.c b/drivers/pci/pci_thunderx_ecam.c
index c8e1433f35..3b10d13606 100644
--- a/drivers/pci/pci_thunderx_ecam.c
+++ b/drivers/pci/pci_thunderx_ecam.c
@@ -21,26 +21,15 @@
 #include <asm/io.h>
 
 
-#define PCI_VENDOR_CAVIUM 0x177d
-#define PCI_DEV_CAVIUM_RC 0xa100
-
-#define PCI_CAP_EA 0x14
-
-#define RTARGET_MASK 0x1f;
-#define OPCODE_SIZE 4;
-
 DECLARE_GLOBAL_DATA_PTR;
 
 struct thunderx_pci {
 	unsigned int type;
 
 	struct fdt_resource cfg;
-
-	struct list_head list;
+	struct fdt_resource bus;
 };
 
-static LIST_HEAD(thunderx_ecams);
-
 static int pci_thunderx_ecam_read_config(struct udevice *bus, pci_dev_t bdf,
 				 uint offset, ulong *valuep,
 				 enum pci_size_t size)
@@ -50,7 +39,7 @@ static int pci_thunderx_ecam_read_config(struct udevice *bus, pci_dev_t bdf,
 	uintptr_t address;
 	u32 b, d, f;
 
-	b = PCI_BUS(bdf) - hose->first_busno;
+	b = PCI_BUS(bdf) + pcie->bus.start - hose->first_busno;
 	d = PCI_DEV(bdf);
 	f = PCI_FUNC(bdf);
 
@@ -85,7 +74,7 @@ static int pci_thunderx_ecam_write_config(struct udevice *bus, pci_dev_t bdf,
 	uintptr_t address;
 	u32 b, d, f;
 
-	b = PCI_BUS(bdf) - hose->first_busno;
+	b = PCI_BUS(bdf) + pcie->bus.start - hose->first_busno;
 	d = PCI_DEV(bdf);
 	f = PCI_FUNC(bdf);
 
@@ -111,6 +100,82 @@ static int pci_thunderx_ecam_write_config(struct udevice *bus, pci_dev_t bdf,
 	return 0;
 }
 
+static int pci_thunderx_pem_read_config(struct udevice *bus, pci_dev_t bdf,
+				 uint offset, ulong *valuep,
+				 enum pci_size_t size)
+{
+	struct thunderx_pci *pcie = (void *)dev_get_priv(bus);
+	struct pci_controller *hose = dev_get_uclass_priv(bus);
+	uintptr_t address;
+	u32 b, d, f;
+
+	b = PCI_BUS(bdf) + pcie->bus.start + 1 - hose->first_busno;
+	d = PCI_DEV(bdf);
+	f = PCI_FUNC(bdf);
+
+	address = (b << 24) | (d << 19) | (f << 16) | offset;
+
+	address += pcie->cfg.start;
+
+	*valuep = pci_conv_32_to_size(~0UL, offset, size);
+
+	if (d == 0) {
+		switch (size) {
+		case PCI_SIZE_8:
+			*valuep = readb(address);
+			break;
+		case PCI_SIZE_16:
+			*valuep = readw(address);
+			break;
+		case PCI_SIZE_32:
+			*valuep = readl(address);
+			break;
+		};
+	}
+/*
+	debug("%02x.%02x.%02x: u%d %x (%lx) -> %lx\n",
+	      b, d, f, size, offset, address, *valuep);
+*/
+	return 0;
+}
+
+static int pci_thunderx_pem_write_config(struct udevice *bus, pci_dev_t bdf,
+				 uint offset, ulong valuep,
+				 enum pci_size_t size)
+{
+	struct thunderx_pci *pcie = (void *)dev_get_priv(bus);
+	struct pci_controller *hose = dev_get_uclass_priv(bus);
+	uintptr_t address;
+	u32 b, d, f;
+
+	b = PCI_BUS(bdf) + pcie->bus.start + 1 - hose->first_busno;
+	d = PCI_DEV(bdf);
+	f = PCI_FUNC(bdf);
+
+	address = (b << 24) | (d << 19) | (f << 16) | offset;
+
+	address += pcie->cfg.start;
+
+	if (d == 0) {
+		switch (size) {
+		case PCI_SIZE_8:
+			writeb(valuep, address);
+			break;
+		case PCI_SIZE_16:
+			writew(valuep, address);
+			break;
+		case PCI_SIZE_32:
+			writel(valuep, address);
+			break;
+		};
+	}
+/*
+	debug("%02x.%02x.%02x: u%d %x (%lx) <- %lx\n",
+	      b, d, f, size, offset, address, valuep);
+*/
+	return 0;
+}
+
 static int pci_thunderx_ofdata_to_platdata(struct udevice *dev)
 {
 	return 0;
@@ -128,6 +193,8 @@ static int pci_thunderx_ecam_probe(struct udevice *dev)
 		return err;
 	}
 
+	err = fdt_get_resource(gd->fdt_blob, dev->of_offset, "bus-range", 0, &pcie->bus);
+
 	return 0;
 }
 
@@ -142,12 +209,15 @@ static const struct udevice_id pci_thunderx_ecam_ids[] = {
 	{ }
 };
 
-#if 0
+static const struct dm_pci_ops pci_thunderx_pem_ops = {
+	.read_config	= pci_thunderx_pem_read_config,
+	.write_config	= pci_thunderx_pem_write_config,
+};
+
 static const struct udevice_id pci_thunderx_pem_ids[] = {
 	{ .compatible = "cavium,pci-host-thunder-pem" },
 	{ }
 };
-#endif
 
 U_BOOT_DRIVER(pci_thunderx_ecam) = {
 	.name	= "pci_thunderx_ecam",
@@ -158,3 +228,13 @@ U_BOOT_DRIVER(pci_thunderx_ecam) = {
 	.probe	= pci_thunderx_ecam_probe,
 	.priv_auto_alloc_size = sizeof(struct thunderx_pci),
 };
+
+U_BOOT_DRIVER(pci_thunderx_pcie) = {
+	.name	= "pci_thunderx_pem",
+	.id	= UCLASS_PCI,
+	.of_match = pci_thunderx_pem_ids,
+	.ops	= &pci_thunderx_pem_ops,
+	.ofdata_to_platdata = pci_thunderx_ofdata_to_platdata,
+	.probe	= pci_thunderx_ecam_probe,
+	.priv_auto_alloc_size = sizeof(struct thunderx_pci),
+};
-- 
2.29.0

