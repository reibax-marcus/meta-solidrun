From 695dbaa4b747a9861d6c1c4907c61be4353659f3 Mon Sep 17 00:00:00 2001
From: Konstantin Porotchkin <kostap@marvell.com>
Date: Tue, 26 Nov 2019 10:40:00 +0200
Subject: [PATCH 1030/1239] drivers/pci_endpoint: add Marvell PCIe EP driver

Add driver supporting PCIe EP mode on A7K/A8K/CN913x devices

Change-Id: I01217505f28fae62c907af6bf24267d2ee095fff
Signed-off-by: Konstantin Porotchkin <kostap@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/19276
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Ofer Heifetz <oferh@marvell.com>
---
 arch/arm/mach-mvebu/arm64-common.c         |   4 +
 arch/arm/mach-mvebu/armada8k/cpu.c         |  11 +
 arch/arm/mach-mvebu/include/mach/fw_info.h |   4 +
 configs/mvebu_ocp-88f8040_defconfig        |   6 +-
 drivers/pci_endpoint/Kconfig               |  10 +
 drivers/pci_endpoint/Makefile              |   1 +
 drivers/pci_endpoint/pcie_dw_mvebu_ep.c    | 251 +++++++++++++++++++++
 drivers/pci_endpoint/pcie_dw_mvebu_ep.h    |  75 ++++++
 drivers/pci_endpoint/pcie_mvebu_ep_uio.c   | 156 +++++++++++++
 9 files changed, 514 insertions(+), 4 deletions(-)
 create mode 100644 drivers/pci_endpoint/pcie_dw_mvebu_ep.c
 create mode 100644 drivers/pci_endpoint/pcie_dw_mvebu_ep.h
 create mode 100644 drivers/pci_endpoint/pcie_mvebu_ep_uio.c

diff --git a/arch/arm/mach-mvebu/arm64-common.c b/arch/arm/mach-mvebu/arm64-common.c
index 2809db8c51..820b61bdbf 100644
--- a/arch/arm/mach-mvebu/arm64-common.c
+++ b/arch/arm/mach-mvebu/arm64-common.c
@@ -187,6 +187,10 @@ int arch_early_init_r(void)
 	/* Cause the SATA device to do its early init */
 	uclass_first_device(UCLASS_AHCI, &dev);
 
+#ifdef CONFIG_PCI_ENDPOINT
+	uclass_first_device(UCLASS_NOP, &dev);
+#endif
+
 #ifdef CONFIG_DM_PCI
 	/* Trigger PCIe devices detection */
 	pci_init();
diff --git a/arch/arm/mach-mvebu/armada8k/cpu.c b/arch/arm/mach-mvebu/armada8k/cpu.c
index 99a3d88f48..fe216c2c4a 100644
--- a/arch/arm/mach-mvebu/armada8k/cpu.c
+++ b/arch/arm/mach-mvebu/armada8k/cpu.c
@@ -54,6 +54,17 @@ static struct mm_region mvebu_mem_map[] = {
 		.attrs = PTE_BLOCK_MEMTYPE(MT_DEVICE_NGNRNE) |
 			 PTE_BLOCK_NON_SHARE
 	},
+#if defined(CONFIG_PCIE_DW_MVEBU_EP)
+	{
+		/* PCIe OCP regions */
+		.phys = MV_PCIE_EP_REGION_BASE,
+		.virt = MV_PCIE_EP_REGION_BASE,
+		.size = MV_PCIE_EP_REGION_SIZE,
+
+		.attrs = PTE_BLOCK_MEMTYPE(MT_DEVICE_NGNRNE) |
+			 PTE_BLOCK_NON_SHARE
+	},
+#endif
 	{
 		0,
 	}
diff --git a/arch/arm/mach-mvebu/include/mach/fw_info.h b/arch/arm/mach-mvebu/include/mach/fw_info.h
index cc51fda484..3ee35ec348 100644
--- a/arch/arm/mach-mvebu/include/mach/fw_info.h
+++ b/arch/arm/mach-mvebu/include/mach/fw_info.h
@@ -11,6 +11,10 @@
 #define ATF_REGION_START		0x4000000
 #define ATF_REGION_END			0x5400000
 
+/* PCIe EP mappings */
+#define MV_PCIE_EP_REGION_BASE		0x8000000000ULL
+#define MV_PCIE_EP_REGION_SIZE		0x800000000ULL
+
 /* Firmware related definition used for SMC calls */
 #define MV_SIP_DRAM_SIZE		0x82000010
 
diff --git a/configs/mvebu_ocp-88f8040_defconfig b/configs/mvebu_ocp-88f8040_defconfig
index 1fb61c71e0..13455b13cc 100644
--- a/configs/mvebu_ocp-88f8040_defconfig
+++ b/configs/mvebu_ocp-88f8040_defconfig
@@ -24,7 +24,6 @@ CONFIG_CMD_FUSE=y
 CONFIG_CMD_GPIO=y
 CONFIG_CMD_I2C=y
 CONFIG_CMD_MMC=y
-CONFIG_CMD_PCI=y
 CONFIG_CMD_SF=y
 CONFIG_CMD_SPI=y
 CONFIG_CMD_USB=y
@@ -56,11 +55,10 @@ CONFIG_SPI_FLASH_SPANSION=y
 CONFIG_SPI_FLASH_STMICRO=y
 CONFIG_SPI_FLASH_WINBOND=y
 CONFIG_PHY_MARVELL=y
-CONFIG_E1000=y
 CONFIG_MVPP2=y
-CONFIG_PCI=y
 CONFIG_DM_PCI=y
-CONFIG_PCIE_DW_MVEBU=y
+CONFIG_PCI_ENDPOINT=y
+CONFIG_PCIE_DW_MVEBU_EP=y
 CONFIG_MVEBU_COMPHY_SUPPORT=y
 CONFIG_PINCTRL=y
 CONFIG_PINCTRL_ARMADA_8K=y
diff --git a/drivers/pci_endpoint/Kconfig b/drivers/pci_endpoint/Kconfig
index 19cfa0aafb..252f904044 100644
--- a/drivers/pci_endpoint/Kconfig
+++ b/drivers/pci_endpoint/Kconfig
@@ -31,4 +31,14 @@ config PCI_SANDBOX_EP
 	  The sandbox driver act as a dummy driver which stores and
 	  retrieves PCIe endpoint configuration as is.
 
+config PCIE_DW_MVEBU_EP
+	bool "Enable Armada-8K/OcteonTX2 CN91xx PCIe endpoint driver"
+	depends on PCI_ENDPOINT
+	depends on ARMADA_8K
+	help
+	  Say Y here if you want to enable PCIe controller support in endpoint
+	  mode on Marvell Armada-8K/OcteonTX2 CN91xx SoCs.
+	  The PCIe controller on Armada-8K/OcteonTX2 CN91xx is based on
+	  DesignWare hardware.
+
 endmenu
diff --git a/drivers/pci_endpoint/Makefile b/drivers/pci_endpoint/Makefile
index 3cd987259d..ed2505bfb4 100644
--- a/drivers/pci_endpoint/Makefile
+++ b/drivers/pci_endpoint/Makefile
@@ -6,3 +6,4 @@
 obj-y += pci_ep-uclass.o
 obj-$(CONFIG_PCIE_CADENCE_EP) += pcie-cadence-ep.o
 obj-$(CONFIG_PCI_SANDBOX_EP) += sandbox-pci_ep.o
+obj-$(CONFIG_PCIE_DW_MVEBU_EP) += pcie_dw_mvebu_ep.o pcie_mvebu_ep_uio.o
diff --git a/drivers/pci_endpoint/pcie_dw_mvebu_ep.c b/drivers/pci_endpoint/pcie_dw_mvebu_ep.c
new file mode 100644
index 0000000000..9287704f8d
--- /dev/null
+++ b/drivers/pci_endpoint/pcie_dw_mvebu_ep.c
@@ -0,0 +1,251 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 Marvell International Ltd.
+ *
+ * Written By:
+ * Konstantin Porotchkin <kostap@marvell.com>
+ *
+ * Based on :
+ *   - pci_endpoint/pcie-cadence-ep.c
+ * and Linux driver:
+ *   - drivers/pci/endpoint/pcie-armada-dw-ep.c
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <pci_ep.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/log2.h>
+#include <linux/kernel.h>
+#include <linux/sizes.h>
+#include <linux/types.h>
+#include <asm/io.h>
+#include "pcie_dw_mvebu_ep.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static int pcie_dw_mvebu_ep_setup_bar(struct udevice *dev, uint func_id,
+				      struct pci_bar *bar)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	void *pl_regs = ep->pl_regs;
+	u32  v = 0;
+	u32  region_indx = get_in_region_idx(func_id, bar->barno);
+	void *bar_addr = cfg_func_base(ep, func_id,
+				PCI_BASE_ADDRESS_0 + (bar->barno * 4));
+	void *bar_mask = cfg_shadow_func_base(ep, func_id,
+				PCI_BASE_ADDRESS_0 + (bar->barno * 4));
+
+	if (bar->flags & PCI_BASE_ADDRESS_SPACE_IO) {
+		v = bar->flags & (~PCI_BASE_ADDRESS_IO_MASK);
+		writel(v, bar_addr);
+	} else {
+		/* clear the top 32 bits of the size */
+		if (bar->flags & PCI_BASE_ADDRESS_MEM_TYPE_64) {
+			writel((bar->size - 1) >> 32, bar_mask + 4);
+			writel(0, bar_addr + 4);
+		}
+		v = bar->flags & (~PCI_BASE_ADDRESS_MEM_MASK);
+		writel(v, bar_addr);
+	}
+
+	/* Set size and enable bar */
+	v = ((bar->size - 1) & U32_MAX) | BAR_ENABLE_MASK;
+	writel(v, bar_mask);
+
+	/* Setup the internal target for the BAR.
+	 * When the PCIe host accesses the bar
+	 * it will reach the space defined by "addr" and "size"
+	 * This code is moved from a separate function in Linux
+	 * driver: armada_pcie_ep_bar_map()
+	 */
+	v = PCIE_ATU_REGION_INBOUND | region_indx;
+	writel(v, pl_regs + PCIE_ATU_VIEWPORT);
+
+	bar->phys_addr = bar->phys_addr & ~(bar->size - 1);
+	v = lower_32_bits(bar->phys_addr);
+	writel(v, pl_regs + PCIE_ATU_LOWER_TARGET);
+
+	v = upper_32_bits(bar->phys_addr);
+	writel(v, pl_regs + PCIE_ATU_UPPER_TARGET);
+
+	v = (func_id & PCIE_ATU_CR1_FUNC_MASK) << PCIE_ATU_CR1_FUNC_OFF;
+	writel(v, pl_regs + PCIE_ATU_CR1);
+
+	v = PCIE_ATU_CR2_REGION_EN |
+	    PCIE_ATU_CR2_BAR_EN |
+	    (bar->barno << PCIE_ATU_CR2_BAR_OFF);
+	writel(v, pl_regs + PCIE_ATU_CR2);
+
+	return 0;
+}
+
+static int pcie_dw_mvebu_ep_disable_bar(struct udevice *dev, uint func_num,
+					enum pci_barno barnum)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	void *bar_mask = cfg_shadow_func_base(ep, func_num,
+					      PCI_BASE_ADDRESS_0);
+
+	writel(0, bar_mask + barnum * 4);
+
+	return 0;
+}
+
+static int pcie_dw_mvebu_ep_enable(struct udevice *dev)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	u32 v;
+
+	v = readl(ep->lm_regs + PCIE_GLOBAL_CTRL);
+	v &= ~PCIE_GLOBAL_CTRL_CRS_EN;
+	writel(v, ep->lm_regs + PCIE_GLOBAL_CTRL);
+
+	return 0;
+}
+
+/*
+ * Remap the host memory space to the local memory space.
+ * By default the memory spaces conflict so we must offset the
+ * host memory space in our local memory space
+ */
+static int pcie_dw_mvebu_ep_remap_host(struct udevice *dev, uint func_id,
+				       phys_addr_t addr, u64 pci_addr,
+				       size_t size)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	void *pl_regs = ep->pl_regs;
+	u32  v, region = 0;
+	u64  remain_size = size;
+
+	/* ATU window size must be power of 2 */
+	if (!is_power_of_2(size))
+		return -EINVAL;
+
+	while (remain_size > 0) {
+		if (region > MAX_ATU_REGIONS) {
+			printf("Insufficient ATU regions to map hosts\n");
+			return -1;
+		}
+
+		v = PCIE_ATU_REGION_OUTBOUND;
+		v |= get_out_region_idx(func_id, region);
+		writel(v, pl_regs + PCIE_ATU_VIEWPORT);
+
+		writel(addr & U32_MAX, pl_regs + PCIE_ATU_LOWER_BASE);
+		writel(addr >> 32, pl_regs + PCIE_ATU_UPPER_BASE);
+		writel(pci_addr & U32_MAX, pl_regs + PCIE_ATU_LOWER_TARGET);
+		writel(pci_addr >> 32, pl_regs + PCIE_ATU_UPPER_TARGET);
+
+		if (remain_size > MAX_ATU_SIZE)
+			v = MAX_ATU_SIZE - 1;
+		else
+			v = remain_size - 1;
+		writel(v, pl_regs + PCIE_ATU_LIMIT);
+
+		v = (func_id & PCIE_ATU_CR1_FUNC_MASK) << PCIE_ATU_CR1_FUNC_OFF;
+		writel(v, pl_regs + PCIE_ATU_CR1);
+
+		v = PCIE_ATU_CR2_REGION_EN;
+		writel(v, pl_regs + PCIE_ATU_CR2);
+
+		region++;
+		addr += MAX_ATU_SIZE;
+		pci_addr += MAX_ATU_SIZE;
+		remain_size -= MAX_ATU_SIZE;
+	}
+
+	return 0;
+}
+
+/* setup the PCIe configuration header */
+static int pcie_dw_armada_write_header(struct udevice *dev, uint func_id,
+				       struct pci_ep_header *hdr)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	void *cfg_addr = cfg_func_base(ep, func_id, 0);
+
+	writew(hdr->vendorid, cfg_addr + PCI_VENDOR_ID);
+	writew(hdr->deviceid, cfg_addr + PCI_DEVICE_ID);
+
+	writeb(hdr->revid,  cfg_addr + PCI_REVISION_ID);
+	writeb(hdr->progif_code,  cfg_addr + PCI_CLASS_PROG);
+	writew((hdr->baseclass_code << 8) | hdr->subclass_code,
+	       cfg_addr + PCI_CLASS_DEVICE);
+
+	writew(hdr->subsys_id,  cfg_addr + PCI_SUBSYSTEM_ID);
+	writew(hdr->subsys_vendor_id,
+	       cfg_addr + PCI_SUBSYSTEM_VENDOR_ID);
+
+	return 0;
+}
+
+static int pcie_dw_mvebu_ep_probe(struct udevice *dev)
+{
+	struct armada_pcie_ep *ep = dev_get_priv(dev);
+	struct resource res;
+	void *p;
+
+	/* Get registers bases and remap */
+	dev_read_resource_byname(dev, "lm", &res);
+	p = devm_ioremap(dev, res.start, resource_size(&res));
+	if (IS_ERR(p)) {
+		printf("couldn't remap lm regs base %pR\n", &res);
+		return PTR_ERR(p);
+	}
+	ep->lm_regs = p;
+
+	dev_read_resource_byname(dev, "core", &res);
+	p = devm_ioremap(dev, res.start, resource_size(&res));
+	if (IS_ERR(p)) {
+		printf("couldn't remap core regs base %pR\n", &res);
+		return PTR_ERR(p);
+	}
+	ep->regs = p;
+	ep->pl_regs = p;
+
+	dev_read_resource_byname(dev, "shadow_core", &res);
+	p = devm_ioremap(dev, res.start, resource_size(&res));
+	if (IS_ERR(p)) {
+		printf("couldn't remap shadow regs base %pR\n", &res);
+		return PTR_ERR(p);
+	}
+	ep->shadow_regs = p;
+
+	/* Disable Function 0. Set the vendor ID to 0xFFFFFFFF to avoid
+	 * detection until the EP is fully configured
+	 */
+	writel(0xffffffff, cfg_func_base(ep, 0, PCI_VENDOR_ID));
+
+	return 0;
+}
+
+static int pcie_dw_mvebu_ep_remove(struct udevice *dev)
+{
+	return 0;
+}
+
+static const struct pci_ep_ops pcie_dw_mvebu_ep_ops = {
+	.write_header = pcie_dw_armada_write_header,
+	.map_addr = pcie_dw_mvebu_ep_remap_host,
+	.set_bar = pcie_dw_mvebu_ep_setup_bar,
+	.clear_bar = pcie_dw_mvebu_ep_disable_bar,
+	.start = pcie_dw_mvebu_ep_enable,
+};
+
+static const struct udevice_id pcie_dw_mvebu_ep_ids[] = {
+	{ .compatible = "marvell,armada-pcie-ep" },
+	{ }
+};
+
+U_BOOT_DRIVER(pcie_dw_armada_ep) = {
+	.name			= "armada-pcie-ep",
+	.id			= UCLASS_PCI_EP,
+	.of_match		= pcie_dw_mvebu_ep_ids,
+	.ops			= &pcie_dw_mvebu_ep_ops,
+	.probe			= pcie_dw_mvebu_ep_probe,
+	.remove			= pcie_dw_mvebu_ep_remove,
+	.priv_auto_alloc_size	= sizeof(struct armada_pcie_ep),
+};
diff --git a/drivers/pci_endpoint/pcie_dw_mvebu_ep.h b/drivers/pci_endpoint/pcie_dw_mvebu_ep.h
new file mode 100644
index 0000000000..0ad44a1147
--- /dev/null
+++ b/drivers/pci_endpoint/pcie_dw_mvebu_ep.h
@@ -0,0 +1,75 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2019 Marvell International Ltd.
+ *
+ * Written By:
+ * Konstantin Porotchkin <kostap@marvell.com>
+ *
+ * Based on :
+ *   - pci_endpoint/pcie-cadence-ep.c
+ * and Linux driver:
+ *   - drivers/pci/endpoint/pcie-armada-dw-ep.c
+ */
+
+#ifndef PCIE_DW_EP_MVEBU_H
+#define PCIE_DW_EP_MVEBU_H
+
+#include <linux/bitops.h>
+
+#define PCIE_GLOBAL_CTRL		0x0
+#define PCIE_GLOBAL_CTRL_CRS_EN		BIT(9)
+#define PCIE_GLOBAL_CTRL_TYPE_OFF	4
+#define PCIE_GLOBAL_CTRL_TYPE_MASK	0xF
+#define PCIE_GLOBAL_CTRL_TYPE_RC	(0x4)
+
+#define PCIE_ATU_VIEWPORT		0x900
+#define PCIE_ATU_REGION_INBOUND		(0x1 << 31)
+#define PCIE_ATU_REGION_OUTBOUND	(0x0 << 31)
+#define PCIE_ATU_REGION_INDEX1		(0x1 << 0)
+#define PCIE_ATU_REGION_INDEX0		(0x0 << 0)
+#define PCIE_ATU_CR1			0x904
+#define PCIE_ATU_CR1_FUNC_OFF		20
+#define PCIE_ATU_CR1_FUNC_MASK		0x1F
+#define PCIE_ATU_TYPE_MEM		(0x0 << 0)
+#define PCIE_ATU_TYPE_IO		(0x2 << 0)
+#define PCIE_ATU_TYPE_CFG0		(0x4 << 0)
+#define PCIE_ATU_TYPE_CFG1		(0x5 << 0)
+#define PCIE_ATU_CR2			0x908
+#define PCIE_ATU_CR2_REGION_EN		(0x1 << 31)
+#define PCIE_ATU_CR2_BAR_EN		(0x1 << 30)
+#define PCIE_ATU_CR2_FUNC_EN		(0x1 << 19)
+#define PCIE_ATU_CR2_BAR_OFF		8
+#define PCIE_ATU_LOWER_BASE		0x90C
+#define PCIE_ATU_UPPER_BASE		0x910
+#define PCIE_ATU_LIMIT			0x914
+#define PCIE_ATU_LOWER_TARGET		0x918
+#define PCIE_ATU_BUS(x)			(((x) & 0xff) << 24)
+#define PCIE_ATU_DEV(x)			(((x) & 0x1f) << 19)
+#define PCIE_ATU_FUNC(x)		(((x) & 0x7) << 16)
+#define PCIE_ATU_UPPER_TARGET		0x91C
+
+#define MAX_ATU_REGIONS			16
+#define MAX_ATU_SIZE			(4ul * SZ_1G)
+
+#define  BAR_ENABLE_OFFSET		0
+#define  BAR_ENABLE_MASK		BIT(BAR_ENABLE_OFFSET)
+
+struct armada_pcie_ep {
+	void		*regs;
+	void		*shadow_regs;
+	void		*lm_regs;
+	void		*pl_regs;	/*port logical register only PF0*/
+};
+
+#define cfg_space_addr(func_id)			(0x1000 * (func_id))
+
+#define cfg_func_base(ep, func_id, off)		\
+	((ep)->regs + cfg_space_addr(func_id) + (off))
+
+#define cfg_shadow_func_base(ep, func_id, off)	\
+	((ep)->shadow_regs + cfg_space_addr(func_id) + (off))
+
+#define get_out_region_idx(func_id, id)		((func_id) + (id))
+#define get_in_region_idx(func_id, bar)		((func_id) + (bar))
+
+#endif /* PCIE_DW_EP_MVEBU_H */
diff --git a/drivers/pci_endpoint/pcie_mvebu_ep_uio.c b/drivers/pci_endpoint/pcie_mvebu_ep_uio.c
new file mode 100644
index 0000000000..951a4ae33f
--- /dev/null
+++ b/drivers/pci_endpoint/pcie_mvebu_ep_uio.c
@@ -0,0 +1,156 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 Marvell International Ltd.
+ *
+ * Written By:
+ * Konstantin Porotchkin <kostap@marvell.com>
+ *
+ * Based on Linux driver:
+ *   - drivers/uio/pcie-armada-dw-ep.c
+ *     authored by Yehuda Yitschak <yehuday@marvell.com>
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <pci_ep.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/log2.h>
+#include <linux/kernel.h>
+#include <linux/sizes.h>
+#include <linux/types.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+struct uio_pci {
+	struct udevice  *ep;
+	struct resource	*host_map;
+};
+
+/* make sure we have at least one mem regions to map the host ram */
+#define MAX_BAR_MAP	4
+
+static int uio_pci_ep_probe(struct udevice *dev)
+{
+	struct uio_pci *uio_pci = dev_get_priv(dev);
+	struct pci_ep_header hdr;
+	struct pci_bar bar;
+	struct resource res;
+	int    bar_id, ret;
+	char res_name[20];
+	u16 bar_mask = 0;
+	u32 val;
+
+	/* Expecting single PCI EP device */
+	uclass_first_device(UCLASS_PCI_EP, &uio_pci->ep);
+	if (!uio_pci->ep) {
+		printf("Failed to find PCI EP driver\n");
+		return -EFAULT;
+	}
+
+	/* Configure the EP PCIe header */
+	memset(&hdr, 0, sizeof(hdr));
+	hdr.vendorid = PCI_VENDOR_ID_MARVELL;
+
+	ret = dev_read_u32(dev, "device-id", &val);
+	if (ret) {
+		printf("missing device-id from DT node\n");
+		return ret;
+	}
+	hdr.deviceid = val;
+
+	ret = dev_read_u32(dev, "class-code", &val);
+	if (ret) {
+		printf("missing class-code from DT node\n");
+		return ret;
+	}
+	hdr.baseclass_code = val;
+
+	ret = dev_read_u32(dev, "subclass-code", &val);
+	if (ret) {
+		printf("missing subclass-code from DT node\n");
+		return ret;
+	}
+	hdr.subclass_code = val;
+
+	pci_ep_write_header(uio_pci->ep, 0, &hdr);
+
+	/* Setup the BARs according to device tree */
+	for (bar_id = 0; bar_id < MAX_BAR_MAP; bar_id++) {
+		snprintf(res_name, 5, "bar%d", bar_id);
+		ret = dev_read_resource_byname(dev, res_name, &res);
+		if (ret)
+			continue;
+
+		bar_mask |= 1 << bar_id;
+
+		bar.barno = bar_id;
+		bar.size = resource_size(&res);
+		if (!is_power_of_2(bar.size)) {
+			printf("BAR-%d size in not power of 2\n", bar_id);
+			return -EINVAL;
+		}
+
+		/* Now create the BAR to match the memory region */
+		bar.flags = PCI_BASE_ADDRESS_SPACE_MEMORY |
+			    PCI_BASE_ADDRESS_MEM_TYPE_32;
+		pci_ep_set_bar(uio_pci->ep, 0, &bar);
+
+		/* First 2 BARs in HW are 64 bit BARs and consume 2 BAR slots */
+		if (bar_id < 4) {
+			bar_id++;
+			bar_mask |= 1 << bar_id;
+		}
+	}
+
+	for (bar_id = 0; bar_id < MAX_BAR_MAP; bar_id++) {
+		if (bar_mask & (1 << bar_id))
+			continue;
+		pci_ep_clear_bar(uio_pci->ep, 0, bar_id);
+	}
+
+	/* remap host RAM to local memory space  using shift mapping.
+	 * i.e. address 0x0 in host becomes uio_pci->host_map->start.
+	 */
+	ret = dev_read_resource_byname(dev, "host-map", uio_pci->host_map);
+	if (ret) {
+		printf("Device tree missing host mappings\n");
+		return -ENODEV;
+	}
+
+	pci_ep_map_addr(uio_pci->ep, 0, uio_pci->host_map->start,
+			0, resource_size(uio_pci->host_map));
+
+	/* Finally, allow the PCIe RC to detect us */
+	pci_ep_start(uio_pci->ep);
+
+	printf("Registered UIO PCI EP successfully\n");
+
+	return 0;
+}
+
+static int uio_pci_ep_remove(struct udevice *dev)
+{
+	struct uio_pci *uio_pci = dev_get_priv(dev);
+	int    bar_id;
+
+	for (bar_id = 0; bar_id < MAX_BAR_MAP; bar_id++)
+		pci_ep_clear_bar(uio_pci->ep, 0, bar_id);
+
+	return 0;
+}
+
+const struct udevice_id uio_pci_ep_match[] = {
+	{ .compatible = "marvell,pci-ep-uio" },
+	{ }
+};
+
+U_BOOT_DRIVER(cdns_pcie) = {
+	.name	= "marvell,pci-ep-uio",
+	.id	= UCLASS_NOP,
+	.of_match = uio_pci_ep_match,
+	.probe = uio_pci_ep_probe,
+	.remove = uio_pci_ep_remove,
+	.priv_auto_alloc_size = sizeof(struct uio_pci),
+};
-- 
2.29.0

