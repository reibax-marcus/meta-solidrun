From 5f8982d9573d3c2521b7e15b8a11b6c53d36614f Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Wed, 6 Feb 2019 10:57:18 -0800
Subject: [PATCH 0880/1239] drivers: net: octeontx2: clean up link error
 messages

Move to sane information prints with cgx, lmac, mode,
speed and status.

Change-Id: I4f7ae7ba42e57a9d3cce8dabcbe40740d59b6e7d
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/3604
Tested-by: sa_ip-sw-jenkins
Reviewed-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 drivers/net/octeontx2/cgx.c      | 53 +++++++++++++++++++++++---------
 drivers/net/octeontx2/cgx_intf.c |  2 +-
 2 files changed, 40 insertions(+), 15 deletions(-)

diff --git a/drivers/net/octeontx2/cgx.c b/drivers/net/octeontx2/cgx.c
index 0c5d8a9c5b..ff5f192bed 100644
--- a/drivers/net/octeontx2/cgx.c
+++ b/drivers/net/octeontx2/cgx.c
@@ -18,7 +18,7 @@
 #include "cavm-csrs-cgx.h"
 #include "cgx.h"
 
-char lmac_type_to_str [][8] = {
+char lmac_type_to_str[][8] = {
 	"SGMII",
 	"XAUI",
 	"RXAUI",
@@ -32,6 +32,21 @@ char lmac_type_to_str [][8] = {
 	"USXGMII",
 };
 
+char lmac_speed_to_str[][8] = {
+	"0",
+	"10M",
+	"100M",
+	"1G",
+	"2.5G",
+	"5G",
+	"10G",
+	"20G",
+	"25G",
+	"40G",
+	"50G",
+	"100G",
+};
+
 /**
  * Given an LMAC/PF instance number, return the lmac
  * Per design, each PF has only one LMAC mapped.
@@ -167,8 +182,8 @@ int cgx_lmac_link_status(struct lmac *lmac, int lmac_id, u64 *status)
 	ret = cgx_intf_get_link_sts(lmac->cgx->cgx_id,
 					lmac_id, status);
 	if (ret) {
-		printf("%s interface request failed for cgx%d lmac%d\n",
-			__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+		debug("%s interface request failed for cgx%d lmac%d\n",
+		      __func__, lmac->cgx->cgx_id, lmac->lmac_id);
 		ret = -1;
 	}
 	return ret;
@@ -182,15 +197,22 @@ int cgx_lmac_link_enable(struct lmac *lmac, int lmac_id, bool enable)
 	ret = cgx_intf_link_up_dwn(lmac->cgx->cgx_id,
 					lmac_id, enable, &status);
 	if (ret) {
-		printf("%s interface request failed for cgx%d lmac%d\n",
-			__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+		debug("%s interface request failed for cgx%d lmac%d\n",
+		      __func__, lmac->cgx->cgx_id, lmac->lmac_id);
 		ret = -1;
 	}
+
+	printf("%d    %d    %s", lmac->cgx->cgx_id, lmac->lmac_id,
+	       lmac_type_to_str[lmac->lmac_type]);
+	/* Print link speed */
+	printf("  \t%s", lmac_speed_to_str[(u8)((status >> 2) & 0xf)]);
 	status &= 0x1;
+	/* Print link status */
+	printf(" \t%s\n", status ? "Up" : "Down");
 	if (status != enable) {
-		printf("%s couldn't bring %s link cgx%d lmac%d\n",
-			__func__, enable ? "up" : "down",
-			lmac->cgx->cgx_id, lmac->lmac_id);
+		debug("%s couldn't bring %s link cgx%d lmac%d\n",
+		      __func__, enable ? "up" : "down",
+		      lmac->cgx->cgx_id, lmac->lmac_id);
 		ret = -1;
 	}
 	return ret;
@@ -244,13 +266,18 @@ static int cgx_lmac_init(struct cgx *cgx)
 {
 	struct lmac *lmac;
 	union cavm_cgxx_cmrx_config cmrx_cfg;
-	static int instance = 1;
+	static int instance = 1, printed;
 	int i, ret;
 
 	cgx->lmac_count = cgx_read(cgx, 0, CAVM_CGXX_CMR_RX_LMACS());
 	debug("%s: Found %d lmacs for cgx %d@%p\n", __func__, cgx->lmac_count,
 	      cgx->cgx_id, cgx->reg_base);
-
+	if (cgx->lmac_count && !printed) {
+		printf("=========================================\n");
+		printf("CGX LMAC  Mode        Speed\tLink\n");
+		printf("=========================================\n");
+		printed = 1;
+	}
 	for (i = 0; i < cgx->lmac_count; i++) {
 		lmac = calloc(1, sizeof(*lmac));
 		if (!lmac)
@@ -271,14 +298,12 @@ static int cgx_lmac_init(struct cgx *cgx)
 		cgx_intf_get_mac_addr(cgx->cgx_id, i, lmac->mac_addr);
 		debug("%s: cgx%d lmac%d mac_addr\n",__func__,cgx->cgx_id, i);
 		debug("%s: MAC %pM\n", __func__, lmac->mac_addr);
-		printf("CGX%d LMAC%d %s \n", cgx->cgx_id, lmac->lmac_id,
-					lmac_type_to_str[lmac->lmac_type]);
 
 		cgx_lmac_mac_filter_setup(lmac);
 		ret = cgx_lmac_link_enable(lmac, lmac->lmac_id, true);
 		if (ret)
-			printf("%s could not bring up cgx%d lmac%d\n",
-				__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+			debug("%s could not bring up cgx%d lmac%d\n",
+			      __func__, lmac->cgx->cgx_id, lmac->lmac_id);
 		else
 			cgx_lmac_rx_tx_enable(lmac, lmac->lmac_id, false);
 	}
diff --git a/drivers/net/octeontx2/cgx_intf.c b/drivers/net/octeontx2/cgx_intf.c
index 258103c6f9..ec38af794f 100644
--- a/drivers/net/octeontx2/cgx_intf.c
+++ b/drivers/net/octeontx2/cgx_intf.c
@@ -151,7 +151,7 @@ int cgx_intf_req(u8 cgx, u8 lmac, u8 cmd, u64 *rsp)
 		goto error;
 	}
 	if (scr0.s.evt_sts.stat != CGX_STAT_SUCCESS) {
-		printf("%s failure for cmd %d on cgx %u lmac %u with errcode"
+		debug("%s failure for cmd %d on cgx %u lmac %u with errcode"
 			" %d\n", __func__, cmd, cgx, lmac, scr0.s.link_sts.err_type);
 		err = -1;
 		goto error;
-- 
2.29.0

