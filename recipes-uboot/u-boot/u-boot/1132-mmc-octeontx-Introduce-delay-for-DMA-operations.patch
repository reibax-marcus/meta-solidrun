From 2a0df36e6497d62d6ef2d9c2746f89ab79f67e37 Mon Sep 17 00:00:00 2001
From: Aaron Williams <awilliams@marvell.com>
Date: Mon, 13 Apr 2020 20:47:21 -0700
Subject: [PATCH 1132/1239] mmc: octeontx: Introduce delay for DMA operations

In a small percentage of operations on certain hardware it appears that
the DMA operation may not begin immediately.  This patch introduces a
small delay between starting a DMA operation and polling for its
completion.  This adds a new field to the mmc host setting (not slot)
in the device tree.

marvell,dma-wait-delay specifies how long to wait before polling for a
DMA operation to begin and is specified in microseconds.

Change-Id: I7859534042875efc9b7a82a43e2b0c2208489d8c
Signed-off-by: Aaron Williams <awilliams@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/26782
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
---
 drivers/mmc/octeontx_hsmmc.c | 7 ++++++-
 drivers/mmc/octeontx_hsmmc.h | 1 +
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/octeontx_hsmmc.c b/drivers/mmc/octeontx_hsmmc.c
index 8bfe9c5543..97aecfb61a 100644
--- a/drivers/mmc/octeontx_hsmmc.c
+++ b/drivers/mmc/octeontx_hsmmc.c
@@ -1014,6 +1014,7 @@ static void octeontx_mmc_cleanup_dma(struct mmc *mmc,
 static int octeontx_mmc_wait_dma(struct mmc *mmc, bool write, ulong timeout,
 				 bool verbose)
 {
+	struct octeontx_mmc_host *host = mmc_to_host(mmc);
 	ulong start_time = get_timer(0);
 	union mio_emm_dma_int emm_dma_int;
 	union mio_emm_rsp_sts rsp_sts;
@@ -1021,8 +1022,10 @@ static int octeontx_mmc_wait_dma(struct mmc *mmc, bool write, ulong timeout,
 	bool timed_out = false;
 	bool err = false;
 
-	debug("%s(%s, %lu, %d)\n", __func__, mmc->dev->name, timeout, verbose);
+	debug("%s(%s, %lu, %d), delay: %uus\n", __func__, mmc->dev->name,
+	      timeout, verbose, host->dma_wait_delay);
 
+	udelay(host->dma_wait_delay);
 	do {
 		emm_dma_int.u = read_csr(mmc, MIO_EMM_DMA_INT());
 		rsp_sts.u = read_csr(mmc, MIO_EMM_RSP_STS());
@@ -3731,6 +3734,8 @@ static int octeontx_mmc_host_probe(struct udevice *dev)
 		host->is_asim = true;
 	if (otx_is_platform(PLATFORM_EMULATOR))
 		host->is_emul = true;
+	host->dma_wait_delay =
+		ofnode_read_u32_default(dev->node, "marvell,dma-wait-delay", 1);
 	/* Force reset of eMMC */
 	writeq(0, host->base_addr + MIO_EMM_CFG());
 	debug("%s: Clearing MIO_EMM_CFG\n", __func__);
diff --git a/drivers/mmc/octeontx_hsmmc.h b/drivers/mmc/octeontx_hsmmc.h
index ed475798d0..70844b1cba 100644
--- a/drivers/mmc/octeontx_hsmmc.h
+++ b/drivers/mmc/octeontx_hsmmc.h
@@ -131,6 +131,7 @@ struct octeontx_mmc_host {
 	int		max_width;
 	uint		per_tap_delay;
 	uint		num_slots;
+	uint		dma_wait_delay;	/* Delay before polling DMA in usecs */
 	bool		initialized:1;
 	bool		timing_calibrated:1;
 	bool		is_asim:1;
-- 
2.29.0

