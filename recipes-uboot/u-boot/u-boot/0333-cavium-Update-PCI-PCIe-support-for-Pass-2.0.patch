From c90999bd14a4ee659588b32e53f3ef65df15f3ad Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Wed, 4 Nov 2015 14:40:50 -0800
Subject: [PATCH 0333/1239] cavium: Update PCI/PCIe support for Pass 2.0

---
 board/cavium/thunderx/pcie.c | 529 ++++++++++++++---------------------
 1 file changed, 217 insertions(+), 312 deletions(-)

diff --git a/board/cavium/thunderx/pcie.c b/board/cavium/thunderx/pcie.c
index c166645280..73fdc39f9b 100644
--- a/board/cavium/thunderx/pcie.c
+++ b/board/cavium/thunderx/pcie.c
@@ -13,7 +13,8 @@
 
 #include <common.h>
 #include <pci.h>
-#include <cavm-csrs.h>
+#include <cavm-csr.h>
+#include <cavium/atf.h>
 
 #define PCI_VENDOR_CAVIUM 0x177d
 #define PCI_DEV_CAVIUM_RC 0xa100
@@ -21,35 +22,42 @@
 #define RTARGET_MASK 0x1f;
 #define OPCODE_SIZE 4;
 
-void spec_sync_handler(struct pt_regs *pt_regs, unsigned int esr)
+#define ECAMS_PER_NODE 4
+#define ECAM_GROUPS 2
+#define RCS_PER_NODE 6
+#define RCS_PER_SLI 3
+
+struct thunderx_ecam {
+	int node;
+	int ecam;
+};
+
+static struct thunderx_ecam thunderx_ecam[CONFIG_THUNDERX_ECAMS];
+static struct pci_controller ecam_hose[CONFIG_THUNDERX_ECAMS];
+static struct pci_controller pem_hose[RCS_PER_NODE];
+
+
+#define RTARGET_MASK 0x1f;
+#define OPCODE_SIZE 4;
+
+void do_sync(struct pt_regs *pt_regs, unsigned int esr)
 {
+	int node, ecam;
 	uint32_t opcode;
-	uintptr_t far;
+	uintptr_t far = read_far();
+	uintptr_t baseaddr, endaddr;
 
 	int ecam, el, Rt;
 
 	/* get faulting address */
-	el = current_el();
-
-	if (el == 1) {
-		asm volatile("mrs %0, far_el1" : "=r" (far) : : "cc");
-	} else if (el == 2) {
-		asm volatile("mrs %0, far_el2" : "=r" (far) : : "cc");
-	} else {
-		asm volatile("mrs %0, far_el3" : "=r" (far) : : "cc");
-	}
 
-	opcode = readl(pt_regs->elr);
-
-#if 0
-	debug("FAR: %lx\n", far);
-	show_regs(pt_regs);
-	debug("Faulting opcode: %lx\n", opcode);
-#endif
-
-	for (ecam = 0; ecam < CONFIG_THUNDER_ECAMS; ecam++) {
-		if (far >= ECAMX_PF_BAR2(ecam) &&
-			far < ECAMX_PF_BAR2(ecam) + ECAMX_PF_BAR2_SIZE) {
+	for (ecam = 0; ecam < CONFIG_THUNDERX_ECAMS; ecam++) {
+		node = thunderx_ecam[ecam].node;
+		ecam = thunderx_ecam[ecam].node;
+		baseaddr = CSR_PA(node, ECAMX_PF_BAR2(ecam));
+		endaddr = baseaddr + ECAMX_PF_BAR2_SIZE;
+		if (far >= baseaddr && far < endaddr) {
+			opcode = readl(pt_regs->elr);
 			pt_regs->elr += OPCODE_SIZE;
 			Rt = opcode & RTARGET_MASK;
 			pt_regs->regs[Rt] = ~0UL;
@@ -58,21 +66,13 @@ void spec_sync_handler(struct pt_regs *pt_regs, unsigned int esr)
 		}
 	}
 
-	printf("\nFault at: %lx\n", far);
-	printf("ESR: %x\n", esr);
 	show_regs(pt_regs);
 	panic("Resetting CPU...");
 	return;
 }
 
-#define SLI_PER_NODE 2
-#define ECAMS_PER_NODE 4
-#define ECAM_GROUPS 2
-#define RCS_PER_ECAM 3
-#define RCS_PER_NODE 6
-#define RCS_PER_SLI 3
-
-static uintptr_t thunderx_mmcfg_addr(unsigned int rc, pci_dev_t dev, unsigned int reg)
+static uintptr_t thunderx_mmcfg_addr(unsigned int rc, pci_dev_t dev,
+				     unsigned int reg)
 {
 	union sli_s2m_op_s sli_s2m_op;
 	unsigned long node = rc / RCS_PER_NODE;
@@ -101,267 +101,147 @@ static uintptr_t thunderx_mmcfg_addr(unsigned int rc, pci_dev_t dev, unsigned in
 #define read16	readw
 #define read32	readl
 
-int rc_is_on(unsigned int rc)
-{
-	union pemx_on pemx_on;
-
-	if (rc > 5)
-		return 0;
-
-	pemx_on.u = readq(PEMX_ON(rc));
-
-	return ((pemx_on.s.pemon != 0) && (pemx_on.s.pemoor != 0));
-}
-
-#if 0
-const pci_dev_t RC_DEVS[] = {PCI_BDF(0, 0x10, 0),
-			PCI_BDF(0, 0x12, 0), PCI_BDF(0, 0x14, 0)};
-
-int thunderx_pci_to_rc(struct pci_controller *hose, pci_dev_t dev)
-{
-	int  = (uintptr_t)hose->priv_data;
-	u32 b, d, f;
-	int ret = -1;
-
-	b = PCI_BUS(dev) - hose->first_busno;
-	d = PCI_DEV(dev);
-	f = PCI_FUNC(dev);
-
-	if ((ecam & 1)) {
-		switch (dev) {
-		case PCI_BDF(0, 0x10, 0):
-			ret = (ecam == 3) ? 3 : 0;
-			break;
-		case PCI_BDF(0, 0x12, 0):
-			ret = (ecam == 3) ? 4 : 1;
-			break;
-		case PCI_BDF(0, 0x14, 0):
-			ret = (ecam == 3) ? 5 : 2;
-			break;
-		}
-	}
-
-	return ret;
+#define PCI_ECAM_READ(size)							\
+static int thunderx_rd_ecam_u##size(struct pci_controller *hose,		\
+				pci_dev_t dev, int offset, u##size *val)	\
+{										\
+	u32 b, d, f;								\
+	union ecam_cfg_addr_s address;						\
+	struct thunderx_ecam *ecam = hose->priv_data;				\
+										\
+	b = PCI_BUS(dev) - hose->first_busno;					\
+	d = PCI_DEV(dev);							\
+	f = PCI_FUNC(dev);							\
+										\
+	address.u = 0;								\
+	address.s.func = (d << 3) | (f << 0);					\
+	address.s.bus  = b;							\
+	address.s.addr = offset;						\
+	address.u += CSR_PA(ecam->node, ECAMX_PF_BAR2(ecam->ecam));		\
+										\
+	*val = read##size(address.u);						\
+	debug("%d.%d::%02x.%02x.%02x: u%d %x -> %x\n",				\
+		ecam->node, ecam->ecam, b, d, f, size, offset, *val);		\
+										\
+	return 0;								\
 }
-#endif
 
-static int thunderx_read_rc_u32(int rc, int offset, u32 *val)
-{
-	union pemx_cfg_rd pemx_cfg_rd;
-	pemx_cfg_rd.u = 0;
+PCI_ECAM_READ(8)
+PCI_ECAM_READ(16)
+PCI_ECAM_READ(32)
 
-	if ((rc >= 0) && rc_is_on(rc)) {
-		pemx_cfg_rd.s.addr = offset & ~0x3;
-		writeq(pemx_cfg_rd.u, PEMX_CFG_RD(rc));
-		pemx_cfg_rd.u = readq(PEMX_CFG_RD(rc));
-		*val = pemx_cfg_rd.s.data;
-	} else {
-		*val = (u32)~0UL;
-	}
-	return 0;
+#define PCI_ECAM_WRITE(size)							\
+static int thunderx_wr_ecam_u##size(struct pci_controller *hose,		\
+				pci_dev_t dev, int offset, u##size val)		\
+{										\
+	u32 b, d, f;								\
+	union ecam_cfg_addr_s address;						\
+	struct thunderx_ecam *ecam = hose->priv_data;				\
+										\
+	b = PCI_BUS(dev) - hose->first_busno;					\
+	d = PCI_DEV(dev);							\
+	f = PCI_FUNC(dev);							\
+	dev = PCI_BDF(b, d, f);							\
+	debug("%d.%d::%02x.%02x.%02x: u%d %x <- %x\n",				\
+		ecam->node, ecam->ecam, b, d, f, size, offset, val);		\
+										\
+	address.u = 0;								\
+	address.s.func = (d << 3) | (f << 0);					\
+	address.s.bus  = b;							\
+	address.s.addr = offset;						\
+	address.u += CSR_PA(ecam->node, ECAMX_PF_BAR2(ecam->ecam));		\
+										\
+	write##size(val, address.u);						\
+										\
+	return 0;								\
 }
 
-#if 0
-
-#define PCI_RC_WRITE(size)											\
-static int thunderx_wr_rc_u##size(struct pci_controller *hose,		\
-				pci_dev_t dev, int offset, u##size val)				\
-{																	\
-	union pemx_cfg_wr pemx_cfg_wr;									\
-	int rc = thunderx_pci_to_rc(hose, dev);							\
-	u32 tmp;														\
-	u32 mask = (u##size)~0UL << 8 * (offset & 0x3);					\
-																	\
-	pemx_cfg_wr.u = 0;												\
-																	\
-	debug("%02x.%02x.%02x: u%d %x <- %x\n",							\
-			PCI_BUS(dev), PCI_DEV(dev), PCI_FUNC(dev),				\
-			size, offset, val);										\
-	if ((rc >= 0) && rc_is_on(rc)) {								\
-		pemx_cfg_wr.s.addr = offset & ~0x3;							\
-		thunderx_rd_rc_u32(hose, dev, offset & ~0x3, &tmp);			\
-																	\
-		debug("0:tmp: %x, mask: %x, val: %x\n", tmp, mask, val);	\
-		tmp &= ~mask;												\
-		debug("1:tmp: %x, val: %x\n", tmp, val);					\
-		tmp |= (u32)val << 8 * (offset & 0x3);						\
-		debug("2:tmp: %x\n", tmp);									\
-		pemx_cfg_wr.s.data = tmp;									\
-		writeq(pemx_cfg_wr.u, PEMX_CFG_WR(rc));						\
-	}																\
-	return 0;														\
-}
+PCI_ECAM_WRITE(8)
+PCI_ECAM_WRITE(16)
+PCI_ECAM_WRITE(32)
 
-PCI_RC_WRITE(8)
-PCI_RC_WRITE(16)
-PCI_RC_WRITE(32)
-#endif
-
-#define PCI_PEM_READ(size)											\
-static int thunderx_rd_pem_u##size(struct pci_controller *hose,		\
-				pci_dev_t dev, int offset, u##size *val)			\
-{																	\
-	uintptr_t mmcfg_addr;											\
-	u32 b, d, f;													\
-	int rc = (uintptr_t)hose->priv_data;							\
-																	\
-	b = PCI_BUS(dev);												\
-	d = PCI_DEV(dev);												\
-	f = PCI_FUNC(dev);												\
-																	\
-	if (d == 1) {													\
-		mmcfg_addr = thunderx_mmcfg_addr(rc,						\
-										PCI_BDF(b, d, f), offset);	\
-		*val = read##size(mmcfg_addr);								\
-	} else {														\
-		*val = (u##size)~0UL;										\
-	}																\
-																	\
-	return 0;														\
+#define PCI_PEM_READ(size)							\
+static int thunderx_rd_pem_u##size(struct pci_controller *hose,			\
+				pci_dev_t dev, int offset, u##size *val)	\
+{										\
+	uintptr_t mmcfg_addr;							\
+	u32 b, d, f;								\
+	int rc = (uintptr_t)hose->priv_data;					\
+										\
+	b = PCI_BUS(dev);							\
+	d = PCI_DEV(dev);							\
+	f = PCI_FUNC(dev);							\
+										\
+	if (d == 0) {								\
+		mmcfg_addr = thunderx_mmcfg_addr(rc, PCI_BDF(b, d, f),		\
+						 offset);			\
+		*val = read##size(mmcfg_addr);					\
+		debug("%02x.%02x.%02x: %x -> %x\n", b, d, f, offset, *val);	\
+	} else {								\
+		*val = (u##size)~0UL;						\
+	}									\
+										\
+	return 0;								\
 }
 
 PCI_PEM_READ(8)
 PCI_PEM_READ(16)
 PCI_PEM_READ(32)
 
-#define PCI_PEM_WRITE(size)											\
-static int thunderx_wr_pem_u##size(struct pci_controller *hose,		\
-				pci_dev_t dev, int offset, u##size val)				\
-{																	\
-	uintptr_t mmcfg_addr;											\
-	u32 b, d, f;													\
-	int rc = (uintptr_t)hose->priv_data;							\
-																	\
-	b = PCI_BUS(dev);												\
-	d = PCI_DEV(dev);												\
-	f = PCI_FUNC(dev);												\
-	debug("%02x.%02x.%02x: %x <- %x\n", b, d, f,					\
-					offset, val);									\
-																	\
-	if (d == 1) {													\
-		mmcfg_addr = thunderx_mmcfg_addr(rc,						\
-								PCI_BDF(b, d, f), offset);			\
-																	\
-		write##size(val, mmcfg_addr);								\
-	}																\
-																	\
-	return 0;														\
+#define PCI_PEM_WRITE(size)							\
+static int thunderx_wr_pem_u##size(struct pci_controller *hose,			\
+				pci_dev_t dev, int offset, u##size val)		\
+{										\
+	uintptr_t mmcfg_addr;							\
+	u32 b, d, f;								\
+	int rc = (uintptr_t)hose->priv_data;					\
+										\
+	b = PCI_BUS(dev);							\
+	d = PCI_DEV(dev);							\
+	f = PCI_FUNC(dev);							\
+	debug("%02x.%02x.%02x: %x <- %x\n", b, d, f,				\
+					offset, val);				\
+										\
+	if (d == 0) {								\
+		mmcfg_addr = thunderx_mmcfg_addr(rc,				\
+						 PCI_BDF(b, d, f), offset);	\
+										\
+		write##size(val, mmcfg_addr);					\
+	}									\
+										\
+	return 0;								\
 }
 
 PCI_PEM_WRITE(8)
 PCI_PEM_WRITE(16)
 PCI_PEM_WRITE(32)
 
-#define PCI_ECAM_READ(size)											\
-static int thunderx_rd_ecam_u##size(struct pci_controller *hose,	\
-				pci_dev_t dev, int offset, u##size *val)			\
-{																	\
-	u32 b, d, f;													\
-	union ecam_cfg_addr_s address;									\
-	int ecam = (uintptr_t)hose->priv_data;							\
-																	\
-	b = PCI_BUS(dev) - hose->first_busno;							\
-	d = PCI_DEV(dev);												\
-	f = PCI_FUNC(dev);												\
-																	\
-	address.u = 0;													\
-	address.s.func = (d << 3) | (f << 0);							\
-	address.s.bus  = b;												\
-	address.s.addr = offset;										\
-	address.u += ECAMX_PF_BAR2(ecam);								\
-																	\
-	*val = read##size(address.u);									\
-																	\
-	return 0;														\
-}
-
-PCI_ECAM_READ(8)
-PCI_ECAM_READ(16)
-PCI_ECAM_READ(32)
-
-#define PCI_ECAM_WRITE(size)										\
-static int thunderx_wr_ecam_u##size(struct pci_controller *hose,	\
-				pci_dev_t dev, int offset, u##size val)				\
-{																	\
-	u32 b, d, f;													\
-	union ecam_cfg_addr_s address;									\
-	int ecam = (uintptr_t)hose->priv_data;							\
-																	\
-	b = PCI_BUS(dev) - hose->first_busno;							\
-	d = PCI_DEV(dev);												\
-	f = PCI_FUNC(dev);												\
-	dev = PCI_BDF(b, d, f);											\
-																	\
-	address.u = 0;													\
-	address.s.func = (d << 3) | (f << 0);							\
-	address.s.bus  = b;												\
-	address.s.addr = offset;										\
-	address.u += ECAMX_PF_BAR2(ecam);								\
-																	\
-	write##size(val, address.u);									\
-																	\
-	return 0;														\
-}
+int rc_is_on(unsigned int rc)
+{
+	union pemx_on pemx_on;
 
-PCI_ECAM_WRITE(8)
-PCI_ECAM_WRITE(16)
-PCI_ECAM_WRITE(32)
+	if (rc > 5)
+		return 0;
 
-#if 0
-#define PCI_READ(size)												\
-static int thunderx_rd_config_u##size(struct pci_controller *hose,	\
-				pci_dev_t dev, int offset, u##size *val)			\
-{																	\
-	int ecam = (uintptr_t)hose->priv_data;							\
-	int rc = thunderx_pci_to_rc(hose, dev);							\
-	u32 b = PCI_BUS(dev) - hose->first_busno;						\
-																	\
-	if (b > 0 && (ecam & 1)) {										\
-		return thunderx_rd_ext_u##size(hose, dev, offset, val);		\
-	} else {														\
-		return thunderx_rd_ecam_u##size(hose, dev, offset, val);	\
-	}																\
-}
+	pemx_on.u = readq(PEMX_ON(rc));
 
-PCI_READ(8)
-PCI_READ(16)
-PCI_READ(32)
-
-#define PCI_WRITE(size)												\
-static int thunderx_wr_config_u##size(struct pci_controller *hose,	\
-				pci_dev_t dev, int offset, u##size val)				\
-{																	\
-	int ecam = (uintptr_t)hose->priv_data;							\
-	int rc = thunderx_pci_to_rc(hose, dev);							\
-	u32 b = PCI_BUS(dev) - hose->first_busno;						\
-																	\
-	if (b > 0 && (ecam & 1)) {										\
-		return thunderx_wr_ext_u##size(hose, dev, offset, val);		\
-	} else {														\
-		return thunderx_wr_ecam_u##size(hose, dev, offset, val);	\
-	}																\
+	return ((pemx_on.s.pemon != 0) && (pemx_on.s.pemoor != 0));
 }
 
-PCI_WRITE(8)
-PCI_WRITE(16)
-PCI_WRITE(32)
-#endif
-
-static struct pci_controller ecam_hose[ECAMS_PER_NODE];
-static struct pci_controller pem_hose[RCS_PER_NODE];
-
-void thunderx_sli_setup(unsigned long node)
+static int thunderx_read_rc_u32(int rc, int offset, u32 * val)
 {
-	unsigned long sli, reg;
-	union slix_s2m_regx_acc slix_s2m_regx_acc;
-
-	for (sli = 0; sli < SLI_PER_NODE; sli++) {
-		for (reg = 0; reg <= 255; reg++) {
-			slix_s2m_regx_acc.u = readq(SLIX_S2M_REGX_ACC(sli, reg));
-			slix_s2m_regx_acc.s.ba = 0;
-			writeq(slix_s2m_regx_acc.u, SLIX_S2M_REGX_ACC(sli, reg));
-		}
+	union pemx_cfg_rd pemx_cfg_rd;
+	pemx_cfg_rd.u = 0;
+
+	if ((rc >= 0) && rc_is_on(rc)) {
+		pemx_cfg_rd.s.addr = offset & ~0x3;
+		writeq(pemx_cfg_rd.u, PEMX_CFG_RD(rc));
+		pemx_cfg_rd.u = readq(PEMX_CFG_RD(rc));
+		*val = pemx_cfg_rd.s.data;
+	} else {
+		*val = (u32) ~ 0UL;
 	}
+	return 0;
 }
 
 void pci_init_board(void)
@@ -369,91 +249,107 @@ void pci_init_board(void)
 	long ecam, pem;
 	u32 reg;
 	u8 sec_bus, sub_bus;
-#if 0
-	u64 res_start, res_limit;
-#endif
+
 	u64 pci_mem[] = CONFIG_SYS_PCI_MEM_CPU;
 	u64 pci_pref[] = CONFIG_SYS_PCI_PREF_CPU;
 	u64 pci_io[] = CONFIG_SYS_PCI_IO_CPU;
-	int ret;
+	uintptr_t baseaddr;
+	int ret, node;
+
+	for (ecam = 0; ecam < CONFIG_THUNDERX_ECAMS; ecam++) {
+		thunderx_ecam[ecam].node = ecam / ECAMS_PER_NODE;
+		thunderx_ecam[ecam].ecam = ecam % ECAMS_PER_NODE;
 
-	thunderx_sli_setup(0);
+		if (thunderx_ecam[ecam].node >= atf_node_count())
+			break;
 
-	for (ecam = 0; ecam < CONFIG_THUNDER_ECAMS; ecam++) {
 		debug("%s: %d, ecam: %ld\n", __FUNCTION__, __LINE__, ecam);
+
 		ecam_hose[ecam].first_busno = pci_last_busno() + 1;
 		ecam_hose[ecam].last_busno = 0xff;
 
 		ecam_hose[ecam].region_count = 0;
-		ecam_hose[ecam].priv_data    = (void*)ecam;
+		ecam_hose[ecam].priv_data = &thunderx_ecam[ecam];
 
 		pci_set_ops(&ecam_hose[ecam],
-					thunderx_rd_ecam_u8,
-					thunderx_rd_ecam_u16,
-					thunderx_rd_ecam_u32,
-					thunderx_wr_ecam_u8,
-					thunderx_wr_ecam_u16,
-					thunderx_wr_ecam_u32);
+			    thunderx_rd_ecam_u8,
+			    thunderx_rd_ecam_u16,
+			    thunderx_rd_ecam_u32,
+			    thunderx_wr_ecam_u8,
+			    thunderx_wr_ecam_u16,
+			    thunderx_wr_ecam_u32);
 
 		pci_register_hose(&ecam_hose[ecam]);
 
 		ret = pci_hose_scan(&ecam_hose[ecam]);
 
 		debug("%s: %d, ret: %d\n", __FUNCTION__, __LINE__, ret);
-		if (ret > 0) {
+
+		if (ret > 0)
 			ecam_hose[ecam].last_busno = ret;
-		}
 	}
 
-	for (pem = 0; pem < RCS_PER_NODE; pem++) {
+	for (pem = 0; pem < CONFIG_THUNDERX_RCS; pem++) {
+		if (pem / RCS_PER_NODE >= atf_node_count())
+			break;
+
 		if (!rc_is_on(pem))
 			continue;
 
 		thunderx_read_rc_u32(pem, PCI_PRIMARY_BUS, &reg);
-		sec_bus = (u8)(reg >> 8);
-		sub_bus = (u8)(reg >> 16);
+
+		sec_bus = (u8) (reg >> 8);
+		sub_bus = (u8) (reg >> 16);
 
 		pem_hose[pem].first_busno = sec_bus;
 		pem_hose[pem].last_busno = sub_bus;
 
 		pci_set_region(pem_hose[pem].regions + 0,
-				CONFIG_SYS_PCI_MEM_BUS,
-				pci_mem[pem],
-				CONFIG_SYS_PCI_MEM_SIZE,
-				PCI_REGION_MEM);
+			       CONFIG_SYS_PCI_MEM_BUS,
+			       pci_mem[pem],
+			       CONFIG_SYS_PCI_MEM_SIZE,
+			       PCI_REGION_MEM);
 
 		pci_set_region(pem_hose[pem].regions + 1,
-				CONFIG_SYS_PCI_PREF_BUS,
-				pci_pref[pem],
-				CONFIG_SYS_PCI_PREF_SIZE,
-				PCI_REGION_MEM | PCI_REGION_PREFETCH);
+			       CONFIG_SYS_PCI_PREF_BUS,
+			       pci_pref[pem],
+			       CONFIG_SYS_PCI_PREF_SIZE,
+			       PCI_REGION_MEM | PCI_REGION_PREFETCH);
 
 		pci_set_region(pem_hose[pem].regions + 2,
-				CONFIG_SYS_PCI_IO_BUS,
-				pci_io[pem],
-				CONFIG_SYS_PCI_IO_SIZE,
-				PCI_REGION_IO);
-
+			       CONFIG_SYS_PCI_IO_BUS,
+			       pci_io[pem],
+			       CONFIG_SYS_PCI_IO_SIZE,
+			       PCI_REGION_IO);
 
 		pem_hose[pem].region_count = 3;
-		pem_hose[pem].priv_data    = (void*)pem;
+
+		for (node = 0; node < atf_node_count(); node++) {
+			baseaddr = (uintptr_t)node << 40;
+			pci_set_region(pem_hose[pem].regions + 3 + node,
+				       baseaddr, baseaddr,
+				       baseaddr + atf_dram_size(node),
+				       PCI_REGION_MEM | PCI_REGION_SYS_MEMORY);
+
+			pem_hose[pem].region_count++;
+		}
+
+		pem_hose[pem].priv_data = (void *)pem;
 
 		pci_set_ops(&pem_hose[pem],
-					thunderx_rd_pem_u8,
-					thunderx_rd_pem_u16,
-					thunderx_rd_pem_u32,
-					thunderx_wr_pem_u8,
-					thunderx_wr_pem_u16,
-					thunderx_wr_pem_u32);
+			    thunderx_rd_pem_u8,
+			    thunderx_rd_pem_u16,
+			    thunderx_rd_pem_u32,
+			    thunderx_wr_pem_u8,
+			    thunderx_wr_pem_u16,
+			    thunderx_wr_pem_u32);
 
 		pci_register_hose(&pem_hose[pem]);
-
-		ret = pci_hose_scan(&pem_hose[pem]);
+			ret = pci_hose_scan(&pem_hose[pem]);
 
 	}
 }
 
-#if 1
 int pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
 {
 	u16 vendor, device;
@@ -466,10 +362,19 @@ int pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
 		ret = 1;
 	} else {
 		debug("Non-fixed configuration at %02x:%02x.%02x\n",
-					PCI_BUS(dev), PCI_DEV(dev), PCI_FUNC(dev));
+		      PCI_BUS(dev), PCI_DEV(dev), PCI_FUNC(dev));
 	}
 
 	return ret;
 }
-#endif
+
+int pci_skip_dev(struct pci_controller *hose, pci_dev_t dev)
+{
+        return 0;
+}
+
+int pci_print_dev(struct pci_controller *hose, pci_dev_t dev)
+{
+	return 1;
+}
 
-- 
2.29.0

