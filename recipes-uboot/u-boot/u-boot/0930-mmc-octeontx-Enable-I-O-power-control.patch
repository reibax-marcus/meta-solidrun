From 4361ad0553d33ec3859b66de885c051fd1a1129b Mon Sep 17 00:00:00 2001
From: Aaron Williams <aaron.williams@cavium.com>
Date: Wed, 5 Jun 2019 20:51:12 -0700
Subject: [PATCH 0930/1239] mmc: octeontx: Enable I/O power control

This patch allows the OcteonTX driver to automatically control
the I/O power so it can switch between 3.3 and 1.8v devices.
This is required when both SD and eMMC devices share the same
bus so that HS400 mode can be supported.  When a 1.8v device
such as eMMC is selected, all of the other I/O supplies are
disabled.  Similarly, when a 3.3v device like an SD card is
selected the 1.8v I/O is disabled.

This has been tested with the EBB9604, EBB9304 and EBB9504
boards.  This eliminates the need to issue the
gpio set gpio@6c_307, etc. as well as editing the device
tree to select which devices are available.

Change-Id: I9df96babc0a73461a31006583af0917587f97ee8
Signed-off-by: Aaron Williams <aaron.williams@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/10560
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
---
 drivers/mmc/octeontx_hsmmc.c | 93 ++++++++++++++++++++++++++++++++++++
 drivers/mmc/octeontx_hsmmc.h |  1 +
 2 files changed, 94 insertions(+)

diff --git a/drivers/mmc/octeontx_hsmmc.c b/drivers/mmc/octeontx_hsmmc.c
index 8308810922..6ce7d36018 100644
--- a/drivers/mmc/octeontx_hsmmc.c
+++ b/drivers/mmc/octeontx_hsmmc.c
@@ -23,6 +23,7 @@
 #include <linux/list.h>
 #include <div64.h>
 #include <watchdog.h>
+#include <power/regulator.h>
 #include <console.h>	/* for ctrlc */
 #include "octeontx_hsmmc.h"
 #if defined(CONFIG_ARCH_OCTEONTX)
@@ -2185,6 +2186,86 @@ static void octeontx_mmc_set_clock(struct mmc *mmc)
 	mmc->clock = clock;
 }
 
+/**
+ * This switches I/O power as needed when switching between slots.
+ *
+ * @param	mmc	mmc data structure
+ */
+static void octeontx_mmc_switch_io(struct mmc *mmc)
+{
+	struct octeontx_mmc_slot *slot = mmc_to_slot(mmc);
+	struct octeontx_mmc_host *host = slot->host;
+	struct mmc *last_mmc = host->last_mmc;
+	static struct udevice *last_reg;
+	int bus;
+	static bool initialized;
+
+	/* First time? */
+	if (!initialized || (mmc != host->last_mmc)) {
+		struct mmc *ommc;
+
+		/* Turn off all other I/O interfaces with first initialization
+		 * if at least one supply was found.
+		 */
+		for (bus = 0; bus <= OCTEONTX_MAX_MMC_SLOT; bus++) {
+			ommc = &host->slots[bus].mmc;
+
+			/* Handle self case later */
+			if ((ommc == mmc) || !ommc->vqmmc_supply)
+				continue;
+
+			/* Skip if we're not switching regulators */
+			if (last_reg == mmc->vqmmc_supply)
+				continue;
+
+			/* Turn off other regulators */
+			if (ommc->vqmmc_supply != mmc->vqmmc_supply)
+				regulator_set_enable(ommc->vqmmc_supply, false);
+		}
+		/* Turn ourself on */
+		if (mmc->vqmmc_supply && last_reg != mmc->vqmmc_supply)
+			regulator_set_enable(mmc->vqmmc_supply, true);
+
+		last_reg = mmc->vqmmc_supply;
+		initialized = true;
+		return;
+	}
+
+	/* No change in device */
+	if (last_mmc == mmc)
+		return;
+
+	if (!last_mmc) {
+		pr_warn("%s(%s): No previous slot detected in IO slot switch!\n",
+			__func__, mmc->dev->name);
+		return;
+	}
+
+	debug("%s(%s): last: %s, supply: %p\n", __func__, mmc->dev->name,
+	      last_mmc->dev->name, mmc->vqmmc_supply);
+
+	/* The supply is the same so we do nothing */
+	if (last_mmc->vqmmc_supply == mmc->vqmmc_supply)
+		return;
+
+	/* Turn off the old slot I/O supply */
+	if (last_mmc->vqmmc_supply) {
+		debug("%s(%s): Turning off IO to %s, supply: %s\n",
+		      __func__, mmc->dev->name, last_mmc->dev->name,
+		      last_mmc->vqmmc_supply->name);
+		regulator_set_enable(last_mmc->vqmmc_supply, false);
+	}
+	/* Turn on the new slot I/O supply */
+	if (mmc->vqmmc_supply)  {
+		debug("%s(%s): Turning on IO to slot %d, supply: %s\n",
+		      __func__, mmc->dev->name, slot->bus_id,
+		      mmc->vqmmc_supply->name);
+		regulator_set_enable(mmc->vqmmc_supply, true);
+	}
+	/* Allow power to settle */
+	mdelay(1);
+}
+
 /**
  * Called to switch between mmc devices
  *
@@ -2204,6 +2285,7 @@ static void octeontx_mmc_switch_to(struct mmc *mmc)
 
 	debug("%s(%s) switching from slot %d to slot %d\n", __func__,
 	      mmc->dev->name, host->last_slotid, slot->bus_id);
+	octeontx_mmc_switch_io(mmc);
 
 	if (host->last_slotid >= 0 && slot->valid) {
 		old_slot = &host->slots[host->last_slotid];
@@ -2229,6 +2311,7 @@ static void octeontx_mmc_switch_to(struct mmc *mmc)
 	emm_sts_mask.s.sts_msk = 1 << 7 | 1 << 22 | 1 << 23 | 1 << 19;
 	write_csr(mmc, CAVM_MIO_EMM_STS_MASK(), emm_sts_mask.u);
 	host->last_slotid = slot->bus_id;
+	host->last_mmc = mmc;
 	mdelay(10);
 }
 
@@ -2562,6 +2645,16 @@ static int octeontx_mmc_slot_probe(struct udevice *dev)
 		return err;
 	}
 	slot->valid = true;
+
+	if (!err) {
+		/* Initialize each device regulator */
+		err = mmc_power_init(&slot->mmc);
+		debug("%s: Initialized %s\n", __func__, dev->name);
+		/* Turn off all I/O supplies */
+		if (!err && slot->mmc.vqmmc_supply)
+			regulator_set_enable(slot->mmc.vqmmc_supply, false);
+	}
+
 	debug("%s(%s):\n"
 	      "  base address : %p\n"
 	      "  bus id       : %d\n", __func__, dev->name,
diff --git a/drivers/mmc/octeontx_hsmmc.h b/drivers/mmc/octeontx_hsmmc.h
index 54fedd64a7..ad3f3a50d7 100644
--- a/drivers/mmc/octeontx_hsmmc.h
+++ b/drivers/mmc/octeontx_hsmmc.h
@@ -111,6 +111,7 @@ struct octeontx_mmc_host {
 	u64		sys_freq;
 	union cavm_mio_emm_cfg emm_cfg;
 	u64		timing_taps;
+	struct mmc	*last_mmc;	/** Last mmc used */
 	ofnode		node;
 	int		cur_slotid;
 	int		last_slotid;
-- 
2.29.0

