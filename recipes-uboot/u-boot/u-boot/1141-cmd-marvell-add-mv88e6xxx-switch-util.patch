From 314dc5a134362914c08b9769a61c052ea5d28270 Mon Sep 17 00:00:00 2001
From: Ben Peled <bpeled@marvell.com>
Date: Tue, 21 Apr 2020 20:14:45 +0300
Subject: [PATCH 1141/1239] cmd: marvell: add mv88e6xxx switch util

adds cmd which helps with switch init,
info, link status

Signed-off-by: Ben Peled <bpeled@marvell.com>
Change-Id: I287eb7ed6aaa16c62e7b4917b9f2fa225f4c2127
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/27167
Tested-by: Kostya Porotchkin <kostap@marvell.com>
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
---
 cmd/mvebu/Kconfig          |   9 +
 cmd/mvebu/Makefile         |   3 +-
 cmd/mvebu/mv88e6xxx-util.c | 633 +++++++++++++++++++++++++++++++++++++
 cmd/mvebu/mv88e6xxx-util.h | 398 +++++++++++++++++++++++
 4 files changed, 1042 insertions(+), 1 deletion(-)
 create mode 100644 cmd/mvebu/mv88e6xxx-util.c
 create mode 100644 cmd/mvebu/mv88e6xxx-util.h

diff --git a/cmd/mvebu/Kconfig b/cmd/mvebu/Kconfig
index 23c16e5bc4..72822eb104 100644
--- a/cmd/mvebu/Kconfig
+++ b/cmd/mvebu/Kconfig
@@ -9,6 +9,15 @@ config CMD_MVEBU_BUBT
 	  For details about bubt command please see the documentation
 	  in doc/mvebu/cmd/bubt.txt
 
+config CMD_MV88E6XXX_UTIL
+	bool "mvswitch"
+	depends on MV88E6XXX_SWITCH
+	default y
+	help
+	  mvswitch command handle mv88e6xxx
+	  assist with switch init
+	  display switch info and link state
+
 config CMD_MVEBU_MV_FW_INFO
 	bool "mv_fw_info"
 	depends on TARGET_MVEBU_ARMADA_8K || TARGET_OCTEONTX2_CN913x
diff --git a/cmd/mvebu/Makefile b/cmd/mvebu/Makefile
index 2912c1f5d3..3b44d99bef 100644
--- a/cmd/mvebu/Makefile
+++ b/cmd/mvebu/Makefile
@@ -17,4 +17,5 @@ obj-$(CONFIG_CMD_MVEBU_HW_INFO) += hw_info.o
 obj-$(CONFIG_CMD_MVEBU_SAR) += sar.o
 obj-$(CONFIG_CMD_MVEBU_MV_FW_INFO) += mv_fw_info.o
 obj-$(CONFIG_CMD_MVEBU_MV_GET_COUNTERS) += mv_get_counters.o
-obj-$(CONFIG_CMD_MVEBU_DDR_PHY) += ddr_phy.o
\ No newline at end of file
+obj-$(CONFIG_CMD_MVEBU_DDR_PHY) += ddr_phy.o
+obj-$(CONFIG_CMD_MV88E6XXX_UTIL) += mv88e6xxx-util.o
\ No newline at end of file
diff --git a/cmd/mvebu/mv88e6xxx-util.c b/cmd/mvebu/mv88e6xxx-util.c
new file mode 100644
index 0000000000..ceb2558ac2
--- /dev/null
+++ b/cmd/mvebu/mv88e6xxx-util.c
@@ -0,0 +1,633 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 Marvell International Ltd.
+ *
+ */
+
+#include "mv88e6xxx-util.h"
+/* If the switch's ADDR[4:0] strap pins are strapped to zero, it will
+ * use all 32 SMI bus addresses on its SMI bus, and all switch registers
+ * will be directly accessible on some {device address,register address}
+ * pair.  If the ADDR[4:0] pins are not strapped to zero, the switch
+ * will only respond to SMI transactions to that specific address, and
+ * an indirect addressing mechanism needs to be used to access its
+ * registers.
+ */
+
+static struct mv88e6xxx_dev soho_dev;
+static struct mv88e6xxx_dev *soho_dev_handle;
+static int REG_PORT_BASE = REG_PORT_BASE_UNDEFINED;
+
+static int mv88e6xxx_reg_wait_ready(struct mv88e6xxx_dev *dev)
+{
+	int ret;
+	int i;
+	int loop_timeout = 50;
+	unsigned short val;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	for (i = 0; i < loop_timeout; i++) {
+		ret = miiphy_read(name, dev->phy_addr, SMI_CMD, &val);
+		if (ret < 0)
+			return ret;
+		if ((val & SMI_CMD_BUSY) == 0)
+			return 0;
+
+		mdelay(10);
+	}
+
+	return -ETIMEDOUT;
+}
+
+static int mv88e6xxx_read_register(struct mv88e6xxx_dev *dev, int port, int reg)
+{
+	int ret;
+	unsigned short val;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	if (!dev)
+		return -ENODEV;
+
+	if (dev->addr_mode == 0) {
+		ret = miiphy_read(name, port, reg, &val);
+		if (ret < 0)
+			return ret;
+		else
+			return (int)val;
+	}
+
+	/* Wait for the bus to become free. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit the read command. */
+	ret = miiphy_write(name, dev->phy_addr, SMI_CMD,
+			   SMI_CMD_OP_22_READ |
+			   ((port & SMI_CMD_DEV_ADDR_MASK)
+			   << SMI_CMD_DEV_ADDR_SIZE) |
+			   (reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	/* Wait for the read command to complete. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Read the data. */
+	ret = miiphy_read(name, dev->phy_addr, SMI_DATA, &val);
+	if (ret < 0)
+		return ret;
+
+	return (int)val;
+}
+
+static int mv88e6xxx_reg_wait_ready_indirect(struct mv88e6xxx_dev *dev)
+{
+	int ret, i;
+	int loop_timeout = 50;
+
+	for (i = 0; i < loop_timeout; i++) {
+		ret = mv88e6xxx_read_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP);
+		if (ret < 0)
+			return ret;
+		if (!(ret & GLOBAL2_SMI_OP_BUSY))
+			return 0;
+		mdelay(10);
+	}
+	return -ETIMEDOUT;
+}
+
+static int mv88e6xxx_write_register(struct mv88e6xxx_dev *dev, int port,
+				    int reg, unsigned short val)
+{
+	int ret;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	if (!dev)
+		return -ENODEV;
+
+	if (dev->addr_mode == 0) {
+	/* Need wait for indriect ready before write command.*/
+		ret = mv88e6xxx_reg_wait_ready_indirect(dev);
+		if (ret < 0)
+			return ret;
+		else
+			return miiphy_write(name, port, reg, val);
+	}
+
+	/* Wait for the bus to become free. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit data to write. */
+	ret = miiphy_write(name, dev->phy_addr, SMI_DATA, val);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit the write command. */
+	ret = miiphy_write(name, dev->phy_addr, SMI_CMD,
+			   SMI_CMD_OP_22_WRITE |
+			   ((port & SMI_CMD_DEV_ADDR_MASK)
+			   << SMI_CMD_DEV_ADDR_SIZE) |
+			   (reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	/* Wait for the read command to complete. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int mv88e6xxx_read_indirect(struct mv88e6xxx_dev *dev, int port, int reg)
+{
+	int ret;
+
+	ret = mv88e6xxx_write_register(dev,
+				       REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_22_READ |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_reg_wait_ready_indirect(dev);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6xxx_read_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA);
+}
+
+static int mv88e6xxx_write_indirect(struct mv88e6xxx_dev *dev, int port,
+				    int reg, unsigned short val)
+{
+	int ret;
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA, val);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_write_register(dev,
+				       REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_22_WRITE |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (reg & SMI_CMD_REG_ADDR_MASK));
+
+	return mv88e6xxx_reg_wait_ready_indirect(dev);
+}
+
+static int mv88e6xxx_read_phy_register(struct mv88e6xxx_dev *dev, int port,
+				       int page, int reg)
+{
+	int ret;
+
+	if (!dev)
+		return -ENODEV;
+
+	ret = mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, page);
+	if (ret >= 0)
+		/* read if page loaded successfully  */
+		ret = mv88e6xxx_read_indirect(dev, port, reg);
+	/* restore page 0  */
+	mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, 0x0);
+
+	return ret;
+}
+
+static int mv88e6xxx_write_phy_register(struct mv88e6xxx_dev *dev, int port,
+					int page, int reg, unsigned short val)
+{
+	int ret;
+
+	if (!dev) {
+		printf("Soho dev not initialized\n");
+		return -1;
+	}
+
+	ret = mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, page);
+	if (ret >= 0)
+		/* write if page loaded successfully  */
+		ret = mv88e6xxx_write_indirect(dev, port, reg, val);
+	/* restore page 0  */
+	mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, 0x0);
+
+	return ret;
+}
+
+static int mv88e6xxx_read_dev_register(struct mv88e6xxx_dev *dev, int port,
+				       int devic, int reg)
+{
+	int ret;
+
+	if (!dev)
+		return -ENODEV;
+
+	/* Write address. */
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA, reg);
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_45_WRITE_ADDR |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (devic & SMI_CMD_REG_ADDR_MASK));
+
+	/* Write read commdand.*/
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_45_READ_DATA |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (devic & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_reg_wait_ready_indirect(dev);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6xxx_read_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA);
+}
+
+static int mv88e6xxx_write_dev_register(struct mv88e6xxx_dev *dev, int port,
+					int devic, int reg, unsigned short val)
+{
+	int ret;
+
+	/* Write address. */
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2,
+				       GLOBAL2_SMI_DATA, reg);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_45_WRITE_ADDR |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (devic & SMI_CMD_REG_ADDR_MASK));
+
+	/* write data. */
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA, val);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+				       GLOBAL2_SMI_OP_45_WRITE_DATA |
+				       ((port & SMI_CMD_DEV_ADDR_MASK)
+				       << SMI_CMD_DEV_ADDR_SIZE) |
+				       (devic & SMI_CMD_REG_ADDR_MASK));
+
+	return mv88e6xxx_reg_wait_ready_indirect(dev);
+}
+
+static void mv88e6xxx_display_switch_info(struct mv88e6xxx_dev *dev)
+{
+	unsigned int product_num;
+
+	if (dev->id < 0) {
+		printf("No Switch Device Found\n");
+		return;
+	}
+
+	product_num = ((unsigned int)dev->id) >> 4;
+	if (product_num == PORT_SWITCH_ID_PROD_NUM_6390 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6390X ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6290 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6190 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6193) {
+		printf("Switch    : SOHO\n");
+		printf("Series    : Amethyst\n");
+		printf("Product # : %X\n", product_num);
+		printf("Revision  : %X\n", dev->id & 0xf);
+	} else if (product_num == PORT_SWITCH_ID_PROD_NUM_6141 ||
+		   product_num == PORT_SWITCH_ID_PROD_NUM_6341) {
+		printf("Switch    : SOHO\n");
+		printf("Series    : Topaz\n");
+		printf("Product # : %X\n", product_num);
+		printf("Revision  : %X\n", dev->id & 0xf);
+	} else {
+		printf("Unknown switch with Device ID: 0x%X\n", dev->id);
+	}
+}
+
+/* We expect the switch to perform auto negotiation if there is a real phy. */
+static int mv88e6xxx_get_link_status(struct mv88e6xxx_dev *dev, int port)
+{
+int ret;
+
+	ret = mv88e6xxx_read_register(dev, REG_PORT(port), PORT_STATUS);
+	if (ret < 0)
+		return ret;
+
+	printf("Port: 0x%X, ", port);
+	if (ret & PORT_STATUS_LINK) {
+		printf("Link: UP, ");
+	} else {
+		printf("Link: Down\n");
+		return 0;
+	}
+
+	if (ret & PORT_STATUS_DUPLEX)
+		printf("Duplex: FULL, ");
+	else
+		printf("Duplex: HALF, ");
+
+	if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_10) {
+		printf("Speed: 10 Mbps\n");
+	} else if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_100) {
+		if (ret & PORT_STATUS_HD_FLOW)
+			printf("Speed: 200 Mbps\n");
+		else
+			printf("Speed: 100 Mbps\n");
+	} else if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_1000) {
+		if (ret & PORT_STATUS_HD_FLOW)
+			printf("Speed: 2500 Mbps\n");
+		else
+			printf("Speed: 1000 Mbps\n");
+	} else if ((ret & PORT_STATUS_SPEED_MASK) ==
+		 PORT_STATUS_SPEED_2500_10G) {
+		if (ret & PORT_STATUS_HD_FLOW)
+			printf("Speed: 5 Gbps\n");
+		else
+			printf("Speed: 10 Gbps\n");
+	} else {
+		printf("Speed: Unknown\n");
+	}
+
+	return 0;
+}
+
+static int mv88e6xxx_get_switch_id(struct mv88e6xxx_dev *dev)
+{
+	int id, product_num;
+
+	/* Peridot switch port device address starts from 0
+	 * Legacy switch port device address starts from 0x10
+	 *
+	 * In order to determine which switch is used, we need to
+	 * read the ID, but inorder to read the ID, we need to know
+	 * the port device address - classic chicken or the egg case.
+	 *
+	 * Let's read with both port device addresses, if we get 0xFFFF,
+	 * the address is incorrect and we need to ready with the second
+	 * address.
+	 */
+	id = mv88e6xxx_read_register(dev, REG_PORT_BASE_LEGACY,
+				     PORT_SWITCH_ID);
+	if (id == 0xFFFF)
+		id = mv88e6xxx_read_register(dev, REG_PORT_BASE_PERIDOT,
+					     PORT_SWITCH_ID);
+
+	if (id < 0)
+		return id;
+
+	product_num = id >> 4;
+	if (product_num == PORT_SWITCH_ID_PROD_NUM_6190 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6193 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6290 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6390 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6390X) {
+		/* Peridot switch port device address starts from 0 */
+		REG_PORT_BASE = REG_PORT_BASE_PERIDOT;
+		return id;
+	} else if (product_num == PORT_SWITCH_ID_PROD_NUM_6141 ||
+		   product_num == PORT_SWITCH_ID_PROD_NUM_6341) {
+		/* Legacy switch port device address starts from 0x10 */
+		REG_PORT_BASE = REG_PORT_BASE_LEGACY;
+		return id;
+	}
+	printf("Unknown product_num:0x%X\n", product_num);
+	return -ENODEV;
+}
+
+static int sw_resolve_options(char *str)
+{
+	if (strcmp(str, "info") == 0)
+		return SW_INFO;
+	else if (strcmp(str, "read") == 0)
+		return SW_READ;
+	else if (strcmp(str, "write") == 0)
+		return SW_WRITE;
+	else if (strcmp(str, "phy_read") == 0)
+		return SW_PHY_READ;
+	else if (strcmp(str, "phy_write") == 0)
+		return SW_PHY_WRITE;
+	else if (strcmp(str, "dev_read") == 0)
+		return SW_DEV_READ;
+	else if (strcmp(str, "dev_write") == 0)
+		return SW_DEV_WRITE;
+	else if (strcmp(str, "link") == 0)
+		return SW_LINK;
+	else
+		return SW_NA;
+}
+
+static int do_sw(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	struct mv88e6xxx_dev *dev;
+	int port, reg, page, val = 0, ret = 0;
+
+	if (argc < 3)
+		return CMD_RET_USAGE;
+
+	soho_dev.phy_addr = (int)simple_strtoul(argv[1], NULL, 16);
+
+	if (soho_dev.phy_addr == 0)
+		soho_dev.addr_mode = 0;  /* Single Addressing mode */
+	else
+		soho_dev.addr_mode = 1;  /* Multi Addressing mode */
+
+	soho_dev.id = mv88e6xxx_get_switch_id(&soho_dev);
+
+	soho_dev_handle = &soho_dev;
+	dev = soho_dev_handle;
+
+	if (soho_dev.id < 0) {
+		printf("Switch Device not found\n");
+		return -ENODEV;
+	}
+
+	switch (sw_resolve_options(argv[2])) {
+	case SW_INFO:
+		mv88e6xxx_display_switch_info(dev);
+		break;
+	case SW_READ:
+		if (argc < 5) {
+			printf("Syntax Error: switch read <port> <reg>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[3], NULL, 16);
+		reg  = (int)simple_strtoul(argv[4], NULL, 16);
+		ret = mv88e6xxx_read_register(dev, REG_PORT(port), reg);
+		if (ret < 0) {
+			printf("Failed: Read  - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, ret: %d\n", reg, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X\n", reg, ret);
+		}
+		break;
+
+	case SW_WRITE:
+		if (argc < 6) {
+			printf("Syntax Error: ");
+			printf("switch write <port> <reg> <val>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[3], NULL, 16);
+		reg  = (int)simple_strtoul(argv[4], NULL, 16);
+		val  = (int)simple_strtoul(argv[5], NULL, 16);
+		ret = mv88e6xxx_write_register(dev, REG_PORT(port), reg,
+					       (unsigned short)val);
+		if (ret < 0) {
+			printf("Failed: Write - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X, ret: %d\n",
+			       reg, val, ret);
+		} else {
+			printf("Read  - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X\n",
+			       reg, val);
+		}
+		break;
+
+	case SW_PHY_READ:
+		if (argc < 6) {
+			printf("Syntax Error: ");
+			printf("switch phy_read <port> <page> <reg>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[3], NULL, 16);
+		page = (int)simple_strtoul(argv[4], NULL, 16);
+		reg  = (int)simple_strtoul(argv[5], NULL, 16);
+		ret = mv88e6xxx_read_phy_register(dev, REG_PORT(port),
+						  page, reg);
+		if (ret < 0) {
+			printf("Failed: Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X\n, ret: %d",
+			       page, reg, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, ret);
+		}
+		break;
+
+	case SW_PHY_WRITE:
+		if (argc < 7) {
+			printf("Syntax Error: ");
+			printf("switch phy_write <port> <page> <reg> <val>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[3], NULL, 16);
+		page = (int)simple_strtoul(argv[4], NULL, 16);
+		reg  = (int)simple_strtoul(argv[5], NULL, 16);
+		val  = (int)simple_strtoul(argv[6], NULL, 16);
+		ret = mv88e6xxx_write_phy_register(dev, REG_PORT(port),
+						   page, reg,
+						   (unsigned short)val);
+		if (ret < 0) {
+			printf("Failed: Write - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X, ret: %d\n",
+			       page, reg, val, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, val);
+		}
+		break;
+
+	case SW_DEV_READ:
+		if (argc < 6) {
+			printf("Syntax Error: ");
+			printf("mvswitch <mii_add> dev_read  ");
+			printf("<port> <dev> <reg>\n");
+			return 1;
+		}
+		port = (int)strtoul(argv[3], NULL, 16);
+		page = (int)strtoul(argv[4], NULL, 16);
+		reg  = (int)strtoul(argv[5], NULL, 16);
+		ret = mv88e6xxx_read_dev_register(dev, REG_PORT(port),
+						  page, reg);
+		if (ret < 0) {
+			printf("Failed: Read - switch port: 0x%X, ", port);
+			printf("dev: 0x%X, reg: 0x%X\n, ret: %d",
+			       page, reg, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("dev: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, ret);
+		}
+		break;
+
+	case SW_DEV_WRITE:
+		if (argc < 7) {
+			printf("Syntax Error: ");
+			printf("mvswitch <mii_add> dev_write ");
+			printf("<port> <dev> <reg> <val>\n");
+			return 1;
+		}
+		port = (int)strtoul(argv[3], NULL, 16);
+		page = (int)strtoul(argv[4], NULL, 16);
+		reg  = (int)strtoul(argv[5], NULL, 16);
+		val  = (int)strtoul(argv[6], NULL, 16);
+		ret = mv88e6xxx_write_dev_register(dev, REG_PORT(port),
+						   page, reg,
+						   (unsigned short)val);
+		if (ret < 0) {
+			printf("Failed: Write - switch port: 0x%X, ", port);
+			printf("dev: 0x%X, reg: 0x%X, val: 0x%X, ret: %d\n",
+			       page, reg, val, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("dev: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, val);
+		}
+		break;
+
+	case SW_LINK:
+		if (argc < 4) {
+			printf("Error: Too few arguments\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[3], NULL, 16);
+		ret = mv88e6xxx_get_link_status(dev, port);
+		break;
+
+	case SW_NA:
+		printf("\"switch %s\" - Wrong command. Try \"help switch\"\n",
+		       argv[1]);
+
+	default:
+		return CMD_RET_USAGE;
+	}
+	return 0;
+}
+
+/***************************************************/
+U_BOOT_CMD(
+	mvswitch,	7,	1,	do_sw,
+	"MV88e6xxx Switch Access commands",
+	"mvswitch <mii_add> info  - Display switch information\n"
+	"mvswitch <mii_add> read   <port> <reg>       - read switch register <reg> of a <port>\n"
+	"mvswitch <mii_add> write  <port> <reg> <val> - write <val> to switch register <reg> of a <port>\n"
+	"mvswitch <mii_add> phy_read  <port> <page> <reg>         - read internal switch phy register <reg> at <page> of a switch <port>\n"
+	"mvswitch <mii_add> phy_write <port> <page> <reg> <val>   - write <val> to internal phy register at <page> of a <port>\n"
+	"mvswitch <mii_add> dev_read  <port> <device> <reg>       - read internal switch dev register <reg> at <dev> of a switch <port>\n"
+	"mvswitch <mii_add> dev_write <port> <device> <reg> <val> - write <val> to internal dev register at <dev> of a <port>\n"
+	"mvswitch <mii_add> link  <port> - Display link state and speed of a <port>\n"
+);
diff --git a/cmd/mvebu/mv88e6xxx-util.h b/cmd/mvebu/mv88e6xxx-util.h
new file mode 100644
index 0000000000..0065b0e73f
--- /dev/null
+++ b/cmd/mvebu/mv88e6xxx-util.h
@@ -0,0 +1,398 @@
+/* SPDX-License-Identifier: GPL-2.0+
+ *
+ * Copyright (C) 2020 Marvell International Ltd.
+ *
+ */
+
+#ifndef _MV88E6XXX_UTIL_H__
+#define _MV88E6XXX_UTIL_H__
+
+#include <asm/io.h>
+#include <command.h>
+#include <common.h>
+#include <config.h>
+#include <config/arch/mvebu.h>
+#include <fdtdec.h>
+#include <fdt.h>
+#include <linux/compat.h>
+#include <linux/mbus.h>
+#include <malloc.h>
+#include <miiphy.h>
+#include <net.h>
+#include <netdev.h>
+#include <pci.h>
+#include <phy.h>
+#include <watchdog.h>
+
+#define SMI_CMD					0x00
+#define SMI_CMD_BUSY				BIT(15)
+#define SMI_CMD_CLAUSE_22			BIT(12)
+#define SMI_CMD_OP_22_WRITE			\
+			((1 << 10) | SMI_CMD_BUSY | SMI_CMD_CLAUSE_22)
+#define SMI_CMD_OP_22_READ			\
+			((2 << 10) | SMI_CMD_BUSY | SMI_CMD_CLAUSE_22)
+#define SMI_CMD_OP_45_WRITE_ADDR		((0 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_WRITE_DATA		((1 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_READ_DATA			((2 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_READ_DATA_INC		((3 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_DEV_ADDR_MASK			0x1f
+#define SMI_CMD_DEV_ADDR_SIZE			5
+#define SMI_CMD_REG_ADDR_MASK			0x1f
+#define SMI_DATA				0x01
+
+#define SMI_PHY_PAGE_REG			0x16
+
+/* Fiber/SERDES Registers are located at SMI address F, page 1 */
+#define REG_FIBER_SERDES			0x0f
+#define PAGE_FIBER_SERDES			0x01
+
+#define REG_PORT_BASE_UNDEFINED			0xFFFF
+#define REG_PORT_BASE_LEGACY			0x10
+#define REG_PORT_BASE_PERIDOT			0
+#define REG_PORT(p)				(REG_PORT_BASE + (p))
+#define PORT_STATUS				0x00
+#define PORT_STATUS_PAUSE_EN			BIT(15)
+#define PORT_STATUS_MY_PAUSE			BIT(14)
+#define PORT_STATUS_HD_FLOW			BIT(13)
+#define PORT_STATUS_PHY_DETECT			BIT(12)
+#define PORT_STATUS_LINK			BIT(11)
+#define PORT_STATUS_DUPLEX			BIT(10)
+#define PORT_STATUS_SPEED_MASK			0x0300
+#define PORT_STATUS_SPEED_10			0x0000
+#define PORT_STATUS_SPEED_100			0x0100
+#define PORT_STATUS_SPEED_1000			0x0200
+#define PORT_STATUS_SPEED_2500_10G		0x0300
+#define PORT_STATUS_EEE				BIT(6) /* 6352 */
+#define PORT_STATUS_AM_DIS			BIT(6) /* 6165 */
+#define PORT_STATUS_MGMII			BIT(6) /* 6185 */
+#define PORT_STATUS_TX_PAUSED			BIT(5)
+#define PORT_STATUS_FLOW_CTRL			BIT(4)
+#define PORT_STATUS_CMODE_MASK			0x0f
+#define PORT_STATUS_CMODE_100BASE_X		0x8
+#define PORT_STATUS_CMODE_1000BASE_X		0x9
+#define PORT_STATUS_CMODE_SGMII			0xa
+#define PORT_STATUS_CMODE_2500BASE_X		0xb
+#define PORT_PCS_CTRL				0x01
+#define PORT_PCS_CTRL_RGMII_DELAY_RXCLK		BIT(15)
+#define PORT_PCS_CTRL_RGMII_DELAY_TXCLK		BIT(14)
+#define PORT_PCS_CTRL_FORCE_SPEED		BIT(13)
+
+#define PORT_PCS_CTRL_FC				BIT(7)
+#define PORT_PCS_CTRL_FORCE_FC			BIT(6)
+#define PORT_PCS_CTRL_LINK_UP			BIT(5)
+#define PORT_PCS_CTRL_FORCE_LINK		BIT(4)
+#define PORT_PCS_CTRL_DUPLEX_FULL		BIT(3)
+#define PORT_PCS_CTRL_FORCE_DUPLEX		BIT(2)
+#define PORT_PCS_CTRL_10			0x00
+#define PORT_PCS_CTRL_100			0x01
+#define PORT_PCS_CTRL_1000			0x02
+#define PORT_PCS_CTRL_UNFORCED		0x03
+
+#define PORT_PAUSE_CTRL				0x02
+#define PORT_SWITCH_ID				0x03
+
+#define PORT_SWITCH_ID_PROD_NUM_6190		0x190
+#define PORT_SWITCH_ID_PROD_NUM_6193		0x193
+#define PORT_SWITCH_ID_PROD_NUM_6290		0x290
+#define PORT_SWITCH_ID_PROD_NUM_6390		0x390
+#define PORT_SWITCH_ID_PROD_NUM_6390X		0x0a1
+#define PORT_SWITCH_ID_PROD_NUM_6141		0x141
+#define PORT_SWITCH_ID_PROD_NUM_6341		0x341
+
+#define PORT_CONTROL				0x04
+#define PORT_CONTROL_USE_CORE_TAG		BIT(15)
+#define PORT_CONTROL_DROP_ON_LOCK		BIT(14)
+#define PORT_CONTROL_EGRESS_UNMODIFIED		(0x0 << 12)
+#define PORT_CONTROL_EGRESS_UNTAGGED		(0x1 << 12)
+#define PORT_CONTROL_EGRESS_TAGGED		(0x2 << 12)
+#define PORT_CONTROL_EGRESS_ADD_TAG		(0x3 << 12)
+#define PORT_CONTROL_HEADER			BIT(11)
+#define PORT_CONTROL_IGMP_MLD_SNOOP		BIT(10)
+#define PORT_CONTROL_DOUBLE_TAG			BIT(9)
+#define PORT_CONTROL_FRAME_MODE_NORMAL		(0x0 << 8)
+#define PORT_CONTROL_FRAME_MODE_DSA		(0x1 << 8)
+#define PORT_CONTROL_FRAME_MODE_PROVIDER	(0x2 << 8)
+#define PORT_CONTROL_FRAME_ETHER_TYPE_DSA	(0x3 << 8)
+#define PORT_CONTROL_DSA_TAG			BIT(8)
+#define PORT_CONTROL_VLAN_TUNNEL		BIT(7)
+#define PORT_CONTROL_TAG_IF_BOTH		BIT(6)
+#define PORT_CONTROL_USE_IP			BIT(5)
+#define PORT_CONTROL_USE_TAG			BIT(4)
+#define PORT_CONTROL_FORWARD_UNKNOWN_MC		BIT(3)
+#define PORT_CONTROL_FORWARD_UNKNOWN		BIT(2)
+#define PORT_CONTROL_STATE_MASK			0x03
+#define PORT_CONTROL_STATE_DISABLED		0x00
+#define PORT_CONTROL_STATE_BLOCKING		0x01
+#define PORT_CONTROL_STATE_LEARNING		0x02
+#define PORT_CONTROL_STATE_FORWARDING		0x03
+#define PORT_CONTROL_1				0x05
+#define PORT_CONTROL_1_FID_11_4_MASK		(0xff << 0)
+#define PORT_BASE_VLAN				0x06
+#define PORT_BASE_VLAN_FID_3_0_MASK		(0xf << 12)
+#define PORT_DEFAULT_VLAN			0x07
+#define PORT_DEFAULT_VLAN_MASK			0xfff
+#define PORT_CONTROL_2				0x08
+#define PORT_CONTROL_2_IGNORE_FCS		BIT(15)
+#define PORT_CONTROL_2_VTU_PRI_OVERRIDE		BIT(14)
+#define PORT_CONTROL_2_SA_PRIO_OVERRIDE		BIT(13)
+#define PORT_CONTROL_2_DA_PRIO_OVERRIDE		BIT(12)
+#define PORT_CONTROL_2_JUMBO_1522		(0x00 << 12)
+#define PORT_CONTROL_2_JUMBO_2048		(0x01 << 12)
+#define PORT_CONTROL_2_JUMBO_10240		(0x02 << 12)
+#define PORT_CONTROL_2_8021Q_MASK		(0x03 << 10)
+#define PORT_CONTROL_2_8021Q_DISABLED		(0x00 << 10)
+#define PORT_CONTROL_2_8021Q_FALLBACK		(0x01 << 10)
+#define PORT_CONTROL_2_8021Q_CHECK		(0x02 << 10)
+#define PORT_CONTROL_2_8021Q_SECURE		(0x03 << 10)
+#define PORT_CONTROL_2_DISCARD_TAGGED		BIT(9)
+#define PORT_CONTROL_2_DISCARD_UNTAGGED		BIT(8)
+#define PORT_CONTROL_2_MAP_DA			BIT(7)
+#define PORT_CONTROL_2_DEFAULT_FORWARD		BIT(6)
+#define PORT_CONTROL_2_FORWARD_UNKNOWN		BIT(6)
+#define PORT_CONTROL_2_EGRESS_MONITOR		BIT(5)
+#define PORT_CONTROL_2_INGRESS_MONITOR		BIT(4)
+#define PORT_RATE_CONTROL			0x09
+#define PORT_RATE_CONTROL_2			0x0a
+#define PORT_ASSOC_VECTOR			0x0b
+#define PORT_ASSOC_VECTOR_HOLD_AT_1		BIT(15)
+#define PORT_ASSOC_VECTOR_INT_AGE_OUT		BIT(14)
+#define PORT_ASSOC_VECTOR_LOCKED_PORT		BIT(13)
+#define PORT_ASSOC_VECTOR_IGNORE_WRONG		BIT(12)
+#define PORT_ASSOC_VECTOR_REFRESH_LOCKED	BIT(11)
+#define PORT_ATU_CONTROL			0x0c
+#define PORT_PRI_OVERRIDE			0x0d
+#define PORT_ETH_TYPE				0x0f
+#define PORT_IN_DISCARD_LO			0x10
+#define PORT_IN_DISCARD_HI			0x11
+#define PORT_IN_FILTERED			0x12
+#define PORT_OUT_FILTERED			0x13
+#define PORT_TAG_REGMAP_0123			0x18
+#define PORT_TAG_REGMAP_4567			0x19
+
+#define REG_GLOBAL				0x1b
+#define GLOBAL_STATUS				0x00
+#define GLOBAL_STATUS_PPU_STATE			BIT(15) /* 6351 and 6171 */
+/* Two bits for 6165, 6185 etc */
+#define GLOBAL_STATUS_PPU_MASK			(0x3 << 14)
+#define GLOBAL_STATUS_PPU_DISABLED_RST		(0x0 << 14)
+#define GLOBAL_STATUS_PPU_INITIALIZING		(0x1 << 14)
+#define GLOBAL_STATUS_PPU_DISABLED		(0x2 << 14)
+#define GLOBAL_STATUS_PPU_POLLING		(0x3 << 14)
+#define GLOBAL_MAC_01				0x01
+#define GLOBAL_MAC_23				0x02
+#define GLOBAL_MAC_45				0x03
+#define GLOBAL_ATU_FID				0x01 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_FID				0x02 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_FID_MASK			0xfff
+#define GLOBAL_VTU_SID				0x03 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_SID_MASK			0x3f
+#define GLOBAL_CONTROL				0x04
+#define GLOBAL_CONTROL_SW_RESET			BIT(15)
+#define GLOBAL_CONTROL_PPU_ENABLE		BIT(14)
+#define GLOBAL_CONTROL_DISCARD_EXCESS		BIT(13) /* 6352 */
+#define GLOBAL_CONTROL_SCHED_PRIO		BIT(11) /* 6152 */
+#define GLOBAL_CONTROL_MAX_FRAME_1632		BIT(10) /* 6152 */
+#define GLOBAL_CONTROL_RELOAD_EEPROM		BIT(9)	/* 6152 */
+#define GLOBAL_CONTROL_DEVICE_EN		BIT(7)
+#define GLOBAL_CONTROL_STATS_DONE_EN		BIT(6)
+#define GLOBAL_CONTROL_VTU_PROBLEM_EN		BIT(5)
+#define GLOBAL_CONTROL_VTU_DONE_EN		BIT(4)
+#define GLOBAL_CONTROL_ATU_PROBLEM_EN		BIT(3)
+#define GLOBAL_CONTROL_ATU_DONE_EN		BIT(2)
+#define GLOBAL_CONTROL_TCAM_EN			BIT(1)
+#define GLOBAL_CONTROL_EEPROM_DONE_EN		BIT(0)
+#define GLOBAL_VTU_OP				0x05
+#define GLOBAL_VTU_OP_BUSY			BIT(15)
+#define GLOBAL_VTU_OP_FLUSH_ALL			\
+					((0x01 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_VTU_LOAD_PURGE		\
+					((0x03 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_VTU_GET_NEXT		\
+					((0x04 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_STU_LOAD_PURGE		\
+					((0x05 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_STU_GET_NEXT		\
+					((0x06 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_VID				0x06
+#define GLOBAL_VTU_VID_MASK			0xfff
+#define GLOBAL_VTU_VID_VALID			BIT(12)
+#define GLOBAL_VTU_DATA_0_3			0x07
+#define GLOBAL_VTU_DATA_4_7			0x08
+#define GLOBAL_VTU_DATA_8_11			0x09
+#define GLOBAL_VTU_STU_DATA_MASK		0x03
+#define GLOBAL_VTU_DATA_MEMBER_TAG_UNMODIFIED	0x00
+#define GLOBAL_VTU_DATA_MEMBER_TAG_UNTAGGED	0x01
+#define GLOBAL_VTU_DATA_MEMBER_TAG_TAGGED	0x02
+#define GLOBAL_VTU_DATA_MEMBER_TAG_NON_MEMBER	0x03
+#define GLOBAL_STU_DATA_PORT_STATE_DISABLED	0x00
+#define GLOBAL_STU_DATA_PORT_STATE_BLOCKING	0x01
+#define GLOBAL_STU_DATA_PORT_STATE_LEARNING	0x02
+#define GLOBAL_STU_DATA_PORT_STATE_FORWARDING	0x03
+#define GLOBAL_ATU_CONTROL			0x0a
+#define GLOBAL_ATU_CONTROL_LEARN2ALL		BIT(3)
+#define GLOBAL_ATU_OP				0x0b
+#define GLOBAL_ATU_OP_BUSY			BIT(15)
+#define GLOBAL_ATU_OP_NOP			(0 << 12)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_ALL		\
+					((1 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC	\
+					((2 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_LOAD_DB			\
+					((3 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_NEXT_DB		\
+					((4 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_ALL_DB		\
+					((5 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC_DB	\
+					((6 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_CLR_VIOLATION		\
+					((7 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_DATA				0x0c
+#define GLOBAL_ATU_DATA_TRUNK			BIT(15)
+#define GLOBAL_ATU_DATA_TRUNK_ID_MASK		0x00f0
+#define GLOBAL_ATU_DATA_TRUNK_ID_SHIFT		4
+#define GLOBAL_ATU_DATA_PORT_VECTOR_MASK	0x3ff0
+#define GLOBAL_ATU_DATA_PORT_VECTOR_SHIFT	4
+#define GLOBAL_ATU_DATA_STATE_MASK		0x0f
+#define GLOBAL_ATU_DATA_STATE_UNUSED		0x00
+#define GLOBAL_ATU_DATA_STATE_UC_MGMT		0x0d
+#define GLOBAL_ATU_DATA_STATE_UC_STATIC		0x0e
+#define GLOBAL_ATU_DATA_STATE_UC_PRIO_OVER	0x0f
+#define GLOBAL_ATU_DATA_STATE_MC_NONE_RATE	0x05
+#define GLOBAL_ATU_DATA_STATE_MC_STATIC		0x07
+#define GLOBAL_ATU_DATA_STATE_MC_MGMT		0x0e
+#define GLOBAL_ATU_DATA_STATE_MC_PRIO_OVER	0x0f
+#define GLOBAL_ATU_MAC_01			0x0d
+#define GLOBAL_ATU_MAC_23			0x0e
+#define GLOBAL_ATU_MAC_45			0x0f
+#define GLOBAL_IP_PRI_0				0x10
+#define GLOBAL_IP_PRI_1				0x11
+#define GLOBAL_IP_PRI_2				0x12
+#define GLOBAL_IP_PRI_3				0x13
+#define GLOBAL_IP_PRI_4				0x14
+#define GLOBAL_IP_PRI_5				0x15
+#define GLOBAL_IP_PRI_6				0x16
+#define GLOBAL_IP_PRI_7				0x17
+#define GLOBAL_IEEE_PRI				0x18
+#define GLOBAL_CORE_TAG_TYPE			0x19
+#define GLOBAL_MONITOR_CONTROL			0x1a
+#define GLOBAL_MONITOR_CONTROL_INGRESS_SHIFT	12
+#define GLOBAL_MONITOR_CONTROL_EGRESS_SHIFT	8
+#define GLOBAL_MONITOR_CONTROL_ARP_SHIFT	4
+#define GLOBAL_MONITOR_CONTROL_MIRROR_SHIFT	0
+#define GLOBAL_MONITOR_CONTROL_ARP_DISABLED	(0xf0)
+#define GLOBAL_CONTROL_2			0x1c
+#define GLOBAL_CONTROL_2_NO_CASCADE		0xe000
+#define GLOBAL_CONTROL_2_MULTIPLE_CASCADE	0xf000
+
+#define GLOBAL_STATS_OP			0x1d
+#define GLOBAL_STATS_OP_BUSY		BIT(15)
+#define GLOBAL_STATS_OP_NOP		(0 << 12)
+#define GLOBAL_STATS_OP_FLUSH_ALL	((1 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_FLUSH_PORT	((2 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_READ_CAPTURED	((4 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_CAPTURE_PORT	((5 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_RX		((1 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_TX		((2 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_RX_TX	((3 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_BANK_1		BIT(9)
+#define GLOBAL_STATS_COUNTER_32		0x1e
+#define GLOBAL_STATS_COUNTER_01		0x1f
+
+#define REG_GLOBAL2				0x1c
+#define GLOBAL2_INT_SOURCE			0x00
+#define GLOBAL2_INT_MASK			0x01
+#define GLOBAL2_MGMT_EN_2X			0x02
+#define GLOBAL2_MGMT_EN_0X			0x03
+#define GLOBAL2_FLOW_CONTROL			0x04
+#define GLOBAL2_SWITCH_MGMT			0x05
+#define GLOBAL2_SWITCH_MGMT_USE_DOUBLE_TAG_DATA	BIT(15)
+#define GLOBAL2_SWITCH_MGMT_PREVENT_LOOPS	BIT(14)
+#define GLOBAL2_SWITCH_MGMT_FLOW_CONTROL_MSG	BIT(13)
+#define GLOBAL2_SWITCH_MGMT_FORCE_FLOW_CTRL_PRI	BIT(7)
+#define GLOBAL2_SWITCH_MGMT_RSVD2CPU		BIT(3)
+#define GLOBAL2_DEVICE_MAPPING			0x06
+#define GLOBAL2_DEVICE_MAPPING_UPDATE		BIT(15)
+#define GLOBAL2_DEVICE_MAPPING_TARGET_SHIFT	8
+#define GLOBAL2_DEVICE_MAPPING_PORT_MASK	0x0f
+#define GLOBAL2_TRUNK_MASK			0x07
+#define GLOBAL2_TRUNK_MASK_UPDATE		BIT(15)
+#define GLOBAL2_TRUNK_MASK_NUM_SHIFT		12
+#define GLOBAL2_TRUNK_MAPPING			0x08
+#define GLOBAL2_TRUNK_MAPPING_UPDATE		BIT(15)
+#define GLOBAL2_TRUNK_MAPPING_ID_SHIFT		11
+#define GLOBAL2_INGRESS_OP			0x09
+#define GLOBAL2_INGRESS_DATA			0x0a
+#define GLOBAL2_PVT_ADDR			0x0b
+#define GLOBAL2_PVT_DATA			0x0c
+#define GLOBAL2_SWITCH_MAC			0x0d
+#define GLOBAL2_SWITCH_MAC_BUSY			BIT(15)
+#define GLOBAL2_ATU_STATS			0x0e
+#define GLOBAL2_PRIO_OVERRIDE			0x0f
+#define GLOBAL2_PRIO_OVERRIDE_FORCE_SNOOP	BIT(7)
+#define GLOBAL2_PRIO_OVERRIDE_SNOOP_SHIFT	4
+#define GLOBAL2_PRIO_OVERRIDE_FORCE_ARP		BIT(3)
+#define GLOBAL2_PRIO_OVERRIDE_ARP_SHIFT		0
+#define GLOBAL2_EEPROM_OP			0x14
+#define GLOBAL2_EEPROM_OP_BUSY			BIT(15)
+#define GLOBAL2_EEPROM_OP_WRITE			\
+		((3 << 12) | GLOBAL2_EEPROM_OP_BUSY)
+#define GLOBAL2_EEPROM_OP_READ			\
+		((4 << 12) | GLOBAL2_EEPROM_OP_BUSY)
+#define GLOBAL2_EEPROM_OP_LOAD			BIT(11)
+#define GLOBAL2_EEPROM_OP_WRITE_EN		BIT(10)
+#define GLOBAL2_EEPROM_OP_ADDR_MASK		0xff
+#define GLOBAL2_EEPROM_DATA			0x15
+#define GLOBAL2_PTP_AVB_OP			0x16
+#define GLOBAL2_PTP_AVB_DATA			0x17
+#define GLOBAL2_SMI_OP				0x18
+#define GLOBAL2_SMI_OP_BUSY			BIT(15)
+#define GLOBAL2_SMI_OP_CLAUSE_22		BIT(12)
+#define GLOBAL2_SMI_OP_22_WRITE			\
+		((1 << 10) | GLOBAL2_SMI_OP_BUSY | GLOBAL2_SMI_OP_CLAUSE_22)
+#define GLOBAL2_SMI_OP_22_READ			\
+		((2 << 10) | GLOBAL2_SMI_OP_BUSY | GLOBAL2_SMI_OP_CLAUSE_22)
+#define GLOBAL2_SMI_OP_45_WRITE_ADDR		\
+		((0 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_OP_45_WRITE_DATA		\
+		((1 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_OP_45_READ_DATA		\
+		((2 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_DATA			0x19
+#define GLOBAL2_SCRATCH_MISC			0x1a
+#define GLOBAL2_SCRATCH_BUSY			BIT(15)
+#define GLOBAL2_SCRATCH_REGISTER_SHIFT		8
+#define GLOBAL2_SCRATCH_VALUE_MASK		0xff
+#define GLOBAL2_WDOG_CONTROL			0x1b
+#define GLOBAL2_QOS_WEIGHT			0x1c
+#define GLOBAL2_MISC				0x1d
+
+#define PHY_COPPER_CONTROL		0x0
+#define PHY_COPPER_CONTROL_SPEED_1G	BIT(6)
+#define PHY_COPPER_CONTROL_DUPLEX	BIT(8)
+#define PHY_COPPER_CONTROL_POWER_DOWN	BIT(11)
+#define PHY_COPPER_CONTROL_AUTO_NEG_EN	BIT(12)
+#define PHY_COPPER_CONTROL_SPEED_100M	BIT(13)
+
+struct mv88e6xxx_dev {
+	unsigned int phy_addr;
+	unsigned int port_mask;
+	unsigned int addr_mode;
+	int id;
+	int cpu_port;	/* The switch port to which the CPU is attached */
+};
+
+enum sw_opts {
+	SW_INFO,
+	SW_READ,
+	SW_WRITE,
+	SW_PHY_READ,
+	SW_PHY_WRITE,
+	SW_DEV_READ,
+	SW_DEV_WRITE,
+	SW_LINK,
+	SW_NA
+};
+
+#endif /* _MV88E6XXX_H__*/
+
-- 
2.29.0

