From 40a84c59f1c5db617fd27389b5042290739c747c Mon Sep 17 00:00:00 2001
From: Aaron Williams <aaron.williams@cavium.com>
Date: Wed, 18 Jul 2018 23:27:00 -0700
Subject: [PATCH 0784/1239] fs: ext4: Disable invalid assert and add support
 for alternative checksum

Signed-off-by: Aaron Williams <aaron.williams@cavium.com>
---
 fs/ext4/ext4_common.c | 29 ++++++++++++++++++++++++++---
 include/ext4fs.h      |  3 +++
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/fs/ext4/ext4_common.c b/fs/ext4/ext4_common.c
index 5bf78b530a..a7add7dec8 100644
--- a/fs/ext4/ext4_common.c
+++ b/fs/ext4/ext4_common.c
@@ -26,6 +26,7 @@
 #include <stddef.h>
 #include <linux/stat.h>
 #include <linux/time.h>
+#include <u-boot/crc.h>
 #include <asm/byteorder.h>
 #include "ext4_common.h"
 
@@ -413,27 +414,48 @@ void ext4fs_reset_inode_bmap(int inode_no, unsigned char *buffer, int index)
 		*ptr = *ptr & ~(operand);
 }
 
+static inline uint32_t ext4_chksum(uint32_t crc, const void *address,
+				   uint32_t length)
+{
+	return crc32(crc, address, length);
+}
+
 uint16_t ext4fs_checksum_update(uint32_t i)
 {
 	struct ext2_block_group *desc;
 	struct ext_filesystem *fs = get_fs();
 	uint16_t crc = 0;
 	__le32 le32_i = cpu_to_le32(i);
+	int offset = offsetof(struct ext2_block_group, bg_checksum);
 
 	desc = ext4fs_get_group_descriptor(fs, i);
 	if (le32_to_cpu(fs->sb->feature_ro_compat) & EXT4_FEATURE_RO_COMPAT_GDT_CSUM) {
-		int offset = offsetof(struct ext2_block_group, bg_checksum);
 
 		crc = ext2fs_crc16(~0, fs->sb->unique_id,
 				   sizeof(fs->sb->unique_id));
 		crc = ext2fs_crc16(crc, &le32_i, sizeof(le32_i));
 		crc = ext2fs_crc16(crc, desc, offset);
 		offset += sizeof(desc->bg_checksum);	/* skip checksum */
-		assert(offset == sizeof(*desc));
+		/*assert(offset == sizeof(*desc));*/
 		if (offset < fs->gdsize) {
 			crc = ext2fs_crc16(crc, (__u8 *)desc + offset,
 					   fs->gdsize - offset);
 		}
+	} else if (le32_to_cpu(fs->sb->feature_ro_compat) &
+		   EXT4_FEATURE_RO_COMPAT_METADATA_CSUM) {
+		uint32_t crc32;
+		uint16_t dummy_csum = 0;
+
+		crc32 = ext4_chksum(~0, fs->sb->unique_id,
+				    sizeof(fs->sb->unique_id));
+		crc32 = ext4_chksum(crc32, &le32_i, sizeof(le32_i));
+		crc32 = ext4_chksum(crc32, desc, offset);
+		offset += sizeof(dummy_csum);
+		crc32 = ext4_chksum(crc32, &dummy_csum, sizeof(dummy_csum));
+		if (offset < fs->gdsize)
+			crc32 = ext4_chksum(crc32, (uint8_t *)desc + offset,
+					    fs->gdsize - offset);
+		crc = crc32 & 0xffff;
 	}
 
 	return crc;
@@ -763,7 +785,8 @@ int ext4fs_get_parent_inode_num(const char *dirname, char *dname, int flags)
 	struct ext2_inode temp_inode;
 
 	if (*dirname != '/') {
-		printf("Please supply Absolute path\n");
+		printf("Please supply Absolute path, \"%s\" invalid\n",
+		       dirname);
 		return -1;
 	}
 
diff --git a/include/ext4fs.h b/include/ext4fs.h
index 34585d407d..92e6782174 100644
--- a/include/ext4fs.h
+++ b/include/ext4fs.h
@@ -37,6 +37,9 @@
 #define EXT4_FEATURE_INCOMPAT_64BIT	0x0080
 #define EXT4_INDIRECT_BLOCKS		12
 
+#define EXT4_FEATURE_RO_COMPAT_GDT_CSUM		0x0010
+#define EXT4_FEATURE_RO_COMPAT_METADATA_CSUM	0x0400
+
 #define EXT4_BG_INODE_UNINIT		0x0001
 #define EXT4_BG_BLOCK_UNINIT		0x0002
 #define EXT4_BG_INODE_ZEROED		0x0004
-- 
2.29.0

