From ffa869d4e503cc1ad8e2a2aa26a4f0063d970652 Mon Sep 17 00:00:00 2001
From: Ravindra Reddy <ravindra@marvell.com>
Date: Fri, 28 Apr 2017 12:39:25 +0530
Subject: [PATCH 0202/1239] net: switch: mv88e6xxx: add support for peridot and
 topaz families

This patch adds support for 88E6190, 88E6290, 88E6390, 88E6141,
88E6341 switches

- Added new command "switch" with following options
    - info - display switch information
    - read/write - read/write switch registers.
    - phy_read/phy_write - read/write internal phy registers
    - link - display link status

Change-Id: Ie737182672670478d4ba1cb1d656fcc709253bed
Signed-off-by: Ravindra Reddy <ravindra@marvell.com>
Signed-off-by: Igal Liberman <igall@marvell.com>
---
 common/board_r.c            |  13 +
 drivers/net/phy/Kconfig     |   9 +
 drivers/net/phy/Makefile    |   1 +
 drivers/net/phy/mv88e6xxx.c | 490 ++++++++++++++++++++++++++++++++++++
 drivers/net/phy/mv88e6xxx.h | 380 ++++++++++++++++++++++++++++
 include/net.h               |   4 +
 6 files changed, 897 insertions(+)
 create mode 100644 drivers/net/phy/mv88e6xxx.c
 create mode 100644 drivers/net/phy/mv88e6xxx.h

diff --git a/common/board_r.c b/common/board_r.c
index d6fb5047a2..ce8b12c071 100644
--- a/common/board_r.c
+++ b/common/board_r.c
@@ -579,6 +579,14 @@ static int initr_net(void)
 }
 #endif
 
+#ifdef CONFIG_MV88E6XXX_SWITCH
+static int initr_mv88e6xxx(void)
+{
+	mv88e6xxx_initialize(gd->fdt_blob);
+	return 0;
+}
+#endif
+
 #ifdef CONFIG_POST
 static int initr_post(void)
 {
@@ -812,6 +820,11 @@ static init_fnc_t init_sequence_r[] = {
 	INIT_FUNC_WATCHDOG_RESET
 	initr_net,
 #endif
+
+#ifdef CONFIG_MV88E6XXX_SWITCH
+	initr_mv88e6xxx,
+#endif
+
 #ifdef CONFIG_POST
 	initr_post,
 #endif
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 2a3da068c9..3b46ab87a2 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -5,6 +5,15 @@ config BITBANGMII
 config MV88E6352_SWITCH
 	bool "Marvell 88E6352 switch support"
 
+config MV88E6XXX_SWITCH
+	bool "Marvel 88E6xxx switch support"
+	select PHYLIB
+	help
+	  Initialize peridot(MV88E6390/290/190) and topaz(MV88E6341/141)
+	  switches connected to SOC. This driver provide basic functionality
+	  like switch info, read/write switch and phy registers, get link
+	  status etc.
+
 menuconfig PHYLIB
 	bool "Ethernet PHY (physical media interface) support"
 	depends on NET
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index fb8ee10b37..5d02ea6eed 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_BITBANGMII) += miiphybb.o
 obj-$(CONFIG_B53_SWITCH) += b53.o
 obj-$(CONFIG_MV88E61XX_SWITCH) += mv88e61xx.o
 obj-$(CONFIG_MV88E6352_SWITCH) += mv88e6352.o
+obj-$(CONFIG_MV88E6XXX_SWITCH) += mv88e6xxx.o
 
 obj-$(CONFIG_PHYLIB) += phy.o
 obj-$(CONFIG_PHYLIB_10G) += generic_10g.o
diff --git a/drivers/net/phy/mv88e6xxx.c b/drivers/net/phy/mv88e6xxx.c
new file mode 100644
index 0000000000..033b9d254c
--- /dev/null
+++ b/drivers/net/phy/mv88e6xxx.c
@@ -0,0 +1,490 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0
+ * https://spdx.org/licenses
+ */
+
+#include "mv88e6xxx.h"
+/* If the switch's ADDR[4:0] strap pins are strapped to zero, it will
+ * use all 32 SMI bus addresses on its SMI bus, and all switch registers
+ * will be directly accessible on some {device address,register address}
+ * pair.  If the ADDR[4:0] pins are not strapped to zero, the switch
+ * will only respond to SMI transactions to that specific address, and
+ * an indirect addressing mechanism needs to be used to access its
+ * registers.
+ */
+
+static struct mv88e6xxx_dev soho_dev;
+static struct mv88e6xxx_dev *soho_dev_handle;
+
+static int mv88e6xxx_reg_wait_ready(struct mv88e6xxx_dev *dev)
+{
+	int ret;
+	int i;
+	int loop_timeout = 16;
+	unsigned short val;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	for (i = 0; i < loop_timeout; i++) {
+		ret = miiphy_read(name, dev->phy_addr, SMI_CMD, &val);
+		if (ret < 0)
+			return ret;
+		if ((val & SMI_CMD_BUSY) == 0)
+			return 0;
+	}
+
+	return -ETIMEDOUT;
+}
+
+int mv88e6xxx_read_register(struct mv88e6xxx_dev *dev, int port, int reg)
+{
+	int ret;
+	unsigned short val;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	if (!dev)
+		return -ENODEV;
+
+	if (dev->addr_mode == 0) {
+		ret = miiphy_read(name, port, reg, &val);
+		if (ret < 0)
+			return ret;
+		else
+			return (int)val;
+	}
+
+	/* Wait for the bus to become free. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit the read command. */
+	ret = miiphy_write(
+		name, dev->phy_addr, SMI_CMD,
+		SMI_CMD_OP_22_READ |
+		((port & SMI_CMD_DEV_ADDR_MASK) << SMI_CMD_DEV_ADDR_SIZE) |
+		(reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	/* Wait for the read command to complete. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Read the data. */
+	ret = miiphy_read(name, dev->phy_addr, SMI_DATA, &val);
+	if (ret < 0)
+		return ret;
+
+	return (int)val;
+}
+
+int mv88e6xxx_write_register(struct mv88e6xxx_dev *dev, int port, int reg,
+			     unsigned short val)
+{
+	int ret;
+	const char *name = miiphy_get_current_dev();
+
+	if (!name)
+		return -ENXIO;
+
+	if (!dev)
+		return -ENODEV;
+
+	if (dev->addr_mode == 0)
+		return miiphy_write(name, port, reg, val);
+
+	/* Wait for the bus to become free. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit data to write. */
+	ret = miiphy_write(name, dev->phy_addr, SMI_DATA, val);
+	if (ret < 0)
+		return ret;
+
+	/* Transmit the write command. */
+	ret = miiphy_write(
+		name, dev->phy_addr, SMI_CMD,
+		SMI_CMD_OP_22_WRITE |
+		((port & SMI_CMD_DEV_ADDR_MASK) << SMI_CMD_DEV_ADDR_SIZE) |
+		(reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	/* Wait for the read command to complete. */
+	ret = mv88e6xxx_reg_wait_ready(dev);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int mv88e6xxx_reg_wait_ready_indirect(struct mv88e6xxx_dev *dev)
+{
+	int ret, i;
+	int loop_timeout = 16;
+
+	for (i = 0; i < loop_timeout; i++) {
+		ret = mv88e6xxx_read_register(dev, REG_GLOBAL2, GLOBAL2_SMI_OP);
+		if (ret < 0)
+			return ret;
+		if (!(ret & GLOBAL2_SMI_OP_BUSY))
+			return 0;
+	}
+	return -ETIMEDOUT;
+}
+
+static int mv88e6xxx_read_indirect(struct mv88e6xxx_dev *dev, int port, int reg)
+{
+	int ret;
+
+	ret = mv88e6xxx_write_register(
+		dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+		GLOBAL2_SMI_OP_22_READ |
+		((port & SMI_CMD_DEV_ADDR_MASK) << SMI_CMD_DEV_ADDR_SIZE) |
+		(reg & SMI_CMD_REG_ADDR_MASK));
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_reg_wait_ready_indirect(dev);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_read_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA);
+
+	return ret;
+}
+
+static int mv88e6xxx_write_indirect(struct mv88e6xxx_dev *dev, int port,
+				    int reg, unsigned short val)
+{
+	int ret;
+
+	ret = mv88e6xxx_write_register(dev, REG_GLOBAL2, GLOBAL2_SMI_DATA, val);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6xxx_write_register(
+		dev, REG_GLOBAL2, GLOBAL2_SMI_OP,
+		GLOBAL2_SMI_OP_22_WRITE |
+		((port & SMI_CMD_DEV_ADDR_MASK) << SMI_CMD_DEV_ADDR_SIZE) |
+		(reg & SMI_CMD_REG_ADDR_MASK));
+
+	return mv88e6xxx_reg_wait_ready_indirect(dev);
+}
+
+int mv88e6xxx_read_phy_register(struct mv88e6xxx_dev *dev, int port, int page,
+				int reg)
+{
+	int ret;
+
+	if (!dev)
+		return -ENODEV;
+
+	ret = mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, page);
+	if (ret < 0)
+		goto restore_page_0;
+
+	ret = mv88e6xxx_read_indirect(dev, port, reg);
+
+restore_page_0:
+	mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, 0x0);
+
+	return ret;
+}
+
+int mv88e6xxx_write_phy_register(struct mv88e6xxx_dev *dev, int port, int page,
+				 int reg, unsigned short val)
+{
+	int ret;
+
+	if (!dev) {
+		printf("Soho dev not initialized\n");
+		return -1;
+	}
+
+	ret = mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, page);
+	if (ret < 0)
+		goto restore_page_0;
+
+	ret = mv88e6xxx_write_indirect(dev, port, reg, val);
+
+restore_page_0:
+	mv88e6xxx_write_indirect(dev, port, SMI_PHY_PAGE_REG, 0x0);
+
+	return ret;
+}
+
+void mv88e6xxx_display_switch_info(struct mv88e6xxx_dev *dev)
+{
+	unsigned int product_num;
+
+	if (dev->id < 0) {
+		printf("No Switch Device Found\n");
+		return;
+	}
+
+	product_num = ((unsigned int)dev->id) >> 4;
+	if (product_num == PORT_SWITCH_ID_PROD_NUM_6390 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6290 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6190) {
+		printf("Switch    : SOHO\n");
+		printf("Series    : Peridot\n");
+		printf("Product # : %X\n", product_num);
+		printf("Revision  : %X\n", dev->id & 0xf);
+	} else if (product_num == PORT_SWITCH_ID_PROD_NUM_6141 ||
+		   product_num == PORT_SWITCH_ID_PROD_NUM_6341) {
+		printf("Switch    : SOHO\n");
+		printf("Series    : Topaz\n");
+		printf("Product # : %X\n", product_num);
+		printf("Revision  : %X\n", dev->id & 0xf);
+	} else {
+		printf("Unknown switch with Device ID: 0x%X\n", dev->id);
+	}
+}
+
+/* We expect the switch to perform auto negotiation if there is a real phy. */
+int mv88e6xxx_get_link_status(struct mv88e6xxx_dev *dev, int port)
+{
+	int ret;
+
+	ret = mv88e6xxx_read_register(dev, port, PORT_STATUS);
+	if (ret < 0)
+		return ret;
+
+	printf("Port: 0x%X, ", port);
+	if (ret & PORT_STATUS_LINK) {
+		printf("Link: UP, ");
+	} else {
+		printf("Link: Down\n");
+		return 0;
+	}
+
+	if (ret & PORT_STATUS_DUPLEX)
+		printf("Duplex: FULL, ");
+	else
+		printf("Duplex: HALF, ");
+
+	if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_10)
+		printf("Speed: 10 Mbps\n");
+	else if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_100)
+		printf("Speed: 100 Mbps\n");
+	else if ((ret & PORT_STATUS_SPEED_MASK) == PORT_STATUS_SPEED_1000)
+		printf("Speed: 1000 Mbps\n");
+	else
+		printf("Speed: Unknown\n");
+
+	return 0;
+}
+
+int mv88e6xxx_get_switch_id(struct mv88e6xxx_dev *dev)
+{
+	int id, product_num;
+
+	id = mv88e6xxx_read_register(dev, 0, PORT_SWITCH_ID);
+	if (id < 0)
+		return id;
+
+	product_num = id >> 4;
+	if (product_num == PORT_SWITCH_ID_PROD_NUM_6390 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6290 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6190 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6141 ||
+	    product_num == PORT_SWITCH_ID_PROD_NUM_6341)
+		return id;
+	else
+		return -ENODEV;
+
+	return 0;
+}
+
+int mv88e6xxx_initialize(const void *blob)
+{
+	int node = 0;
+	int ret;
+
+	soho_dev_handle = NULL;
+
+	/* Read Device Tree */
+	node = fdt_node_offset_by_compatible(blob, -1, "marvell,mv88e6xxx");
+
+	if (node == -FDT_ERR_NOTFOUND)
+		return -ENXIO;
+
+	/* Check whether switch node is enabled */
+	ret = fdtdec_get_is_enabled(blob, node);
+	if (ret == 0)
+		return -EACCES;
+
+	/* Initizalize Switch Device Structure */
+	soho_dev.phy_addr = fdtdec_get_uint(blob, node, "phy-addr", 0);
+	soho_dev.port_mask = fdtdec_get_int(blob, node, "port-mask", 0);
+	if (soho_dev.phy_addr == 0)
+		soho_dev.addr_mode = 0;  /* Single Addressing mode */
+	else
+		soho_dev.addr_mode = 1;  /* Multi Addressing mode */
+
+	soho_dev.id = mv88e6xxx_get_switch_id(&soho_dev);
+
+	soho_dev_handle = &soho_dev;
+
+	return 0;
+}
+
+static int sw_resolve_options(char *str)
+{
+	if (strcmp(str, "info") == 0)
+		return SW_INFO;
+	else if (strcmp(str, "read") == 0)
+		return SW_READ;
+	else if (strcmp(str, "write") == 0)
+		return SW_WRITE;
+	else if (strcmp(str, "phy_read") == 0)
+		return SW_PHY_READ;
+	else if (strcmp(str, "phy_write") == 0)
+		return SW_PHY_WRITE;
+	else if (strcmp(str, "link") == 0)
+		return SW_LINK;
+	else
+		return SW_NA;
+}
+
+static int do_sw(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	struct mv88e6xxx_dev *dev;
+	int port, reg, page, val = 0, ret = 0;
+
+	dev = soho_dev_handle;
+
+	if (!dev) {
+		printf("Switch Device not found\n");
+		return -ENODEV;
+	}
+
+	switch (sw_resolve_options(argv[1])) {
+	case SW_INFO:
+		mv88e6xxx_display_switch_info(dev);
+		break;
+	case SW_READ:
+		if (argc < 4) {
+			printf("Syntax Error: switch read <port> <reg>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[2], NULL, 16);
+		reg  = (int)simple_strtoul(argv[3], NULL, 16);
+		ret = mv88e6xxx_read_register(dev, port, reg);
+		if (ret < 0) {
+			printf("Failed: Read  - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, ret: %d\n", reg, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X\n", reg, ret);
+		}
+		break;
+
+	case SW_WRITE:
+		if (argc < 5) {
+			printf("Syntax Error: ");
+			printf("switch write <port> <reg> <val>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[2], NULL, 16);
+		reg  = (int)simple_strtoul(argv[3], NULL, 16);
+		val  = (int)simple_strtoul(argv[4], NULL, 16);
+		ret = mv88e6xxx_write_register(dev, port, reg,
+					       (unsigned short)val);
+		if (ret < 0) {
+			printf("Failed: Write - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X, ret: %d\n",
+			       reg, val, ret);
+		} else {
+			printf("Read  - switch port: 0x%X, ", port);
+			printf("reg: 0x%X, val: 0x%X\n",
+			       reg, val);
+		}
+		break;
+
+	case SW_PHY_READ:
+		if (argc < 5) {
+			printf("Syntax Error: ");
+			printf("switch phy_read <port> <page> <reg>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[2], NULL, 16);
+		page = (int)simple_strtoul(argv[3], NULL, 16);
+		reg  = (int)simple_strtoul(argv[4], NULL, 16);
+		ret = mv88e6xxx_read_phy_register(dev, port, page, reg);
+		if (ret < 0) {
+			printf("Failed: Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X\n, ret: %d",
+			       page, reg, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, ret);
+		}
+		break;
+
+	case SW_PHY_WRITE:
+		if (argc < 6) {
+			printf("Syntax Error: ");
+			printf("switch phy_write <port> <page> <reg> <val>\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[2], NULL, 16);
+		page = (int)simple_strtoul(argv[3], NULL, 16);
+		reg  = (int)simple_strtoul(argv[4], NULL, 16);
+		val  = (int)simple_strtoul(argv[5], NULL, 16);
+		ret = mv88e6xxx_write_phy_register(dev, port, page, reg,
+						   (unsigned short)val);
+		if (ret < 0) {
+			printf("Failed: Write - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X, ret: %d\n",
+			       page, reg, val, ret);
+		} else {
+			printf("Read - switch port: 0x%X, ", port);
+			printf("page: 0x%X, reg: 0x%X, val: 0x%X\n",
+			       page, reg, val);
+		}
+		break;
+
+	case SW_LINK:
+		if (argc < 3) {
+			printf("Error: Too few arguments\n");
+			return 1;
+		}
+		port = (int)simple_strtoul(argv[2], NULL, 16);
+		ret = mv88e6xxx_get_link_status(dev, port);
+		break;
+
+	case SW_NA:
+		printf("\"switch %s\" - Wrong command. Try \"help switch\"\n",
+		       argv[1]);
+
+	default:
+		break;
+	}
+	return 0;
+}
+
+/***************************************************/
+U_BOOT_CMD(
+	switch,	6,	1,	do_sw,
+	"Switch Access commands",
+	"switch info - Display switch information\n"
+	"switch read <port> <reg> - read switch register <reg> of a <port>\n"
+	"switch write <port> <reg> <val> - write <val> to switch register <reg> of a <port>\n"
+	"switch phy_read <port> <page> <reg> - read internal switch phy register <reg> at <page> of a switch <port>\n"
+	"switch phy_write <port> <page> <reg> <val>- write <val> to internal phy register at <page> of a <port>\n"
+	"switch link <port> - Display link state and speed of a <port>\n"
+);
diff --git a/drivers/net/phy/mv88e6xxx.h b/drivers/net/phy/mv88e6xxx.h
new file mode 100644
index 0000000000..ef0cc5eac7
--- /dev/null
+++ b/drivers/net/phy/mv88e6xxx.h
@@ -0,0 +1,380 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0
+ * https://spdx.org/licenses
+ */
+
+#ifndef _MV88E6XXX_H__
+#define _MV88E6XXX_H__
+
+#include <asm/io.h>
+#include <command.h>
+#include <common.h>
+#include <config.h>
+#include <config/arch/mvebu.h>
+#include <fdtdec.h>
+#include <fdt.h>
+#include <linux/compat.h>
+#include <linux/mbus.h>
+#include <malloc.h>
+#include <miiphy.h>
+#include <net.h>
+#include <netdev.h>
+#include <pci.h>
+#include <phy.h>
+#include <watchdog.h>
+
+#define SMI_CMD					0x00
+#define SMI_CMD_BUSY				BIT(15)
+#define SMI_CMD_CLAUSE_22			BIT(12)
+#define SMI_CMD_OP_22_WRITE			\
+			((1 << 10) | SMI_CMD_BUSY | SMI_CMD_CLAUSE_22)
+#define SMI_CMD_OP_22_READ			\
+			((2 << 10) | SMI_CMD_BUSY | SMI_CMD_CLAUSE_22)
+#define SMI_CMD_OP_45_WRITE_ADDR		((0 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_WRITE_DATA		((1 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_READ_DATA			((2 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_OP_45_READ_DATA_INC		((3 << 10) | SMI_CMD_BUSY)
+#define SMI_CMD_DEV_ADDR_MASK			0x1f
+#define SMI_CMD_DEV_ADDR_SIZE			5
+#define SMI_CMD_REG_ADDR_MASK			0x1f
+#define SMI_DATA				0x01
+
+#define SMI_PHY_PAGE_REG			0x16
+
+/* Fiber/SERDES Registers are located at SMI address F, page 1 */
+#define REG_FIBER_SERDES			0x0f
+#define PAGE_FIBER_SERDES			0x01
+
+#define REG_PORT(p)				(0x10 + (p))
+#define PORT_STATUS				0x00
+#define PORT_STATUS_PAUSE_EN			BIT(15)
+#define PORT_STATUS_MY_PAUSE			BIT(14)
+#define PORT_STATUS_HD_FLOW			BIT(13)
+#define PORT_STATUS_PHY_DETECT			BIT(12)
+#define PORT_STATUS_LINK			BIT(11)
+#define PORT_STATUS_DUPLEX			BIT(10)
+#define PORT_STATUS_SPEED_MASK			0x0300
+#define PORT_STATUS_SPEED_10			0x0000
+#define PORT_STATUS_SPEED_100			0x0100
+#define PORT_STATUS_SPEED_1000			0x0200
+#define PORT_STATUS_EEE				BIT(6) /* 6352 */
+#define PORT_STATUS_AM_DIS			BIT(6) /* 6165 */
+#define PORT_STATUS_MGMII			BIT(6) /* 6185 */
+#define PORT_STATUS_TX_PAUSED			BIT(5)
+#define PORT_STATUS_FLOW_CTRL			BIT(4)
+#define PORT_STATUS_CMODE_MASK			0x0f
+#define PORT_STATUS_CMODE_100BASE_X		0x8
+#define PORT_STATUS_CMODE_1000BASE_X		0x9
+#define PORT_STATUS_CMODE_SGMII			0xa
+#define PORT_PCS_CTRL				0x01
+#define PORT_PCS_CTRL_RGMII_DELAY_RXCLK		BIT(15)
+#define PORT_PCS_CTRL_RGMII_DELAY_TXCLK		BIT(14)
+#define PORT_PCS_CTRL_FORCE_SPEED		BIT(13)
+#define PORT_PCS_CTRL_FC			BIT(7)
+#define PORT_PCS_CTRL_FORCE_FC			BIT(6)
+#define PORT_PCS_CTRL_LINK_UP			BIT(5)
+#define PORT_PCS_CTRL_FORCE_LINK		BIT(4)
+#define PORT_PCS_CTRL_DUPLEX_FULL		BIT(3)
+#define PORT_PCS_CTRL_FORCE_DUPLEX		BIT(2)
+#define PORT_PCS_CTRL_10			0x00
+#define PORT_PCS_CTRL_100			0x01
+#define PORT_PCS_CTRL_1000			0x02
+#define PORT_PCS_CTRL_UNFORCED			0x03
+#define PORT_PAUSE_CTRL				0x02
+#define PORT_SWITCH_ID				0x03
+
+#define PORT_SWITCH_ID_PROD_NUM_6190		0x190
+#define PORT_SWITCH_ID_PROD_NUM_6290		0x290
+#define PORT_SWITCH_ID_PROD_NUM_6390		0x390
+#define PORT_SWITCH_ID_PROD_NUM_6141		0x141
+#define PORT_SWITCH_ID_PROD_NUM_6341		0x341
+
+#define PORT_CONTROL				0x04
+#define PORT_CONTROL_USE_CORE_TAG		BIT(15)
+#define PORT_CONTROL_DROP_ON_LOCK		BIT(14)
+#define PORT_CONTROL_EGRESS_UNMODIFIED		(0x0 << 12)
+#define PORT_CONTROL_EGRESS_UNTAGGED		(0x1 << 12)
+#define PORT_CONTROL_EGRESS_TAGGED		(0x2 << 12)
+#define PORT_CONTROL_EGRESS_ADD_TAG		(0x3 << 12)
+#define PORT_CONTROL_HEADER			BIT(11)
+#define PORT_CONTROL_IGMP_MLD_SNOOP		BIT(10)
+#define PORT_CONTROL_DOUBLE_TAG			BIT(9)
+#define PORT_CONTROL_FRAME_MODE_NORMAL		(0x0 << 8)
+#define PORT_CONTROL_FRAME_MODE_DSA		(0x1 << 8)
+#define PORT_CONTROL_FRAME_MODE_PROVIDER	(0x2 << 8)
+#define PORT_CONTROL_FRAME_ETHER_TYPE_DSA	(0x3 << 8)
+#define PORT_CONTROL_DSA_TAG			BIT(8)
+#define PORT_CONTROL_VLAN_TUNNEL		BIT(7)
+#define PORT_CONTROL_TAG_IF_BOTH		BIT(6)
+#define PORT_CONTROL_USE_IP			BIT(5)
+#define PORT_CONTROL_USE_TAG			BIT(4)
+#define PORT_CONTROL_FORWARD_UNKNOWN_MC		BIT(3)
+#define PORT_CONTROL_FORWARD_UNKNOWN		BIT(2)
+#define PORT_CONTROL_STATE_MASK			0x03
+#define PORT_CONTROL_STATE_DISABLED		0x00
+#define PORT_CONTROL_STATE_BLOCKING		0x01
+#define PORT_CONTROL_STATE_LEARNING		0x02
+#define PORT_CONTROL_STATE_FORWARDING		0x03
+#define PORT_CONTROL_1				0x05
+#define PORT_CONTROL_1_FID_11_4_MASK		(0xff << 0)
+#define PORT_BASE_VLAN				0x06
+#define PORT_BASE_VLAN_FID_3_0_MASK		(0xf << 12)
+#define PORT_DEFAULT_VLAN			0x07
+#define PORT_DEFAULT_VLAN_MASK			0xfff
+#define PORT_CONTROL_2				0x08
+#define PORT_CONTROL_2_IGNORE_FCS		BIT(15)
+#define PORT_CONTROL_2_VTU_PRI_OVERRIDE		BIT(14)
+#define PORT_CONTROL_2_SA_PRIO_OVERRIDE		BIT(13)
+#define PORT_CONTROL_2_DA_PRIO_OVERRIDE		BIT(12)
+#define PORT_CONTROL_2_JUMBO_1522		(0x00 << 12)
+#define PORT_CONTROL_2_JUMBO_2048		(0x01 << 12)
+#define PORT_CONTROL_2_JUMBO_10240		(0x02 << 12)
+#define PORT_CONTROL_2_8021Q_MASK		(0x03 << 10)
+#define PORT_CONTROL_2_8021Q_DISABLED		(0x00 << 10)
+#define PORT_CONTROL_2_8021Q_FALLBACK		(0x01 << 10)
+#define PORT_CONTROL_2_8021Q_CHECK		(0x02 << 10)
+#define PORT_CONTROL_2_8021Q_SECURE		(0x03 << 10)
+#define PORT_CONTROL_2_DISCARD_TAGGED		BIT(9)
+#define PORT_CONTROL_2_DISCARD_UNTAGGED		BIT(8)
+#define PORT_CONTROL_2_MAP_DA			BIT(7)
+#define PORT_CONTROL_2_DEFAULT_FORWARD		BIT(6)
+#define PORT_CONTROL_2_FORWARD_UNKNOWN		BIT(6)
+#define PORT_CONTROL_2_EGRESS_MONITOR		BIT(5)
+#define PORT_CONTROL_2_INGRESS_MONITOR		BIT(4)
+#define PORT_RATE_CONTROL			0x09
+#define PORT_RATE_CONTROL_2			0x0a
+#define PORT_ASSOC_VECTOR			0x0b
+#define PORT_ASSOC_VECTOR_HOLD_AT_1		BIT(15)
+#define PORT_ASSOC_VECTOR_INT_AGE_OUT		BIT(14)
+#define PORT_ASSOC_VECTOR_LOCKED_PORT		BIT(13)
+#define PORT_ASSOC_VECTOR_IGNORE_WRONG		BIT(12)
+#define PORT_ASSOC_VECTOR_REFRESH_LOCKED	BIT(11)
+#define PORT_ATU_CONTROL			0x0c
+#define PORT_PRI_OVERRIDE			0x0d
+#define PORT_ETH_TYPE				0x0f
+#define PORT_IN_DISCARD_LO			0x10
+#define PORT_IN_DISCARD_HI			0x11
+#define PORT_IN_FILTERED			0x12
+#define PORT_OUT_FILTERED			0x13
+#define PORT_TAG_REGMAP_0123			0x18
+#define PORT_TAG_REGMAP_4567			0x19
+
+#define REG_GLOBAL				0x1b
+#define GLOBAL_STATUS				0x00
+#define GLOBAL_STATUS_PPU_STATE			BIT(15) /* 6351 and 6171 */
+/* Two bits for 6165, 6185 etc */
+#define GLOBAL_STATUS_PPU_MASK			(0x3 << 14)
+#define GLOBAL_STATUS_PPU_DISABLED_RST		(0x0 << 14)
+#define GLOBAL_STATUS_PPU_INITIALIZING		(0x1 << 14)
+#define GLOBAL_STATUS_PPU_DISABLED		(0x2 << 14)
+#define GLOBAL_STATUS_PPU_POLLING		(0x3 << 14)
+#define GLOBAL_MAC_01				0x01
+#define GLOBAL_MAC_23				0x02
+#define GLOBAL_MAC_45				0x03
+#define GLOBAL_ATU_FID				0x01 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_FID				0x02 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_FID_MASK			0xfff
+#define GLOBAL_VTU_SID				0x03 /* 6097 6165 6351 6352 */
+#define GLOBAL_VTU_SID_MASK			0x3f
+#define GLOBAL_CONTROL				0x04
+#define GLOBAL_CONTROL_SW_RESET			BIT(15)
+#define GLOBAL_CONTROL_PPU_ENABLE		BIT(14)
+#define GLOBAL_CONTROL_DISCARD_EXCESS		BIT(13) /* 6352 */
+#define GLOBAL_CONTROL_SCHED_PRIO		BIT(11) /* 6152 */
+#define GLOBAL_CONTROL_MAX_FRAME_1632		BIT(10) /* 6152 */
+#define GLOBAL_CONTROL_RELOAD_EEPROM		BIT(9)	/* 6152 */
+#define GLOBAL_CONTROL_DEVICE_EN		BIT(7)
+#define GLOBAL_CONTROL_STATS_DONE_EN		BIT(6)
+#define GLOBAL_CONTROL_VTU_PROBLEM_EN		BIT(5)
+#define GLOBAL_CONTROL_VTU_DONE_EN		BIT(4)
+#define GLOBAL_CONTROL_ATU_PROBLEM_EN		BIT(3)
+#define GLOBAL_CONTROL_ATU_DONE_EN		BIT(2)
+#define GLOBAL_CONTROL_TCAM_EN			BIT(1)
+#define GLOBAL_CONTROL_EEPROM_DONE_EN		BIT(0)
+#define GLOBAL_VTU_OP				0x05
+#define GLOBAL_VTU_OP_BUSY			BIT(15)
+#define GLOBAL_VTU_OP_FLUSH_ALL			\
+					((0x01 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_VTU_LOAD_PURGE		\
+					((0x03 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_VTU_GET_NEXT		\
+					((0x04 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_STU_LOAD_PURGE		\
+					((0x05 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_OP_STU_GET_NEXT		\
+					((0x06 << 12) | GLOBAL_VTU_OP_BUSY)
+#define GLOBAL_VTU_VID				0x06
+#define GLOBAL_VTU_VID_MASK			0xfff
+#define GLOBAL_VTU_VID_VALID			BIT(12)
+#define GLOBAL_VTU_DATA_0_3			0x07
+#define GLOBAL_VTU_DATA_4_7			0x08
+#define GLOBAL_VTU_DATA_8_11			0x09
+#define GLOBAL_VTU_STU_DATA_MASK		0x03
+#define GLOBAL_VTU_DATA_MEMBER_TAG_UNMODIFIED	0x00
+#define GLOBAL_VTU_DATA_MEMBER_TAG_UNTAGGED	0x01
+#define GLOBAL_VTU_DATA_MEMBER_TAG_TAGGED	0x02
+#define GLOBAL_VTU_DATA_MEMBER_TAG_NON_MEMBER	0x03
+#define GLOBAL_STU_DATA_PORT_STATE_DISABLED	0x00
+#define GLOBAL_STU_DATA_PORT_STATE_BLOCKING	0x01
+#define GLOBAL_STU_DATA_PORT_STATE_LEARNING	0x02
+#define GLOBAL_STU_DATA_PORT_STATE_FORWARDING	0x03
+#define GLOBAL_ATU_CONTROL			0x0a
+#define GLOBAL_ATU_CONTROL_LEARN2ALL		BIT(3)
+#define GLOBAL_ATU_OP				0x0b
+#define GLOBAL_ATU_OP_BUSY			BIT(15)
+#define GLOBAL_ATU_OP_NOP			(0 << 12)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_ALL		\
+					((1 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC	\
+					((2 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_LOAD_DB			\
+					((3 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_NEXT_DB		\
+					((4 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_ALL_DB		\
+					((5 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC_DB	\
+					((6 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_CLR_VIOLATION		\
+					((7 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_DATA				0x0c
+#define GLOBAL_ATU_DATA_TRUNK			BIT(15)
+#define GLOBAL_ATU_DATA_TRUNK_ID_MASK		0x00f0
+#define GLOBAL_ATU_DATA_TRUNK_ID_SHIFT		4
+#define GLOBAL_ATU_DATA_PORT_VECTOR_MASK	0x3ff0
+#define GLOBAL_ATU_DATA_PORT_VECTOR_SHIFT	4
+#define GLOBAL_ATU_DATA_STATE_MASK		0x0f
+#define GLOBAL_ATU_DATA_STATE_UNUSED		0x00
+#define GLOBAL_ATU_DATA_STATE_UC_MGMT		0x0d
+#define GLOBAL_ATU_DATA_STATE_UC_STATIC		0x0e
+#define GLOBAL_ATU_DATA_STATE_UC_PRIO_OVER	0x0f
+#define GLOBAL_ATU_DATA_STATE_MC_NONE_RATE	0x05
+#define GLOBAL_ATU_DATA_STATE_MC_STATIC		0x07
+#define GLOBAL_ATU_DATA_STATE_MC_MGMT		0x0e
+#define GLOBAL_ATU_DATA_STATE_MC_PRIO_OVER	0x0f
+#define GLOBAL_ATU_MAC_01			0x0d
+#define GLOBAL_ATU_MAC_23			0x0e
+#define GLOBAL_ATU_MAC_45			0x0f
+#define GLOBAL_IP_PRI_0				0x10
+#define GLOBAL_IP_PRI_1				0x11
+#define GLOBAL_IP_PRI_2				0x12
+#define GLOBAL_IP_PRI_3				0x13
+#define GLOBAL_IP_PRI_4				0x14
+#define GLOBAL_IP_PRI_5				0x15
+#define GLOBAL_IP_PRI_6				0x16
+#define GLOBAL_IP_PRI_7				0x17
+#define GLOBAL_IEEE_PRI				0x18
+#define GLOBAL_CORE_TAG_TYPE			0x19
+#define GLOBAL_MONITOR_CONTROL			0x1a
+#define GLOBAL_MONITOR_CONTROL_INGRESS_SHIFT	12
+#define GLOBAL_MONITOR_CONTROL_EGRESS_SHIFT	8
+#define GLOBAL_MONITOR_CONTROL_ARP_SHIFT	4
+#define GLOBAL_MONITOR_CONTROL_MIRROR_SHIFT	0
+#define GLOBAL_MONITOR_CONTROL_ARP_DISABLED	(0xf0)
+#define GLOBAL_CONTROL_2			0x1c
+#define GLOBAL_CONTROL_2_NO_CASCADE		0xe000
+#define GLOBAL_CONTROL_2_MULTIPLE_CASCADE	0xf000
+
+#define GLOBAL_STATS_OP			0x1d
+#define GLOBAL_STATS_OP_BUSY		BIT(15)
+#define GLOBAL_STATS_OP_NOP		(0 << 12)
+#define GLOBAL_STATS_OP_FLUSH_ALL	((1 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_FLUSH_PORT	((2 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_READ_CAPTURED	((4 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_CAPTURE_PORT	((5 << 12) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_RX		((1 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_TX		((2 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_HIST_RX_TX	((3 << 10) | GLOBAL_STATS_OP_BUSY)
+#define GLOBAL_STATS_OP_BANK_1		BIT(9)
+#define GLOBAL_STATS_COUNTER_32		0x1e
+#define GLOBAL_STATS_COUNTER_01		0x1f
+
+#define REG_GLOBAL2				0x1c
+#define GLOBAL2_INT_SOURCE			0x00
+#define GLOBAL2_INT_MASK			0x01
+#define GLOBAL2_MGMT_EN_2X			0x02
+#define GLOBAL2_MGMT_EN_0X			0x03
+#define GLOBAL2_FLOW_CONTROL			0x04
+#define GLOBAL2_SWITCH_MGMT			0x05
+#define GLOBAL2_SWITCH_MGMT_USE_DOUBLE_TAG_DATA	BIT(15)
+#define GLOBAL2_SWITCH_MGMT_PREVENT_LOOPS	BIT(14)
+#define GLOBAL2_SWITCH_MGMT_FLOW_CONTROL_MSG	BIT(13)
+#define GLOBAL2_SWITCH_MGMT_FORCE_FLOW_CTRL_PRI	BIT(7)
+#define GLOBAL2_SWITCH_MGMT_RSVD2CPU		BIT(3)
+#define GLOBAL2_DEVICE_MAPPING			0x06
+#define GLOBAL2_DEVICE_MAPPING_UPDATE		BIT(15)
+#define GLOBAL2_DEVICE_MAPPING_TARGET_SHIFT	8
+#define GLOBAL2_DEVICE_MAPPING_PORT_MASK	0x0f
+#define GLOBAL2_TRUNK_MASK			0x07
+#define GLOBAL2_TRUNK_MASK_UPDATE		BIT(15)
+#define GLOBAL2_TRUNK_MASK_NUM_SHIFT		12
+#define GLOBAL2_TRUNK_MAPPING			0x08
+#define GLOBAL2_TRUNK_MAPPING_UPDATE		BIT(15)
+#define GLOBAL2_TRUNK_MAPPING_ID_SHIFT		11
+#define GLOBAL2_INGRESS_OP			0x09
+#define GLOBAL2_INGRESS_DATA			0x0a
+#define GLOBAL2_PVT_ADDR			0x0b
+#define GLOBAL2_PVT_DATA			0x0c
+#define GLOBAL2_SWITCH_MAC			0x0d
+#define GLOBAL2_SWITCH_MAC_BUSY			BIT(15)
+#define GLOBAL2_ATU_STATS			0x0e
+#define GLOBAL2_PRIO_OVERRIDE			0x0f
+#define GLOBAL2_PRIO_OVERRIDE_FORCE_SNOOP	BIT(7)
+#define GLOBAL2_PRIO_OVERRIDE_SNOOP_SHIFT	4
+#define GLOBAL2_PRIO_OVERRIDE_FORCE_ARP		BIT(3)
+#define GLOBAL2_PRIO_OVERRIDE_ARP_SHIFT		0
+#define GLOBAL2_EEPROM_OP			0x14
+#define GLOBAL2_EEPROM_OP_BUSY			BIT(15)
+#define GLOBAL2_EEPROM_OP_WRITE			\
+		((3 << 12) | GLOBAL2_EEPROM_OP_BUSY)
+#define GLOBAL2_EEPROM_OP_READ			\
+		((4 << 12) | GLOBAL2_EEPROM_OP_BUSY)
+#define GLOBAL2_EEPROM_OP_LOAD			BIT(11)
+#define GLOBAL2_EEPROM_OP_WRITE_EN		BIT(10)
+#define GLOBAL2_EEPROM_OP_ADDR_MASK		0xff
+#define GLOBAL2_EEPROM_DATA			0x15
+#define GLOBAL2_PTP_AVB_OP			0x16
+#define GLOBAL2_PTP_AVB_DATA			0x17
+#define GLOBAL2_SMI_OP				0x18
+#define GLOBAL2_SMI_OP_BUSY			BIT(15)
+#define GLOBAL2_SMI_OP_CLAUSE_22		BIT(12)
+#define GLOBAL2_SMI_OP_22_WRITE			\
+		((1 << 10) | GLOBAL2_SMI_OP_BUSY | GLOBAL2_SMI_OP_CLAUSE_22)
+#define GLOBAL2_SMI_OP_22_READ			\
+		((2 << 10) | GLOBAL2_SMI_OP_BUSY | GLOBAL2_SMI_OP_CLAUSE_22)
+#define GLOBAL2_SMI_OP_45_WRITE_ADDR		\
+		((0 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_OP_45_WRITE_DATA		\
+		((1 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_OP_45_READ_DATA		\
+		((2 << 10) | GLOBAL2_SMI_OP_BUSY)
+#define GLOBAL2_SMI_DATA			0x19
+#define GLOBAL2_SCRATCH_MISC			0x1a
+#define GLOBAL2_SCRATCH_BUSY			BIT(15)
+#define GLOBAL2_SCRATCH_REGISTER_SHIFT		8
+#define GLOBAL2_SCRATCH_VALUE_MASK		0xff
+#define GLOBAL2_WDOG_CONTROL			0x1b
+#define GLOBAL2_QOS_WEIGHT			0x1c
+#define GLOBAL2_MISC				0x1d
+
+struct mv88e6xxx_dev {
+	unsigned int phy_addr;
+	unsigned int port_mask;
+	unsigned int addr_mode;
+	int id;
+};
+
+enum sw_opts {
+	SW_INFO,
+	SW_READ,
+	SW_WRITE,
+	SW_PHY_READ,
+	SW_PHY_WRITE,
+	SW_LINK,
+	SW_NA
+};
+
+#endif /* _MV88E6XXX_H__*/
+
diff --git a/include/net.h b/include/net.h
index 75a16e4c8f..20942c7f30 100644
--- a/include/net.h
+++ b/include/net.h
@@ -237,6 +237,10 @@ int eth_initialize(void);		/* Initialize network subsystem */
 void eth_try_another(int first_restart);	/* Change the device */
 void eth_set_current(void);		/* set nterface to ethcur var */
 
+#ifdef CONFIG_MV88E6XXX_SWITCH
+int mv88e6xxx_initialize(const void *blob);
+#endif
+
 int eth_get_dev_index(void);		/* get the device index */
 
 /**
-- 
2.29.0

