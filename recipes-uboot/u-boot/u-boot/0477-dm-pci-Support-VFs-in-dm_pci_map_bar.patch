From e0357b619ca76daf109a1dd83595227b1ed90774 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Thu, 19 May 2016 15:21:45 -0400
Subject: [PATCH 0477/1239] dm: pci: Support VFs in dm_pci_map_bar()

Support virtual functions in dm_pci_map_bar. Currently, only
EA devices are supported since the subsystem lacks saving BAR
sizes for non-EA PFs

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/pci/pci-uclass.c | 38 +++++++++++++++++++++++++-------------
 include/pci.h            |  5 ++++-
 2 files changed, 29 insertions(+), 14 deletions(-)

diff --git a/drivers/pci/pci-uclass.c b/drivers/pci/pci-uclass.c
index 49b30ab847..f7768e5b47 100644
--- a/drivers/pci/pci-uclass.c
+++ b/drivers/pci/pci-uclass.c
@@ -856,8 +856,8 @@ int pci_sriov_init(struct udevice *pdev, int vf_en)
 		pplat->device = device;
 		pplat->class = class;
 		pplat->is_phys = false;
-		pplat->pf = dm_pci_get_bdf(pdev);
-		pplat->vf_id = vf;
+		pplat->pdev = pdev;
+		pplat->vf_id = vf * vf_stride + vf_offset;
 
 		bdf += PCI_BDF(0, 0, vf_stride);
 	}
@@ -1449,28 +1449,36 @@ pci_addr_t dm_pci_phys_to_bus(struct udevice *dev, phys_addr_t phys_addr,
 	return bus_addr;
 }
 
+int dm_pci_ea_bar_read(struct udevice *dev, int bar,
+		       pci_addr_t *start, size_t *size);
+
 void *dm_pci_map_bar(struct udevice *dev, int bar, size_t *size, int flags)
 {
-	int ea_pos;
+	int pos;
 	pci_addr_t pci_bus_start;
 	u32 bar_response;
 	int ea_off;
+	struct pci_child_platdata *pdata = dev_get_parent_platdata(dev);
 
-	/*
-	 * if the function supports Enhanced Allocation use that instead of
-	 * BARs
-	 */
-	ea_off = dm_pci_find_capability(dev, PCI_CAP_ID_EA);
-	if (ea_off)
-		return dm_pci_map_ea_bar(dev, bar, flags, ea_off);
+	if (!pdata->is_phys) {
+		if (bar < 9 || bar > 14)
+			return NULL;
+		dev = pdata->pdev;
+	}
 
-	ea_pos = dm_pci_find_capability(dev, PCI_CAP_ID_EA);
+	pos = dm_pci_find_capability(dev, PCI_CAP_ID_EA);
 
-	if (ea_pos) {
+	if (pos) {
 		dm_pci_ea_bar_read(dev, bar, &pci_bus_start, size);
 	} else {
 		/* read BAR address */
-		bar = PCI_BASE_ADDRESS_0 + bar * 4;
+		if (bar >= 0 && bar <= 5) {
+			bar = PCI_BASE_ADDRESS_0 + bar * 4;
+		} else if (bar >= 9 && bar <= 14) {
+			pos = dm_pci_find_ext_capability(dev, PCI_EXT_CAP_ID_SRIOV);
+			bar = pos + PCI_SRIOV_BAR + bar * 4;
+			//TODO: Get BAR size
+		}
 		dm_pci_read_config32(dev, bar,
 				     &bar_response);
 		pci_bus_start = (pci_addr_t)(bar_response & ~0xf);
@@ -1482,6 +1490,10 @@ void *dm_pci_map_bar(struct udevice *dev, int bar, size_t *size, int flags)
 		pci_bus_start |= (pci_addr_t)bar_response << 32;
 	}
 
+	if (!pdata->is_phys) {
+		pci_bus_start += (pdata->vf_id - 1) * (*size);
+	}
+
 	/*
 	 * Pass "0" as the length argument to pci_bus_to_virt.  The arg
 	 * isn't actualy used on any platform because u-boot assumes a static
diff --git a/include/pci.h b/include/pci.h
index 7850a16344..9d2ecb3dfa 100644
--- a/include/pci.h
+++ b/include/pci.h
@@ -1112,6 +1112,9 @@ struct udevice;
  * @vendor:	PCI vendor ID (see pci_ids.h)
  * @device:	PCI device ID (see pci_ids.h)
  * @class:	PCI class, 3 bytes: (base, sub, prog-if)
+ * @is_phys:	Whether device is a physical or virtual function
+ * @pdev:	Physical function for VFs
+ * @vf_id:	VF identifier
  */
 struct pci_child_platdata {
 	int devfn;
@@ -1120,7 +1123,7 @@ struct pci_child_platdata {
 	unsigned int class;
 
 	bool is_phys;
-	int pf;
+	struct udevice *pdev;
 	int vf_id;
 };
 
-- 
2.29.0

