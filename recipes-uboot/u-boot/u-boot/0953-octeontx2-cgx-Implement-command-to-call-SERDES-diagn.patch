From a21d4599cde5dff59183c1270fed56d3acd27dfc Mon Sep 17 00:00:00 2001
From: Tomasz Michalec <tomasz@marvell.com>
Date: Thu, 7 Mar 2019 19:54:56 +0100
Subject: [PATCH 0953/1239] octeontx2: cgx: Implement command to call SERDES
 diagnostic commands in ATF

Change-Id: I8d5efc979438b4bdc56540f3250cd89823456ab4
Signed-off-by: Tomasz Michalec <tomasz@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/11186
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 cmd/marvell/Makefile             |   1 +
 cmd/marvell/octeontx2_qlm_cmds.c |  61 ++++++++++++++++++
 drivers/net/octeontx2/cgx.h      |   2 +
 drivers/net/octeontx2/cgx_intf.c | 107 +++++++++++++++++++++++++------
 drivers/net/octeontx2/cgx_intf.h |  20 +++++-
 5 files changed, 169 insertions(+), 22 deletions(-)
 create mode 100644 cmd/marvell/octeontx2_qlm_cmds.c

diff --git a/cmd/marvell/Makefile b/cmd/marvell/Makefile
index dacf768f8b..95ca1ff43a 100644
--- a/cmd/marvell/Makefile
+++ b/cmd/marvell/Makefile
@@ -7,4 +7,5 @@ ifdef CONFIG_ARCH_OCTEONTX2
 obj-$(CONFIG_CMD_FAILSAFE) += octeontx2_cmds.o
 obj-$(CONFIG_CMD_ETH) += eth_cmds.o
 obj-$(CONFIG_CMD_MDIO_DBG) += mdio_dbg.o
+obj-$(CONFIG_OCTEONTX2_CGX_INTF) += octeontx2_qlm_cmds.o
 endif
diff --git a/cmd/marvell/octeontx2_qlm_cmds.c b/cmd/marvell/octeontx2_qlm_cmds.c
new file mode 100644
index 0000000000..71d391b3c4
--- /dev/null
+++ b/cmd/marvell/octeontx2_qlm_cmds.c
@@ -0,0 +1,61 @@
+// SPDX-License-Identifier:    GPL-2.0
+/*
+ * https://spdx.org/licenses
+ *
+ * Copyright (C) 2019 Marvell International Ltd.
+ */
+
+#include <common.h>
+#include <command.h>
+#include <asm/arch/atf.h>
+
+extern int cgx_intf_prbs(u8 qlm, u8 mode, u32 time);
+extern int cgx_intf_display_eye(u8 qlm, u8 lane);
+
+static int do_prbs(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	ulong time;
+	ulong mode;
+	ulong qlm;
+
+	if (argc != 4)
+		return CMD_RET_USAGE;
+
+	qlm = simple_strtoul(argv[1], NULL, 10);
+	mode = simple_strtoul(argv[2], NULL, 10);
+	time = simple_strtoul(argv[3], NULL, 10);
+
+	cgx_intf_prbs(qlm, mode, time);
+
+	return CMD_RET_SUCCESS;
+}
+
+U_BOOT_CMD(prbs,    4,    1,     do_prbs,
+	   "command to run PRBS on slected QLM",
+	   "<qlm> <mode> <time>\n"
+	   "    - run PRBS with pattern indicated by 'mode' on selected 'qlm'\n"
+	   "      PRBS will be enabled by 'time' seconds"
+);
+
+static int do_eye(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	ulong lane;
+	ulong qlm;
+
+	if (argc != 3)
+		return CMD_RET_USAGE;
+
+	qlm = simple_strtoul(argv[1], NULL, 10);
+	lane = simple_strtoul(argv[2], NULL, 10);
+
+	cgx_intf_display_eye(qlm, lane);
+
+	return CMD_RET_SUCCESS;
+}
+
+U_BOOT_CMD(eye,    3,    1,     do_eye,
+	   "command to display eye on slected QLM",
+	   "<qlm> <lane>\n"
+	   "    - run eye by 'lane'  'qlm'\n"
+);
+
diff --git a/drivers/net/octeontx2/cgx.h b/drivers/net/octeontx2/cgx.h
index 35aca56d8f..869fe10e70 100644
--- a/drivers/net/octeontx2/cgx.h
+++ b/drivers/net/octeontx2/cgx.h
@@ -100,5 +100,7 @@ void cgx_lmac_mac_filter_setup(struct lmac *lmac);
 int cgx_intf_get_link_sts(u8 cgx, u8 lmac, u64 *lnk_sts);
 int cgx_intf_link_up_dwn(u8 cgx, u8 lmac, u8 up_dwn, u64 *lnk_sts);
 int cgx_intf_get_mac_addr(u8 cgx, u8 lmac, u8 *mac);
+int cgx_intf_prbs(u8 qlm, u8 mode, u32 time);
+int cgx_intf_display_eye(u8 qlm, u8 lane);
 
 #endif /* __CGX_H__ */
diff --git a/drivers/net/octeontx2/cgx_intf.c b/drivers/net/octeontx2/cgx_intf.c
index c87d7c7321..51e954a8c3 100644
--- a/drivers/net/octeontx2/cgx_intf.c
+++ b/drivers/net/octeontx2/cgx_intf.c
@@ -103,13 +103,15 @@ static int wait_for_ownership(u8 cgx, u8 lmac)
 	return 0;
 }
 
-int cgx_intf_req(u8 cgx, u8 lmac, u8 cmd, u8 type, u64 *rsp)
+int cgx_intf_req(u8 cgx, u8 lmac, union cgx_cmd_s cmd_args, u64 *rsp,
+		 int use_cmd_id_only)
 {
 	union cgx_scratchx1 scr1;
 	union cgx_scratchx0 scr0;
 	u64 cmrx_int;
 	int timeout = 500;
 	int err = 0;
+	u8 cmd = cmd_args.cmd.id;
 
 	if (wait_for_ownership(cgx, lmac)) {
 		err = -ETIMEDOUT;
@@ -118,11 +120,13 @@ int cgx_intf_req(u8 cgx, u8 lmac, u8 cmd, u8 type, u64 *rsp)
 
 	/* send command */
 	scr1.u = cgx_rd_scr1(cgx, lmac);
-	scr1.s.cmd.id = cmd;
-	if (cmd == CGX_CMD_SET_PHY_MOD_TYPE)
-		scr1.s.phy_mod_args.mod = type;
-	if (cmd == CGX_CMD_SET_FEC)
-		scr1.s.fec_args.fec = type;
+
+	if (use_cmd_id_only) {
+		scr1.s.cmd.id = cmd;
+	} else {
+		cmd_args.own_status = scr1.s.own_status;
+		scr1.s = cmd_args;
+	}
 	cgx_wr_scr1(cgx, lmac, scr1.u);
 
 	set_ownership(cgx, lmac, CGX_OWN_FIRMWARE);
@@ -181,9 +185,11 @@ int cgx_intf_get_mac_addr(u8 cgx, u8 lmac, u8 *mac)
 {
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_GET_MAC_ADDR;
 
-	ret = cgx_intf_req(cgx, lmac,
-				CGX_CMD_GET_MAC_ADDR, 0, &scr0.u);
+	ret = cgx_intf_req(cgx, lmac, cmd, &scr0.u, 1);
 	if (ret)
 		return -1;
 
@@ -197,9 +203,11 @@ int cgx_intf_get_ver(u8 cgx, u8 lmac, u8 *ver)
 {
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
 
-	ret = cgx_intf_req(cgx, lmac,
-				CGX_CMD_GET_FW_VER, 0, &scr0.u);
+	cmd.cmd.id = CGX_CMD_GET_FW_VER;
+
+	ret = cgx_intf_req(cgx, lmac, cmd, &scr0.u, 1);
 	if (ret)
 		return -1;
 
@@ -213,9 +221,11 @@ int cgx_intf_get_link_sts(u8 cgx, u8 lmac, u64 *lnk_sts)
 {
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_GET_LINK_STS;
 
-	ret = cgx_intf_req(cgx, lmac,
-				CGX_CMD_GET_LINK_STS, 0, &scr0.u);
+	ret = cgx_intf_req(cgx, lmac, cmd, &scr0.u, 1);
 	if (ret)
 		return -1;
 
@@ -231,11 +241,11 @@ int cgx_intf_link_up_dwn(u8 cgx, u8 lmac, u8 up_dwn, u64 *lnk_sts)
 {
 	union cgx_scratchx0 scr0;
 	int ret;
-	u8 cmd;
+	union cgx_cmd_s cmd;
 
-	cmd = up_dwn ? CGX_CMD_LINK_BRING_UP : CGX_CMD_LINK_BRING_DOWN;
+	cmd.cmd.id  = up_dwn ? CGX_CMD_LINK_BRING_UP : CGX_CMD_LINK_BRING_DOWN;
 
-	ret = cgx_intf_req(cgx, lmac, cmd, 0, &scr0.u);
+	ret = cgx_intf_req(cgx, lmac, cmd, &scr0.u, 1);
 	if (ret)
 		return -1;
 
@@ -250,8 +260,30 @@ int cgx_intf_link_up_dwn(u8 cgx, u8 lmac, u8 up_dwn, u64 *lnk_sts)
 void cgx_intf_shutdown(void)
 {
 	union cgx_scratchx0 scr0;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_INTF_SHUTDOWN;
+
+	cgx_intf_req(0, 0, cmd, &scr0.u, 1);
+}
+
+int cgx_intf_prbs(u8 qlm, u8 mode, u32 time)
+{
+	union cgx_scratchx0 scr0;
+	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_PRBS;
+
+	cmd.prbs_args.qlm = qlm;
+	cmd.prbs_args.mode = mode;
+	cmd.prbs_args.time = time;
+
+	ret = cgx_intf_req(0, 0, cmd, &scr0.u, 0);
+	if (ret)
+		return -1;
 
-	cgx_intf_req(0, 0, CGX_CMD_INTF_SHUTDOWN, 0, &scr0.u);
+	return 0;
 }
 
 int cgx_intf_get_fec(struct udevice *ethdev)
@@ -260,9 +292,12 @@ int cgx_intf_get_fec(struct udevice *ethdev)
 	struct nix *nix = rvu->nix;
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_GET_SUPPORTED_FEC;
 
 	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   CGX_CMD_GET_SUPPORTED_FEC, 0, &scr0.u);
+			   cmd, &scr0.u, 1);
 	if (ret) {
 		printf("Get supported FEC failed for %s\n", ethdev->name);
 		return -1;
@@ -283,8 +318,10 @@ int cgx_intf_get_fec(struct udevice *ethdev)
 		printf("FEC_BASE_R FEC_RS\n");
 		break;
 	}
+
+	cmd.cmd.id = CGX_CMD_GET_LINK_STS;
 	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   CGX_CMD_GET_LINK_STS, 0, &scr0.u);
+			   cmd, &scr0.u, 1);
 	if (ret) {
 		printf("Get active fec failed for %s\n", ethdev->name);
 		return -1;
@@ -310,9 +347,13 @@ int cgx_intf_set_fec(struct udevice *ethdev, int type)
 	struct nix *nix = rvu->nix;
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_SET_FEC;
+	cmd.fec_args.fec = type;
 
 	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   CGX_CMD_SET_FEC, type, &scr0.u);
+			   cmd, &scr0.u, 0);
 	if (ret) {
 		printf("Set FEC type %d failed for %s\n", type, ethdev->name);
 		return -1;
@@ -326,9 +367,12 @@ int cgx_intf_get_phy_mod_type(struct udevice *ethdev)
 	struct nix *nix = rvu->nix;
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_GET_PHY_MOD_TYPE;
 
 	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   CGX_CMD_GET_PHY_MOD_TYPE, 0, &scr0.u);
+			   cmd, &scr0.u, 1);
 	if (ret) {
 		printf("Get PHYMOD type failed for %s\n", ethdev->name);
 		return -1;
@@ -344,9 +388,13 @@ int cgx_intf_set_phy_mod_type(struct udevice *ethdev, int type)
 	struct nix *nix = rvu->nix;
 	union cgx_scratchx0 scr0;
 	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_SET_PHY_MOD_TYPE;
+	cmd.phy_mod_args.mod = type;
 
 	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   CGX_CMD_SET_PHY_MOD_TYPE, type, &scr0.u);
+			   cmd, &scr0.u, 0);
 	if (ret) {
 		printf("Set PHYMOD type %d failed for %s\n", type,
 		       ethdev->name);
@@ -356,3 +404,20 @@ int cgx_intf_set_phy_mod_type(struct udevice *ethdev, int type)
 	return 0;
 }
 
+int cgx_intf_display_eye(u8 qlm, u8 lane)
+{
+	union cgx_scratchx0 scr0;
+	int ret;
+	union cgx_cmd_s cmd;
+
+	cmd.cmd.id = CGX_CMD_DISPLAY_EYE;
+
+	cmd.dsp_eye_args.qlm = qlm;
+	cmd.dsp_eye_args.lane = lane;
+
+	ret = cgx_intf_req(0, 0, cmd, &scr0.u, 0);
+	if (ret)
+		return -1;
+
+	return 0;
+}
diff --git a/drivers/net/octeontx2/cgx_intf.h b/drivers/net/octeontx2/cgx_intf.h
index ac02fe8270..46371b3986 100644
--- a/drivers/net/octeontx2/cgx_intf.h
+++ b/drivers/net/octeontx2/cgx_intf.h
@@ -72,7 +72,7 @@ enum cgx_link_speed {
 
 /* REQUEST ID types. Input to firmware */
 enum cgx_cmd_id {
-	CGX_CMD_NONE,
+	CGX_CMD_NONE = 0,
 	CGX_CMD_GET_FW_VER,
 	CGX_CMD_GET_MAC_ADDR,
 	CGX_CMD_SET_MTU,
@@ -98,6 +98,8 @@ enum cgx_cmd_id {
 	CGX_CMD_GET_ADV_FEC,
 	CGX_CMD_GET_PHY_MOD_TYPE, /* line-side modulation type: NRZ or PAM4 */
 	CGX_CMD_SET_PHY_MOD_TYPE,
+	CGX_CMD_PRBS,
+	CGX_CMD_DISPLAY_EYE,
 };
 
 /* async event ids */
@@ -332,6 +334,20 @@ struct cgx_set_phy_mod_args {
 	uint64_t reserved2:55;
 };
 
+struct cgx_prbs_args {
+	uint64_t reserved1:8; /* start from bit 8 */
+	uint64_t qlm:8;
+	uint64_t stop_on_error:1;
+	uint64_t mode:8;
+	uint64_t time:39;
+};
+
+struct cgx_display_eye_args {
+	uint64_t reserved1:8; /* start from bit 8 */
+	uint64_t qlm:8;
+	uint64_t lane:47;
+};
+
 union cgx_cmd_s {
 	uint64_t own_status:2;			/* cgx_cmd_own */
 	struct cgx_cmd cmd;
@@ -342,6 +358,8 @@ union cgx_cmd_s {
 	struct cgx_set_fec_args fec_args;
 	struct cgx_set_phy_mod_args phy_mod_args;
 	/* any other arg for command id * like : mtu, dmac filtering control */
+	struct cgx_prbs_args prbs_args;
+	struct cgx_display_eye_args dsp_eye_args;
 };
 
 union cgx_scratchx1 {
-- 
2.29.0

