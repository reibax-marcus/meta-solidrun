From a84949777a9039454d9be170b358d6d1b2785585 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Wed, 18 May 2016 22:04:19 -0400
Subject: [PATCH 0463/1239] pci: Change dm_pci_map_bar() semantics

Specifying direct config space BAR offsets works fine with
legacy-compliant devices but nowadays there are more ways to
define base addresses in the PCI specs. Advanced features like
EA and SRIOV completely redefine the way base addresses are set
so offsets aren't practical anymore. Replace them with a simple
int BAR number which can be treated the same way as in Linux
kernel

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/pci/pci-uclass.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/pci/pci-uclass.c b/drivers/pci/pci-uclass.c
index 576f4e4362..4d8e952c16 100644
--- a/drivers/pci/pci-uclass.c
+++ b/drivers/pci/pci-uclass.c
@@ -1404,11 +1404,12 @@ void *dm_pci_map_bar(struct udevice *dev, int bar, int flags)
 	ea_pos = dm_pci_find_capability(dev, PCI_CAP_ID_EA);
 
 	if (ea_pos) {
-		dm_pci_ea_bar_read(dev, (bar - PCI_BASE_ADDRESS_0) >> 2,
-				   &pci_bus_start, &pci_bus_end);
+		dm_pci_ea_bar_read(dev, bar, &pci_bus_start, &pci_bus_end);
 	} else {
 		/* read BAR address */
-		dm_pci_read_config32(dev, bar, &bar_response);
+		bar = PCI_BASE_ADDRESS_0 + bar * 4;
+		dm_pci_read_config32(dev, bar,
+				     &bar_response);
 		pci_bus_start = (pci_addr_t)(bar_response & ~0xf);
 
 		if ((bar_response & PCI_BASE_ADDRESS_MEM_TYPE_MASK) ==
-- 
2.29.0

