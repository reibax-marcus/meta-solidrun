From b01aae0afcc8637e5f15fbc8890b0f7e011cef3e Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Thu, 27 Apr 2017 15:41:59 +0800
Subject: [PATCH 0097/1239] arm64: a37xx: enable serdes lane 2 mux for SATA PHY

For Armada3700 A0 chip, comphy serdes lane 2 could be used as
PHY for SATA or USB3
For Armada3700 rev2 devel-board, bit 14 of IO expander PCA9555
with I2C address 0x22 is used as Serdes Lane 2 muxing; the pin
needs to be set in output mode: high level is for SATA while
low level is for USB3;
This patch fixes to enable serdes lane 2 mux for SATA PHY.

Change-Id: I5245e97a518091fb2f4e62929c347f9a45757822
Signed-off-by: Ken Ma <make@marvell.com>
---
 board/Marvell/mvebu_armada-37xx/board.c | 75 +++++++++++++++++++++++++
 1 file changed, 75 insertions(+)

diff --git a/board/Marvell/mvebu_armada-37xx/board.c b/board/Marvell/mvebu_armada-37xx/board.c
index bef4e1767c..6d1bea279f 100644
--- a/board/Marvell/mvebu_armada-37xx/board.c
+++ b/board/Marvell/mvebu_armada-37xx/board.c
@@ -13,12 +13,22 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
+/* on Armada3700 rev2 devel-board, IO expander (with I2C address 0x22) bit
+ * 14 is used as Serdes Lane 2 muxing, which could be used as SATA PHY or
+ * USB3 PHY.
+ */
+enum COMPHY_LANE2_MUXING {
+	COMPHY_LANE2_MUX_USB3,
+	COMPHY_LANE2_MUX_SATA
+};
+
 /* IO expander I2C device */
 #define I2C_IO_EXP_ADDR		0x22
 #define I2C_IO_CFG_REG_0	0x6
 #define I2C_IO_DATA_OUT_REG_0	0x2
 #define I2C_IO_REG_0_SATA_OFF	2
 #define I2C_IO_REG_0_USB_H_OFF	1
+#define I2C_IO_COMPHY_SATA3_USB_MUX_BIT	14
 
 /* The pin control values are the same for DB and Espressobin */
 #define PINCTRL_NB_REG_VALUE	0x000173fa
@@ -47,6 +57,68 @@ DECLARE_GLOBAL_DATA_PTR;
 #define MVEBU_G2_SMI_PHY_CMD_REG	(24)
 #define MVEBU_G2_SMI_PHY_DATA_REG	(25)
 
+/*
+* For Armada3700 A0 chip, comphy serdes lane 2 could be used as PHY for SATA
+* or USB3.
+* For Armada3700 rev2 devel-board, pin 14 of IO expander PCA9555 with I2C
+* address 0x22 is used as Serdes Lane 2 muxing; the pin needs to be set in
+* output mode: high level is for SATA while low level is for USB3;
+*/
+static int board_comphy_usb3_sata_mux(enum COMPHY_LANE2_MUXING comphy_mux)
+{
+	int ret;
+	u8 buf[8];
+	struct udevice *i2c_dev;
+	int i2c_byte, i2c_bit_in_byte;
+
+	if (!of_machine_is_compatible("marvell,armada-3720-db-v2") &&
+	    !of_machine_is_compatible("marvell,armada-3720-db-v3"))
+		return 0;
+
+	ret = i2c_get_chip_for_busnum(0, I2C_IO_EXP_ADDR, 1, &i2c_dev);
+	if (ret) {
+		printf("Cannot find PCA9555: %d\n", ret);
+		return 0;
+	}
+
+	ret = dm_i2c_read(i2c_dev, I2C_IO_CFG_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return ret;
+	}
+
+	i2c_byte = I2C_IO_COMPHY_SATA3_USB_MUX_BIT / 8;
+	i2c_bit_in_byte = I2C_IO_COMPHY_SATA3_USB_MUX_BIT % 8;
+
+	/* Configure IO exander bit 14 of address 0x22 in output mode */
+	buf[i2c_byte] &= ~(1 << i2c_bit_in_byte);
+	ret = dm_i2c_write(i2c_dev, I2C_IO_CFG_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return ret;
+	}
+
+	ret = dm_i2c_read(i2c_dev, I2C_IO_DATA_OUT_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return ret;
+	}
+
+	/* Configure output level for IO exander bit 14 of address 0x22 */
+	if (comphy_mux == COMPHY_LANE2_MUX_SATA)
+		buf[i2c_byte] |= (1 << i2c_bit_in_byte);
+	else
+		buf[i2c_byte] &= ~(1 << i2c_bit_in_byte);
+
+	ret = dm_i2c_write(i2c_dev, I2C_IO_DATA_OUT_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return ret;
+	}
+
+	return 0;
+}
+
 int board_early_init_f(void)
 {
 	return 0;
@@ -57,6 +129,9 @@ int board_init(void)
 	/* adress of boot parameters */
 	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x100;
 
+	/* enable serdes lane 2 mux for sata phy */
+	board_comphy_usb3_sata_mux(COMPHY_LANE2_MUX_SATA);
+
 	return 0;
 }
 
-- 
2.29.0

