From 861785afb3af05fcfc844255338867e2497c5bf9 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Tue, 6 Sep 2016 14:56:06 -0700
Subject: [PATCH 0519/1239] net:thunderx: Enabled RGMII support

- Followed RGMII (XCV) initialization sequence from HRM, now RGMII is working.
- Config MICREL phy, use by RGMII interface on ebb81XX boards.
- Use PHY_INTERFACE_MODE_RGMII for RGMII interface when configuring the phy.
- Revert changes committed to nic_main.c, no longer required, and some minor cleanup.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
---
 drivers/net/cavium/nic_main.c    |  42 ++++------
 drivers/net/cavium/thunder_bgx.c |   7 +-
 drivers/net/cavium/thunder_bgx.h |   3 +-
 drivers/net/cavium/thunder_xcv.c | 139 ++++++++++++++++---------------
 include/configs/thunderx_81xx.h  |   3 +-
 5 files changed, 93 insertions(+), 101 deletions(-)

diff --git a/drivers/net/cavium/nic_main.c b/drivers/net/cavium/nic_main.c
index f292f38447..ba79ffb9b9 100644
--- a/drivers/net/cavium/nic_main.c
+++ b/drivers/net/cavium/nic_main.c
@@ -97,7 +97,7 @@ static void nic_mbx_send_ready(struct nicpf *nic, int vf)
 	else
 		mbx.nic_cfg.tns_mode = NIC_TNS_BYPASS_MODE;
 
-	if (vf < MAX_LMAC) {
+	if (vf < nic->num_vf_en) {
 		bgx_idx = NIC_GET_BGX_FROM_VF_LMAC_MAP(nic->vf_lmac_map[vf]);
 		lmac = NIC_GET_LMAC_FROM_VF_LMAC_MAP(nic->vf_lmac_map[vf]);
 
@@ -117,7 +117,7 @@ static void nic_mbx_send_ready(struct nicpf *nic, int vf)
 #endif
 	mbx.nic_cfg.node_id = nic->node;
 
-	mbx.nic_cfg.loopback_supported = vf < MAX_LMAC;
+	mbx.nic_cfg.loopback_supported = vf < nic->num_vf_en;
 
 	nic_send_msg_to_vf(nic, vf, &mbx);
 }
@@ -150,7 +150,7 @@ static int nic_config_loopback(struct nicpf *nic, struct set_loopback *lbk)
 {
 	int bgx_idx, lmac_idx;
 
-	if (lbk->vf_id > MAX_LMAC)
+	if (lbk->vf_id > nic->num_vf_en)
 		return -1;
 
 	bgx_idx = NIC_GET_BGX_FROM_VF_LMAC_MAP(nic->vf_lmac_map[lbk->vf_id]);
@@ -189,7 +189,7 @@ void nic_handle_mbx_intr(struct nicpf *nic, int vf)
 	switch (mbx.msg.msg) {
 	case NIC_MBOX_MSG_READY:
 		nic_mbx_send_ready(nic, vf);
-		if (vf < MAX_LMAC) {
+		if (vf < nic->num_vf_en) {
 			nic->link[vf] = 0;
 			nic->duplex[vf] = 0;
 			nic->speed[vf] = 0;
@@ -372,15 +372,15 @@ static void nic_set_tx_pkt_pad(struct nicpf *nic, int size)
 	int lmac;
 	uint64_t lmac_cfg;
 	struct hw_info *hw = nic->hw;
-	int max_lmac = CONFIG_MAX_BGX_PER_NODE * MAX_LMAC_PER_BGX;
+	int max_lmac = nic->hw->bgx_cnt * MAX_LMAC_PER_BGX;
 
 	/* Max value that can be set is 60 */
-	if (size > 60)
-		size = 60;
+	if (size > 52)
+		size = 52;
 
 	/* CN81XX has RGX configured as FAKE BGX, adjust mac_lmac accordingly */
 	if (hw->chans_per_rgx)
-		max_lmac = (CONFIG_MAX_BGX_PER_NODE - 1) * MAX_LMAC_PER_BGX;
+		max_lmac = ((nic->hw->bgx_cnt - 1) * MAX_LMAC_PER_BGX) + 1;
 
 	for (lmac = 0; lmac < max_lmac; lmac++) {
 		lmac_cfg = nic_reg_read(nic, NIC_PF_LMAC_0_7_CFG | (lmac << 3));
@@ -424,7 +424,9 @@ static void nic_set_lmac_vf_mapping(struct nicpf *nic)
 		lmac_credit |= (0x1ff << 2);
 		lmac_credit |= (((((48 * 1024) / lmac_cnt) -
 				NIC_HW_MAX_FRS) / 16) << 12);
-		nic_reg_write(nic,
+		lmac = bgx * MAX_LMAC_PER_BGX;
+		for (; lmac < lmac_cnt + (bgx * MAX_LMAC_PER_BGX); lmac++)
+			nic_reg_write(nic,
 				NIC_PF_LMAC_0_7_CREDIT + (lmac * 8), lmac_credit);
 
 		/* On CN81XX there are only 8 VFs but max possible no of
@@ -552,25 +554,15 @@ static void nic_config_cpi(struct nicpf *nic, struct cpi_cfg_msg *cfg)
 	u32 padd, cpi_count = 0;
 	u64 cpi_base, cpi, rssi_base, rssi;
 	u8  qset, rq_idx = 0;
-	u16 sdevid;
-
-	dm_pci_read_config16(nic->udev, PCI_SUBSYSTEM_ID, &sdevid);
 
 	vnic = cfg->vf_id;
 	bgx = NIC_GET_BGX_FROM_VF_LMAC_MAP(nic->vf_lmac_map[vnic]);
 	lmac = NIC_GET_LMAC_FROM_VF_LMAC_MAP(nic->vf_lmac_map[vnic]);
 
 	chan = (lmac * hw->chans_per_lmac) + (bgx * hw->chans_per_bgx);
-	/* Check for RGX interface on CN81XX */
-	if ((sdevid == PCI_SUBSYS_DEVID_81XX_NIC_PF) && (bgx == 2)) {
-		cpi_base = (3 * NIC_MAX_CPI_PER_LMAC) + (hw->cpi_cnt / 2);
-		rssi_base = (3 * hw->rss_ind_tbl_size) + (hw->rssi_cnt / 2);
-	} else {
-		cpi_base = (lmac * NIC_MAX_CPI_PER_LMAC) +
-			(bgx * (hw->cpi_cnt / hw->bgx_cnt));
-		rssi_base = (lmac * hw->rss_ind_tbl_size) +
-			(bgx * (hw->rssi_cnt / hw->bgx_cnt));
-	}
+	cpi_base = vnic * NIC_MAX_CPI_PER_LMAC;
+	rssi_base = vnic * hw->rss_ind_tbl_size;
+
 	/* Rx channel configuration */
 	nic_reg_write(nic, NIC_PF_CHAN_0_255_RX_BP_CFG | (chan << 3),
 		      (1ull << 63) | (vnic << 0));
@@ -667,11 +659,7 @@ static void nic_tx_channel_cfg(struct nicpf *nic, u8 vnic,
 	 * 512-1023 TL4s transmit via BGX1.
 	 */
 	if (hw->tl1_per_bgx) {
-		/* Check for RGX interface on CN81XX */
-		if ((sdevid == PCI_SUBSYS_DEVID_81XX_NIC_PF) && (bgx == 2))
-			tl4 = (MAX_QUEUES_PER_QSET * 3) + (hw->tl4_cnt / 2);
-		else
-			tl4 = bgx * (hw->tl4_cnt / hw->bgx_cnt);
+		tl4 = bgx * (hw->tl4_cnt / hw->bgx_cnt);
 		if (!sq->sqs_mode) {
 			tl4 += (lmac * MAX_QUEUES_PER_QSET);
 		} else {
diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index 9d43840255..889242d687 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -33,7 +33,7 @@
 
 static const phy_interface_t if_mode[] = {
 	[QLM_MODE_SGMII]  = PHY_INTERFACE_MODE_SGMII,
-	[QLM_MODE_RGMII]  = PHY_INTERFACE_MODE_SGMII,
+	[QLM_MODE_RGMII]  = PHY_INTERFACE_MODE_RGMII,
 	[QLM_MODE_QSGMII] = PHY_INTERFACE_MODE_QSGMII,
 	[QLM_MODE_XAUI]   = PHY_INTERFACE_MODE_XAUI,
 	[QLM_MODE_RXAUI]  = PHY_INTERFACE_MODE_RXAUI,
@@ -955,7 +955,7 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 
 		lmac_type = bgx_reg_read(bgx, index, BGX_CMRX_CFG);
 		lmac->lmac_type = (lmac_type >> 8) & 0x07;
-		debug("bgx_get_qlm_mode:%d:%d: lmac_type = %d\n", bgx->bgx_id,
+		printf("bgx_get_qlm_mode:%d:%d: lmac_type = %d\n", bgx->bgx_id,
 				lmacid, lmac->lmac_type);
 
 		train_en = (readq(CSR_PA(0, GSERX_SCRATCH(lmac->qlm))) & 0xf);
@@ -1064,13 +1064,14 @@ int thunderx_bgx_probe(struct udevice *dev)
 				bgx->lmac[lmac].qlm = -1;
 			}
 		}
+		xcv_init_hw();
 		goto skip_qlm_config;
 	}
 #endif
 
 	node = node_id(bgx->reg_base);
 	bgx_idx = ((uintptr_t)bgx->reg_base >> 24) & 1;
-	bgx->bgx_id = node * CONFIG_MAX_BGX_PER_NODE + bgx_idx;
+	bgx->bgx_id = (node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx;
 
 	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac += 2) {
 		qlm[lmac + 0] = get_qlm_for_bgx(node, bgx_idx, lmac);
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index 7bd9aa179b..405b58025b 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -208,7 +208,8 @@ int bgx_get_lmac_count(int node, int bgx);
 void bgx_print_stats(int bgx_idx, int lmac);
 void bgx_set_board_info(unsigned int bgx_id, unsigned int mdio_bus,
 			unsigned int *phy_addr);
-int xcv_setup_link(bool link_up, int link_speed);
+void xcv_init_hw(void);
+void xcv_setup_link(bool link_up, int link_speed);
 
 #undef LINK_INTR_ENABLE
 
diff --git a/drivers/net/cavium/thunder_xcv.c b/drivers/net/cavium/thunder_xcv.c
index 535e69a610..942bd4a35a 100644
--- a/drivers/net/cavium/thunder_xcv.c
+++ b/drivers/net/cavium/thunder_xcv.c
@@ -37,70 +37,80 @@ struct lxcv {
 
 struct lxcv *xcv;
 
-int xcv_setup_link(bool link_up, int link_speed)
+/* Initialize XCV block */
+void xcv_init_hw(void)
 {
 	xcvx_ctl_t xcv_ctl;
 	xcvx_reset_t reset;
 	xcvx_dll_ctl_t xcv_dll_ctl;
 	xcvx_comp_ctl_t xcv_comp_ctl;
-	int speed = 2;
-	int credits;
-	int ret;
 
-	/* Now check RGMII link */
-	if (link_speed == 100)
-		speed = 1;
-	else if (link_speed == 10)
-		speed = 0;
+	/* Take the DLL out of reset */
+	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+	reset.s.dllrst = 0;
+	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
 
+	/* Take the clock tree out of reset */
 	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-	credits = link_up && !reset.s.enable;
-	xcv_ctl.u = readq(CSR_PA(0, XCVX_CTL(0)));
+	reset.s.clkrst = 0;
+	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
 
-	if (link_up && (!reset.s.enable || (xcv_ctl.s.speed != speed))) {
-		/* Enable the XCV block */
-		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-		reset.s.enable = 1;
-		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+	/* Once the 125MHz ref clock is stable, wait 10us for DLL to lock *.
+ */
+	udelay(10);
 
-		/* set operating mode */
-		xcv_ctl.u = readq(CSR_PA(0, XCVX_CTL(0)));
-		xcv_ctl.s.speed = speed;
-		writeq(xcv_ctl.u, CSR_PA(0, XCVX_CTL(0)));
+	/* Optionally, bypass the DLL setting */
+	xcv_dll_ctl.u = readq(CSR_PA(0, XCVX_DLL_CTL(0)));
+	xcv_dll_ctl.s.clkrx_set = 0;
+	xcv_dll_ctl.s.clkrx_byp = 1;
+	xcv_dll_ctl.s.clktx_byp = 0;
+	writeq(xcv_dll_ctl.u, CSR_PA(0, XCVX_DLL_CTL(0)));
 
-		/* Configure DLL - enable or bypass */
-		xcv_dll_ctl.u = readq(CSR_PA(0, XCVX_DLL_CTL(0)));
-		xcv_dll_ctl.s.clkrx_set = 0;
-		xcv_dll_ctl.s.clkrx_byp = 1;
-		xcv_dll_ctl.s.clktx_byp = 0;
-		writeq(xcv_dll_ctl.u, CSR_PA(0, XCVX_DLL_CTL(0)));
-
-		/* Enable */
-		xcv_dll_ctl.u = readq(CSR_PA(0, XCVX_DLL_CTL(0)));
-		xcv_dll_ctl.s.refclk_sel = 0;
-		writeq(xcv_dll_ctl.u, CSR_PA(0, XCVX_DLL_CTL(0)));
-		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-		reset.s.dllrst = 0;
-		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+	/* Enable the compensation controller */
+	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+	reset.s.comp = 1;
+	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
 
-		/* Delay seems to be needed so XCV_DLL_CTL[CLK_SET] works */
-		udelay(10);
+	/* Wait for 1040 reference clock cycles for the compensation state 
+	   machine lock. */
+	udelay(100); 
 
-		/* Configure compensation controller - enable or disable */
-		xcv_comp_ctl.u = readq(CSR_PA(0, XCVX_COMP_CTL(0)));
-		xcv_comp_ctl.s.drv_byp = 0;
-		writeq(xcv_comp_ctl.u, CSR_PA(0, XCVX_COMP_CTL(0)));
+	/* Enable the XCV block */
+	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+	reset.s.enable = 1;
+	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
 
-		/* Enable */
-		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-		reset.s.comp = 1;
-		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+	/* set XCV(0)_RESET[CLKRST] to 1 */
+	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+	reset.s.clkrst = 1;
+	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+}
 
-		/* setup the RXC. CLKRST must be zero for loopback */
+/* 
+ * Configure XCV link based on the speed
+ * link_up   : Set to 1 when link is up otherwise 0
+ * link_speed: The speed of the link.
+ */ 
+void xcv_setup_link(bool link_up, int link_speed)
+{
+	xcvx_ctl_t xcv_ctl;
+	xcvx_reset_t reset;
+	xcvx_comp_ctl_t xcv_comp_ctl;
+	xcvx_batch_crd_ret_t xcv_crd_ret;
+	int speed = 2;
+
+	/* Check RGMII link */
+	if (link_speed == 100)
+		speed = 1;
+	else if (link_speed == 10)
+		speed = 0;
+
+	if (link_up) {
+		/* Set operating speed */
 		xcv_ctl.u = readq(CSR_PA(0, XCVX_CTL(0)));
-		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-		reset.s.clkrst = !xcv_ctl.s.lpbk_int;
-		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+		xcv_ctl.s.speed = speed;
+		writeq(xcv_ctl.u, CSR_PA(0, XCVX_CTL(0)));
 
 		/* Datapaths come out of reset
 		   - The datapath resets will disengage BGX from the
@@ -111,33 +121,24 @@ int xcv_setup_link(bool link_up, int link_speed)
 		reset.s.tx_dat_rst_n = 1;
 		reset.s.rx_dat_rst_n = 1;
 		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
-	}
 
-	/* Enable the packet flow
-	   - The datapath resets will disengage BGX from the RGMII interface
-	   - XCV will continue to return TX credits for each tick that is sent
-	     on the TX data path */
-	reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
-	reset.s.tx_dat_rst_n = link_up;
-	reset.s.rx_dat_rst_n = link_up;
-	writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
-
-	/* Full reset when link is down */
-	if (!link_up) {
-		/* Wait 2*MTU in time */
-		mdelay(10000);
-		/* Reset the world */
-		writeq(0, CSR_PA(0, XCVX_RESET(0)));
-	}
+		/* Enable packet flow */
+		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+		reset.s.tx_pkt_rst_n = 1;
+		reset.s.rx_pkt_rst_n = 1;
+		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
 
-	/* Grant TX credits */
-	if (credits) {
-		xcvx_batch_crd_ret_t xcv_crd_ret;
 		xcv_crd_ret.u = readq(CSR_PA(0, XCVX_BATCH_CRD_RET(0)));
 		xcv_crd_ret.s.crd_ret = 1;
 		writeq(xcv_crd_ret.u, CSR_PA(0, XCVX_BATCH_CRD_RET(0)));
+	} else {
+		/* Enable packet flow */
+		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
+		reset.s.tx_pkt_rst_n = 0;
+		reset.s.rx_pkt_rst_n = 0;
+		writeq(reset.u, CSR_PA(0, XCVX_RESET(0)));
+		reset.u = readq(CSR_PA(0, XCVX_RESET(0)));
 	}
-	return 0;
 }
 
 int thunderx_xcv_probe(struct udevice *dev)
diff --git a/include/configs/thunderx_81xx.h b/include/configs/thunderx_81xx.h
index b72bac2422..fe16163ff4 100644
--- a/include/configs/thunderx_81xx.h
+++ b/include/configs/thunderx_81xx.h
@@ -148,7 +148,7 @@
 /* Net */
 /** Enable ThunderX BGX networking support */
 #define CONFIG_THUNDERX_BGX
-/* #define CONFIG_THUNDERX_XCV */
+#define CONFIG_THUNDERX_XCV
 
 /** Enable ThunderX SMI MDIO driver */
 #define CONFIG_THUNDERX_SMI
@@ -179,6 +179,7 @@
 /** Enable 10G PHY support */
 #define CONFIG_PHYLIB_10G
 #define CONFIG_PHY_VITESSE
+#define CONFIG_PHY_MICREL
 
 
 /** Command line configuration */
-- 
2.29.0

