From 6e868ed91f56a076602b0554125ab2ff4e5e08c7 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Sat, 14 May 2016 17:33:03 -0400
Subject: [PATCH 0436/1239] i2c: thunderx: Rework I2C driver to use PCI
 enumeration

This commit makes ThunderX on-chip I2C controller use
PCI enumeration. This allows seamless support for any
current and future chips using this controller

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/i2c/thunderx_i2c.c | 486 ++++++++++++++++++++-----------------
 1 file changed, 263 insertions(+), 223 deletions(-)

diff --git a/drivers/i2c/thunderx_i2c.c b/drivers/i2c/thunderx_i2c.c
index 8c0b58e459..961f962bbb 100644
--- a/drivers/i2c/thunderx_i2c.c
+++ b/drivers/i2c/thunderx_i2c.c
@@ -1,20 +1,23 @@
 
 #include <common.h>
+#include <dm.h>
 #include <i2c.h>
 #include <asm/io.h>
 #include <cavium/thunderx.h>
 
-#define MIN(x, y) ((x) < (y) ? (x) : (y))
+#define PCI_DEVICE_ID_THUNDER_TWSI	0xa012
 
-#define TWSI_BUS_FREQ 100000
-#define TWSI_THP 24
+#define TWSI_BUS_FREQ	100000
+#define TWSI_THP	24
 
-#define MIO_TWSX_SW_TWSI(num)	  (0x87E0D0001000ULL + (num << 24))
-#define MIO_TWSX_SW_TWSI_EXT(num) (0x87E0D0001018ULL + (num << 24))
+#define TWSI_SW_TWSI		0x0
+#define TWSI_TWSI_SW		0x8
+#define TWSI_INT		0x10
+#define TWSI_SW_TWSI_EXT	0x18
 
 union rst_boot {
-	uint64_t u;
-	struct rst_boot_s {
+	u64 u;
+	struct {
 		int rboot_pin:1;
 		int rboot:1;
 		int lboot:10;
@@ -38,9 +41,9 @@ union rst_boot {
 	} s;
 };
 
-union mio_twsx_sw_twsi {
-	uint64_t u;
-	struct mio_twsx_sw_twsi_s {
+union twsx_sw_twsi {
+	u64 u;
+	struct {
 		int data:32;
 		int eop_ia:3;
 		int ia:5;
@@ -56,280 +59,317 @@ union mio_twsx_sw_twsi {
 	} s;
 };
 
-union mio_twsx_sw_twsi_ext {
-	uint64_t u;
-	struct mio_twsx_sw_twsi_ext_s {
+union twsx_sw_twsi_ext {
+	u64 u;
+	struct {
 		int data:32;
 		int ia:8;
 	} s;
 };
 
-int thunderx_twsix_init(int bus)
-{
-	int io_clock_hz;
-	int N_divider;
-	int M_divider;
-	union mio_twsx_sw_twsi sw_twsi;
-	union rst_boot rst_boot;
 
-	rst_boot.u = readl(RST_BOOT);
+enum {
+	TWSI_OP_WRITE	= 0,
+	TWSI_OP_READ	= 1,
+};
 
-	io_clock_hz = rst_boot.s.pnr_mul * PLL_REF_CLK;
+enum {
+	TWSI_EOP_CLK_CTL = 3,
+	TWSI_SW_EOP_IA   = 6,
+};
 
-	/* Set the TWSI clock to a conservative TWSI_BUS_FREQ.  Compute the
-	 * clocks M divider based on the SCLK.
-	 * TWSI freq = (core freq) / (20 x (M+1) x (thp+1) x 2^N)
-	 * M = ((core freq) / (20 x (TWSI freq) x (thp+1) x 2^N)) - 1 */
-	for (N_divider = 0; N_divider < 8; N_divider++) {
-		M_divider = (io_clock_hz / (20 * TWSI_BUS_FREQ *
-					   (TWSI_THP + 1) *
-					   (1 << N_divider))) - 1;
-		if (M_divider < 16)
-			break;
-	}
+enum {
+	TWSI_SLAVEADD     = 0,
+	TWSI_DATA         = 1,
+	TWSI_CTL          = 2,
+	TWSI_CLKCTL       = 3,
+	TWSI_STAT         = 3,
+	TWSI_SLAVEADD_EXT = 4,
+	TWSI_RST          = 7,
+};
 
-	sw_twsi.u = 0;
-	sw_twsi.s.v = 1;		/* Clear valid bit */
-	sw_twsi.s.op = 0x6;		/* See EOP field */
-	sw_twsi.s.r = 0;		/* Select CLKCTL when R = 0 */
-	sw_twsi.s.eop_ia = 3;	/* R=0 selects CLKCTL, R=1 selects STAT */
-	sw_twsi.s.data = ((M_divider & 0xf) << 3) | ((N_divider & 0x7) << 0);
+enum {
+	TWSI_CTL_AAK	= BIT(2),
+	TWSI_CTL_IFLG	= BIT(3),
+	TWSI_CTL_STP	= BIT(4),
+	TWSI_CTL_STA	= BIT(5),
+	TWSI_CTL_ENAB	= BIT(6),
+	TWSI_CTL_CE	= BIT(7),
+};
 
-	/* Only init non-slave ports */
-	writeq(sw_twsi.u, MIO_TWSX_SW_TWSI(bus));
+struct thunderx_twsi {
+	int			id;
+	int			speed;
+	void			*baseaddr;
+};
 
-	return 0;
-}
+#define RST_BOOT_PNR_MUL(Val)  ((Val >> 33) & 0x1F)
 
-int64_t thunderx_twsix_rd_ia(int twsi_id, uint8_t dev_addr,
-			     uint16_t addr,
-			     int addr_len, int num_bytes)
+static u64 twsi_write_sw(void *baseaddr, union twsx_sw_twsi twsi_sw)
 {
-	union mio_twsx_sw_twsi sw_twsi_val;
-	union mio_twsx_sw_twsi_ext twsi_ext;
-	int retry_limit = 5;
-	int timeout;
-
-retry:
-	twsi_ext.u = 0;
-	sw_twsi_val.u = 0;
-	sw_twsi_val.s.v = 1;
-	sw_twsi_val.s.r = 1;
-	sw_twsi_val.s.sovr = 1;
-	sw_twsi_val.s.size = num_bytes - 1;
-	sw_twsi_val.s.addr = dev_addr;
-
-	if (addr_len > 0) {
-		sw_twsi_val.s.op = 1;
-		sw_twsi_val.s.ia = (addr >> 3) & 0x1f;
-		sw_twsi_val.s.eop_ia = addr & 0x7;
-		if (addr_len == 2) {
-			sw_twsi_val.s.eia = 1;
-			twsi_ext.s.ia = addr >> 8;
-			writeq(twsi_ext.u, MIO_TWSX_SW_TWSI_EXT(twsi_id));
-		}
-	}
+	unsigned long timeout = 50000;
 
-	writeq(sw_twsi_val.u, MIO_TWSX_SW_TWSI(twsi_id));
+	twsi_sw.s.r = 0;
+	twsi_sw.s.v = 1;
 
-	timeout = 1000;
+	writeq(twsi_sw.u, baseaddr + TWSI_SW_TWSI);
 
 	do {
-		sw_twsi_val.u = readq(MIO_TWSX_SW_TWSI(twsi_id));
-		mdelay(1);
-		timeout--;
-	} while (sw_twsi_val.s.v && retry_limit);
-
-	if (!timeout) {
-		printf("TWSI%d: Timeout waiting for operation to complete\n",
-		       twsi_id);
-		return -1;
-	}
-
-	sw_twsi_val.u = readq(MIO_TWSX_SW_TWSI(twsi_id));
-
-	if (!sw_twsi_val.s.r) {
-		/* Check the reason of the failure.
-		** Lost arbitration : 0x38, 0x68, 0xB0, 0x78
-		** Core busy as slave: 0x80, 0x88, 0xA0, 0xA8, 0xB8, 0xC0, 0xC8
-		*/
-		switch (sw_twsi_val.s.data) {
-		case 0x38:
-		case 0x68:
-		case 0xB0:
-		case 0x78:
-		case 0x80:
-		case 0x88:
-		case 0xA0:
-		case 0xA8:
-		case 0xB8:
-		case 0xC8:
-			if (retry_limit-- > 0)
-				goto retry;
-		default:
-			return -1;
-		}
-		/* For all other errors, return an error code */
-	}
+		twsi_sw.u = readq(baseaddr + TWSI_SW_TWSI);
+	} while (twsi_sw.s.v != 0 && timeout--);
 
-	return (sw_twsi_val.s.data & (0xFFFFFFFF >> (32 - num_bytes * 8)));
+	return twsi_sw.u;
 }
 
-int thunderx_twsix_wr_ia(int twsi_id, uint8_t dev_addr, uint16_t addr,
-			 int addr_len, uint64_t data, int num_bytes)
+static u64 twsi_read_sw(void *baseaddr, union twsx_sw_twsi twsi_sw)
 {
-		union mio_twsx_sw_twsi sw_twsi_val;
-		union mio_twsx_sw_twsi_ext twsi_ext;
-		int timeout;
-		int to;
-
-		twsi_ext.u = 0;
-
-		sw_twsi_val.u = 0;
-		sw_twsi_val.s.v = 1;
-		sw_twsi_val.s.sovr = 1;
-		sw_twsi_val.s.size = num_bytes - 1;
-		sw_twsi_val.s.addr = dev_addr;
-		sw_twsi_val.s.data = 0xFFFFFFFF & data;
-
-		if (addr_len > 0) {
-			sw_twsi_val.s.op = 1;
-			sw_twsi_val.s.ia = (addr >> 3) & 0x1f;
-			sw_twsi_val.s.eop_ia = addr & 0x7;
-		}
+	unsigned long timeout = 50000;
 
-		if (addr_len == 2) {
-			sw_twsi_val.s.eia = 1;
-			twsi_ext.s.ia = addr >> 8;
-		}
+	twsi_sw.s.r = 1;
+	twsi_sw.s.v = 1;
 
-		if (num_bytes > 4)
-			twsi_ext.s.data = data >> 32;
+	writeq(twsi_sw.u, baseaddr + TWSI_SW_TWSI);
 
-		writeq(twsi_ext.u, MIO_TWSX_SW_TWSI_EXT(twsi_id));
-		writeq(sw_twsi_val.u, MIO_TWSX_SW_TWSI(twsi_id));
+	do {
+		twsi_sw.u = readq(baseaddr + TWSI_SW_TWSI);
+	} while (twsi_sw.s.v != 0 && timeout--);
 
-		timeout = 1000;
+	return twsi_sw.u;
+}
 
-		do {
-			sw_twsi_val.u = readq(MIO_TWSX_SW_TWSI(twsi_id));
-			mdelay(1);
-			timeout--;
-		} while (sw_twsi_val.s.v && timeout);
+static void twsi_write_ctl(void *baseaddr, u8 data)
+{
+	union twsx_sw_twsi twsi_sw;
 
-		if (!timeout) {
-			printf("TWSI%d: Timeout waiting for operation to complete\n", twsi_id);
-			return -1;
-		}
+	twsi_sw.u = 0;
 
-		/* Poll until reads succeed, or polling times out */
-		to = 100;
-		while (to-- > 0) {
-			if (thunderx_twsix_rd_ia(twsi_id, dev_addr, 0, 1, 0) >= 0)
-				break;
-		}
-		if (to <= 0)
-			return -1;
+	twsi_sw.s.op	 = TWSI_SW_EOP_IA;
+	twsi_sw.s.eop_ia = TWSI_CTL;
+	twsi_sw.s.data	 = data;
 
-		return 0;
+	twsi_write_sw(baseaddr, twsi_sw);
 }
 
-static void thunderx_i2c_init(struct i2c_adapter *adap,
-					int speed, int slaveaddr)
+static u8 twsi_read_ctl(void *baseaddr)
 {
-	thunderx_twsix_init(adap->hwadapnr);
+	union twsx_sw_twsi twsi_sw;
+
+	twsi_sw.u	 = 0;
+	twsi_sw.s.op	 = TWSI_SW_EOP_IA;
+	twsi_sw.s.eop_ia = TWSI_CTL;
+
+	return twsi_read_sw(baseaddr, twsi_sw);
 }
 
-static int thunderx_i2c_probe(struct i2c_adapter *adap, uchar chip)
+static int twsi_wait(void *baseaddr)
 {
-	int ret;
+	unsigned int timeout = 50000;
 
-	ret = thunderx_twsix_rd_ia(adap->hwadapnr, chip, 0, 1, 1);
+	u8 twsi_ctl;
 
-	return (ret >= 0);
+	do {
+		twsi_ctl = twsi_read_ctl(baseaddr);
+		twsi_ctl &= TWSI_CTL_IFLG;
+	} while (timeout-- && !twsi_ctl);
+
+	return timeout;
 }
 
-static int thunderx_i2c_read(struct i2c_adapter *adap, uchar chip, uint addr,
-					int alen, uchar *buffer, int len)
+static void twsi_start(void *baseaddr)
 {
-	int64_t bytes;
+	twsi_write_ctl(baseaddr, TWSI_CTL_STA | TWSI_CTL_ENAB);
+}
 
-	int ret = 0, i;
-	int toread;
+static void twsi_stop(void *baseaddr)
+{
+	twsi_write_ctl(baseaddr, TWSI_CTL_STP | TWSI_CTL_ENAB);
+}
 
-	if (alen < 0 || alen > 2)
-		return -1;
+static int twsi_write_data(void *baseaddr, u8  slave_addr,
+			   u8 *buffer, unsigned int length)
+{
+	union twsx_sw_twsi twsi_sw;
+	unsigned int curr = 0;
 
-	while (len) {
-		toread = MIN(len, 4);
-		bytes = thunderx_twsix_rd_ia(adap->hwadapnr, chip, addr, alen, toread);
+	twsi_start(baseaddr);
+	twsi_wait(baseaddr);
 
-		if (bytes < 0) {
-			ret = -1;
-			break;
-		}
+	twsi_sw.u	 = 0;
+	twsi_sw.s.op	 = TWSI_SW_EOP_IA;
+	twsi_sw.s.eop_ia = TWSI_DATA;
+	twsi_sw.s.data	 = (u32) (slave_addr << 1) | TWSI_OP_WRITE;
 
-		len -= toread;
-		addr += toread;
+	twsi_write_sw(baseaddr, twsi_sw);
+	twsi_write_ctl(baseaddr, TWSI_CTL_ENAB);
 
-		for (i = 0; i < toread; i++) {
-			*buffer++ = bytes >> (3 - i) * 8;
-		}
+	twsi_wait(baseaddr);
+
+	while (curr < length) {
+		twsi_sw.u	 = 0;
+		twsi_sw.s.op	 = TWSI_SW_EOP_IA;
+		twsi_sw.s.eop_ia = TWSI_DATA;
+		twsi_sw.s.data	 = buffer[curr++];
+
+		twsi_write_sw(baseaddr, twsi_sw);
+		twsi_write_ctl(baseaddr, TWSI_CTL_ENAB);
+
+		twsi_wait(baseaddr);
 	}
 
-	return ret;
+	twsi_stop(baseaddr);
+
+	return 0;
 }
 
-static int thunderx_i2c_write(struct i2c_adapter *adap, uchar chip, uint addr,
-					int alen, uchar *buffer, int len)
+static int twsi_read_data(void *baseaddr, u8 slave_addr,
+		   u8 *buffer, unsigned int length)
 {
-	int64_t bytes;
+	union twsx_sw_twsi twsi_sw;
+	unsigned int curr = 0;
 
-	int ret = 0, i;
-	int towrite;
 
-	if (alen < 0 || alen > 2)
-		return -1;
+	twsi_start(baseaddr);
+	twsi_wait(baseaddr);
 
-	while (len) {
-		towrite = MIN(len, 8);
-		bytes = 0;
-		for (i = 0; i < towrite; i++) {
-			bytes |= *buffer << (3 - i) * 8;
-			buffer++;
-		}
+	twsi_sw.u	 = 0;
+	twsi_sw.s.op	 = TWSI_SW_EOP_IA;
+	twsi_sw.s.eop_ia = TWSI_DATA;
+
+	twsi_sw.s.data  = (u32) (slave_addr << 1) | TWSI_OP_READ;
+
+	twsi_write_sw(baseaddr, twsi_sw);
+	twsi_write_ctl(baseaddr, TWSI_CTL_ENAB);
+
+	twsi_wait(baseaddr);
 
-		bytes = thunderx_twsix_wr_ia(adap->hwadapnr, chip, addr, alen, bytes, towrite);
+	while (curr < length) {
+		twsi_write_ctl(baseaddr, TWSI_CTL_ENAB |
+				(curr < length - 1) ? TWSI_CTL_AAK : 0);
 
-		if (bytes < 0) {
-			ret = -1;
+		twsi_wait(baseaddr);
+
+		twsi_sw.u = twsi_read_sw(baseaddr, twsi_sw);
+		buffer[curr++] = twsi_sw.s.data;
+	}
+
+	twsi_stop(baseaddr);
+
+	return 0;
+}
+
+static int twsi_init(void *baseaddr, unsigned int speed)
+{
+	int io_clock_hz;
+	int n_div;
+	int m_div;
+	union twsx_sw_twsi sw_twsi;
+	union rst_boot rst_boot;
+
+	rst_boot.u = readl(RST_BOOT);
+
+	io_clock_hz = rst_boot.s.pnr_mul * PLL_REF_CLK;
+
+	/* Set the TWSI clock to a conservative TWSI_BUS_FREQ.  Compute the
+	 * clocks M divider based on the SCLK.
+	 * TWSI freq = (core freq) / (20 x (M+1) x (thp+1) x 2^N)
+	 * M = ((core freq) / (20 x (TWSI freq) x (thp+1) x 2^N)) - 1 */
+	for (n_div = 0; n_div < 8; n_div++) {
+		m_div = io_clock_hz / (20 * speed * (TWSI_THP + 1));
+		m_div /= 1 << n_div;
+		m_div -= 1;
+		if (m_div < 16)
 			break;
+	}
+
+	sw_twsi.u = 0;
+	sw_twsi.s.v = 1;		/* Clear valid bit */
+	sw_twsi.s.op = 0x6;		/* See EOP field */
+	sw_twsi.s.r = 0;		/* Select CLKCTL when R = 0 */
+	sw_twsi.s.eop_ia = 3;	/* R=0 selects CLKCTL, R=1 selects STAT */
+	sw_twsi.s.data = ((m_div & 0xf) << 3) | ((n_div & 0x7) << 0);
+
+	/* Only init non-slave ports */
+	writeq(sw_twsi.u, baseaddr + TWSI_SW_TWSI);
+
+	return 0;
+}
+
+static int thunderx_i2c_xfer(struct udevice *bus, struct i2c_msg *msg,
+			     int nmsgs)
+{
+	struct thunderx_twsi *twsi = dev_get_priv(bus);
+	int ret;
+
+	debug("thunderx_i2c_xfer: %d messages\n", nmsgs);
+	for (; nmsgs > 0; nmsgs--, msg++) {
+		debug("thunderx_i2c_xfer: chip=0x%x, len=0x%x\n",
+		      msg->addr, msg->len);
+		if (msg->flags & I2C_M_RD) {
+			ret = twsi_read_data(twsi->baseaddr, msg->addr,
+					     msg->buf, msg->len);
+		} else {
+			ret = twsi_write_data(twsi->baseaddr, msg->addr,
+					      msg->buf, msg->len);
+		}
+		if (ret) {
+			debug("thunderx_i2c_xfer: error sending\n");
+			return -EREMOTEIO;
 		}
-		len -= towrite;
-		addr += towrite;
 	}
-	return ret;
+
+	return 0;
 }
 
-static unsigned int thunderx_i2c_set_bus_speed(struct i2c_adapter *adap,
-						unsigned int speed)
+static int thunderx_i2c_set_bus_speed(struct udevice *dev, unsigned int speed)
 {
-	if (speed != adap->speed)
-		return -1;
-	return speed;
+	struct thunderx_twsi *twsi = dev_get_priv(dev);
+
+	twsi->speed = speed;
+	twsi_init(twsi->baseaddr, twsi->speed);
+
+	return 0;
 }
 
-/*
- * Register thunderx i2c adapters
- */
-U_BOOT_I2C_ADAP_COMPLETE(thunderx_0, thunderx_i2c_init, thunderx_i2c_probe,
-			 thunderx_i2c_read, thunderx_i2c_write,
-			 thunderx_i2c_set_bus_speed,
-			 CONFIG_SYS_I2C_THUNDERX_SPEED_0,
-			 CONFIG_SYS_I2C_THUNDERX_SLAVE_0, 0)
-
-U_BOOT_I2C_ADAP_COMPLETE(thunderx_1, thunderx_i2c_init, thunderx_i2c_probe,
-			 thunderx_i2c_read, thunderx_i2c_write,
-			 thunderx_i2c_set_bus_speed,
-			 CONFIG_SYS_I2C_THUNDERX_SPEED_1,
-			 CONFIG_SYS_I2C_THUNDERX_SLAVE_1, 1)
+static int thunderx_i2c_probe(struct udevice *dev)
+{
+	struct thunderx_twsi *twsi = dev_get_priv(dev);
+	pci_dev_t bdf = dm_pci_get_bdf(dev);
+
+	debug("TWSI PCI device: %x\n", bdf);
+	dev->req_seq = PCI_FUNC(bdf);
+
+	twsi->baseaddr = dm_pci_map_bar(dev, PCI_BASE_ADDRESS_0,
+					PCI_REGION_MEM);
+
+	debug("TWSI bus %d at %p\n",dev->seq, twsi->baseaddr);
+
+	twsi_init(twsi->baseaddr, TWSI_BUS_FREQ);
+
+	return 0;
+}
+
+static const struct dm_i2c_ops thunderx_i2c_ops = {
+	.xfer		= thunderx_i2c_xfer,
+	.set_bus_speed	= thunderx_i2c_set_bus_speed,
+};
+
+static const struct udevice_id thunderx_i2c_ids[] = {
+	{ .compatible = "cavium,thunderx-i2c" },
+	{ }
+};
+
+U_BOOT_DRIVER(thunderx_pci_twsi) = {
+	.name	= "i2c_thunderx",
+	.id	= UCLASS_I2C,
+	.of_match = thunderx_i2c_ids,
+	.probe	= thunderx_i2c_probe,
+	.priv_auto_alloc_size = sizeof(struct thunderx_twsi),
+	.ops	= &thunderx_i2c_ops,
+};
+
+static struct pci_device_id thunderx_pci_twsi_supported[] = {
+	{ PCI_VDEVICE(CAVIUM, PCI_DEVICE_ID_THUNDER_TWSI) },
+	{},
+};
+
+U_BOOT_PCI_DEVICE(thunderx_pci_twsi, thunderx_pci_twsi_supported);
-- 
2.29.0

