From 93cb9bf0293c34419774d287d84f7271ebc936af Mon Sep 17 00:00:00 2001
From: Ganapatrao Kulkarni <ganapatrao.kulkarni@cavium.com>
Date: Thu, 3 Nov 2016 00:06:29 +0530
Subject: [PATCH 0536/1239] 83xx, bgx: updating bgx to work with 83xx
 interfaces.

- updating bgx->max_lmac based on type if interface/qlm connected.
max_lmac count is used to decide how many lmacs from each
bgx are to be initialized (they are different for different interfaces).

- fixed issue with bgx_poll_for_link

- copied bgx_lmac_xaui_init and bgx_xaui_check_link from
linux driver (will revisit this on need basis)

- tested for XAUI and SGMII on QLM2/3.

Signed-off-by: Ganapatrao Kulkarni <ganapatrao.kulkarni@cavium.com>
---
 drivers/net/cavium/thunder_bgx.c | 266 +++++++++----------------------
 drivers/net/cavium/thunder_bgx.h |  15 ++
 2 files changed, 94 insertions(+), 187 deletions(-)

diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index 7bd73c4a52..67447d995f 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -345,17 +345,15 @@ static int bgx_lmac_sgmii_init(struct bgx *bgx, int lmacid)
 	return 0;
 }
 
-static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
+static int bgx_lmac_xaui_init(struct bgx *bgx, struct lmac *lmac)
 {
 	u64 cfg;
-	struct lmac *lmac;
-
-	lmac = &bgx->lmac[lmacid];
+	int lmacid = lmac->lmacid;
 
 	/* Reset SPU */
 	bgx_reg_modify(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_RESET);
 	if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_RESET, true)) {
-		printf("BGX SPU reset not completed\n");
+		dev_err(&bgx->pdev->dev, "BGX SPU reset not completed\n");
 		return -1;
 	}
 
@@ -366,12 +364,14 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 
 	bgx_reg_modify(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_LOW_POWER);
 	/* Set interleaved running disparity for RXAUI */
-	if (lmac->qlm_mode != QLM_MODE_RXAUI)
-		bgx_reg_modify(bgx, lmacid,
-			       BGX_SPUX_MISC_CONTROL, SPU_MISC_CTL_RX_DIS);
-	else
+	if (lmac->lmac_type == BGX_MODE_RXAUI)
 		bgx_reg_modify(bgx, lmacid, BGX_SPUX_MISC_CONTROL,
-			       SPU_MISC_CTL_RX_DIS | SPU_MISC_CTL_INTLV_RDISP);
+			       SPU_MISC_CTL_INTLV_RDISP);
+
+	/* Clear receive packet disable */
+	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_MISC_CONTROL);
+	cfg &= ~SPU_MISC_CTL_RX_DIS;
+	bgx_reg_write(bgx, lmacid, BGX_SPUX_MISC_CONTROL, cfg);
 
 	/* clear all interrupts */
 	cfg = bgx_reg_read(bgx, lmacid, BGX_SMUX_RX_INT);
@@ -400,17 +400,13 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 
 	/* Disable autoneg */
 	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_AN_CONTROL);
-	cfg = cfg & ~(SPU_AN_CTL_XNP_EN);
-	if (lmac->use_training)
-		cfg = cfg | (SPU_AN_CTL_AN_EN);
-	else
-		cfg = cfg & ~(SPU_AN_CTL_AN_EN);
+	cfg = cfg & ~(SPU_AN_CTL_AN_EN | SPU_AN_CTL_XNP_EN);
 	bgx_reg_write(bgx, lmacid, BGX_SPUX_AN_CONTROL, cfg);
 
 	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_AN_ADV);
-	if (lmac->qlm_mode == QLM_MODE_10G_KR)
+	if (lmac->lmac_type == BGX_MODE_10G_KR)
 		cfg |= (1 << 23);
-	else if (lmac->qlm_mode == QLM_MODE_40G_KR4)
+	else if (lmac->lmac_type == BGX_MODE_40G_KR)
 		cfg |= (1 << 24);
 	else
 		cfg &= ~((1 << 23) | (1 << 24));
@@ -418,10 +414,7 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 	bgx_reg_write(bgx, lmacid, BGX_SPUX_AN_ADV, cfg);
 
 	cfg = bgx_reg_read(bgx, 0, BGX_SPU_DBG_CONTROL);
-	if (lmac->use_training)
-		cfg |= SPU_DBG_CTL_AN_ARB_LINK_CHK_EN;
-	else
-		cfg &= ~SPU_DBG_CTL_AN_ARB_LINK_CHK_EN;
+	cfg &= ~SPU_DBG_CTL_AN_ARB_LINK_CHK_EN;
 	bgx_reg_write(bgx, 0, BGX_SPU_DBG_CONTROL, cfg);
 
 	/* Enable lmac */
@@ -444,6 +437,7 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 	return 0;
 }
 
+
 int __rx_equalization(int qlm, int lane)
 {
 	int max_lanes = 2;
@@ -454,12 +448,12 @@ int __rx_equalization(int qlm, int lane)
 	   This ensures the rx data is valid */
 	if (lane == -1) {
 		if (gser_poll_reg(GSER_RX_EIE_DETSTS(qlm), GSER_CDRLOCK, 0xf, (1 << max_lanes) - 1, 100)) {
-			debug("ERROR: DLM%d: CDR Lock not detected for 2 lanes\n", qlm);
+			printf("ERROR: DLM%d: CDR Lock not detected for 2 lanes\n", qlm);
 			return -1;
 		}
 	} else {
 		if (gser_poll_reg(GSER_RX_EIE_DETSTS(qlm), GSER_CDRLOCK, (0xf & (1 << lane)), (1 << lane), 100)) {
-			debug("ERROR: DLM%d: CDR Lock not detected on %d lane\n", qlm, lane);
+			printf("ERROR: DLM%d: CDR Lock not detected on %d lane\n", qlm, lane);
 			return -1;
 		}
 	}
@@ -516,30 +510,11 @@ static int bgx_xaui_check_link(struct lmac *lmac)
 	int lmac_type = lmac->lmac_type;
 	u64 cfg;
 
-	bgx_reg_modify(bgx, lmacid, BGX_SPUX_MISC_CONTROL, SPU_MISC_CTL_RX_DIS);
-
-	/* check if auto negotiation is complete */
-	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_AN_CONTROL);
-	if (cfg & SPU_AN_CTL_AN_EN) {
-		cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_AN_STATUS);
-		if (!(cfg & SPU_AN_STS_AN_COMPLETE)) {
-			/* Restart autonegotiation */
-			debug("restarting auto-neg\n");
-			bgx_reg_modify(bgx, lmacid, BGX_SPUX_AN_CONTROL, SPU_AN_CTL_AN_RESTART);
-			return -1;
-		}
-	}
-
 	if (lmac->use_training) {
 		cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_INT);
 		if (!(cfg & (1ull << 13))) {
-			debug("waiting for link training\n");
-			/* Clear the training interrupts (W1C) */
 			cfg = (1ull << 13) | (1ull << 14);
 			bgx_reg_write(bgx, lmacid, BGX_SPUX_INT, cfg);
-
-			udelay(2000);
-			/* Restart training */
 			cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_BR_PMD_CRTL);
 			cfg |= (1ull << 0);
 			bgx_reg_write(bgx, lmacid, BGX_SPUX_BR_PMD_CRTL, cfg);
@@ -547,88 +522,35 @@ static int bgx_xaui_check_link(struct lmac *lmac)
 		}
 	}
 
-	/* Perform RX Equalization. Applies to non-KR interfaces for speeds
-	   >= 6.25Gbps. */
-	if (!lmac->use_training) {
-		int qlm;
-		switch (lmac->lmac_type) {
-		default:
-		case 0: // SGMII
-		case 5: // RGMII
-		case 1: // XAUI
-			/* Nothing to do */
-			break;
-		case 4: // XLAUI
-			if (__rx_equalization(lmac->qlm, -1) ||
-				__rx_equalization(lmac->qlm+1, -1)) {
-				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d/DLM%d\n",
-					bgx->bgx_id, lmacid, lmac->qlm, lmac->qlm+1);
-				return -1;
-			}
-			break;
-		case 2: // RXAUI
-			/* RXAUI0 uses LMAC0:QLM0/QLM2 and RXAUI1 uses LMAC1:QLM1/QLM3
-			   RXAUI requires 2 lanes for each interface */
-			if (lmacid) {
-				struct lmac *l;
-				l = &bgx->lmac[2];
-				qlm = l->qlm;
-			} else {
-				qlm = lmac->qlm;
-			}
-			if (__rx_equalization(qlm, 0)) {
-				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d, Lane0\n",
-					bgx->bgx_id, lmacid, qlm);
-				return -1;
-			}
-			if (__rx_equalization(qlm, 1)) {
-				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d, Lane1\n",
-					bgx->bgx_id, lmacid, qlm);
-				return -1;
-			}
-			break;
-		case 3: // XFI
-			{
-				int lid;
-				if ((bgx->bgx_id == 0) && is_altpkg && lmacid)
-					lid = 0;
-				else if (lmacid >= 2)
-					lid = lmacid - 2;
-				else
-					lid = lmacid;
-
-				if (__rx_equalization(lmac->qlm, lid))
-					printf("BGX%d:%d: Waiting for RX Equalization on DLM%d\n",
-						bgx->bgx_id, lid, lmac->qlm);
-			}
-			break;
-		}
-	}
-
 	/* wait for PCS to come out of reset */
 	if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_RESET, true)) {
-		printf("BGX SPU reset not completed\n");
+		dev_err(&bgx->pdev->dev, "BGX SPU reset not completed\n");
 		return -1;
 	}
 
-	if ((lmac_type == 3) || (lmac_type == 4)) {
+	if ((lmac_type == BGX_MODE_10G_KR) || (lmac_type == BGX_MODE_XFI) ||
+	    (lmac_type == BGX_MODE_40G_KR) || (lmac_type == BGX_MODE_XLAUI)) {
 		if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_BR_STATUS1,
 				 SPU_BR_STATUS_BLK_LOCK, false)) {
-			printf("SPU_BR_STATUS_BLK_LOCK not completed\n");
+			dev_err(&bgx->pdev->dev,
+				"SPU_BR_STATUS_BLK_LOCK not completed\n");
 			return -1;
 		}
 	} else {
 		if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_BX_STATUS,
 				 SPU_BX_STATUS_RX_ALIGN, false)) {
-			printf("SPU_BX_STATUS_RX_ALIGN not completed\n");
+			dev_err(&bgx->pdev->dev,
+				"SPU_BX_STATUS_RX_ALIGN not completed\n");
 			return -1;
 		}
 	}
 
 	/* Clear rcvflt bit (latching high) and read it back */
-	bgx_reg_modify(bgx, lmacid, BGX_SPUX_STATUS2, SPU_STATUS2_RCVFLT);
+	if (bgx_reg_read(bgx, lmacid, BGX_SPUX_STATUS2) & SPU_STATUS2_RCVFLT)
+		bgx_reg_modify(bgx, lmacid,
+			       BGX_SPUX_STATUS2, SPU_STATUS2_RCVFLT);
 	if (bgx_reg_read(bgx, lmacid, BGX_SPUX_STATUS2) & SPU_STATUS2_RCVFLT) {
-		printf("Receive fault, retry training\n");
+		dev_err(&bgx->pdev->dev, "Receive fault, retry training\n");
 		if (lmac->use_training) {
 			cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_INT);
 			if (!(cfg & (1ull << 13))) {
@@ -645,45 +567,34 @@ static int bgx_xaui_check_link(struct lmac *lmac)
 		return -1;
 	}
 
-	/* Wait for MAC RX to be ready */
-	if (bgx_poll_reg(bgx, lmacid, BGX_SMUX_RX_CTL,
-			 SMU_RX_CTL_STATUS, true)) {
-		printf( "SMU RX link not okay\n");
-		return -1;
-	}
-
 	/* Wait for BGX RX to be idle */
 	if (bgx_poll_reg(bgx, lmacid, BGX_SMUX_CTL, SMU_CTL_RX_IDLE, false)) {
-		printf("SMU RX not idle\n");
+		dev_err(&bgx->pdev->dev, "SMU RX not idle\n");
 		return -1;
 	}
 
 	/* Wait for BGX TX to be idle */
 	if (bgx_poll_reg(bgx, lmacid, BGX_SMUX_CTL, SMU_CTL_TX_IDLE, false)) {
-		printf("SMU TX not idle\n");
+		dev_err(&bgx->pdev->dev, "SMU TX not idle\n");
 		return -1;
 	}
 
-	if (bgx_reg_read(bgx, lmacid, BGX_SPUX_STATUS2) & SPU_STATUS2_RCVFLT) {
-		printf("Receive fault\n");
-		return -1;
-	}
+	/* Check for MAC RX faults */
+	cfg = bgx_reg_read(bgx, lmacid, BGX_SMUX_RX_CTL);
+	/* 0 - Link is okay, 1 - Local fault, 2 - Remote fault */
+	cfg &= SMU_RX_CTL_STATUS;
+	if (!cfg)
+		return 0;
 
-	/* Receive link is latching low. Force it high and verify it */
-	if (!(bgx_reg_read(bgx, lmacid, BGX_SPUX_STATUS1 & SPU_STATUS1_RCV_LNK)))
-		bgx_reg_modify(bgx, lmacid, BGX_SPUX_STATUS1, SPU_STATUS1_RCV_LNK);
-	if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_STATUS1,
-			 SPU_STATUS1_RCV_LNK, false)) {
-		printf("SPU receive link down\n");
-		return -1;
-	}
+	/* Rx local/remote fault seen.
+	 * Do lmac reinit to see if condition recovers
+	 */
+	bgx_lmac_xaui_init(bgx, lmac);
 
-	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_MISC_CONTROL);
-	cfg &= ~SPU_MISC_CTL_RX_DIS;
-	bgx_reg_write(bgx, lmacid, BGX_SPUX_MISC_CONTROL, cfg);
-	return 0;
+	return -1;
 }
 
+
 int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 {
 	int ret;
@@ -696,6 +607,12 @@ int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 		return 0;
 	}
 
+	/* Receive link is latching low. Force it high and verify it */
+	bgx_reg_modify(lmac->bgx, lmac->lmacid,
+		       BGX_SPUX_STATUS1, SPU_STATUS1_RCV_LNK);
+	bgx_poll_reg(lmac->bgx, lmac->lmacid, BGX_SPUX_STATUS1,
+		     SPU_STATUS1_RCV_LNK, false);
+
 	debug("%s: %d, lmac: %d/%d/%d %p\n",
 	      __FILE__, __LINE__,
 	      node, bgx_idx, lmacid, lmac);
@@ -752,10 +669,8 @@ int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 		lmac->last_duplex = lmac->phydev->duplex;
 	} else {
 		u64 status1;
-		u64 tx_ctl;
 		u64 rx_ctl;
 		status1 = bgx_reg_read(lmac->bgx, lmac->lmacid, BGX_SPUX_STATUS1);
-		tx_ctl = bgx_reg_read(lmac->bgx, lmac->lmacid, BGX_SMUX_TX_CTL);
 		rx_ctl = bgx_reg_read(lmac->bgx, lmac->lmacid, BGX_SMUX_RX_CTL);
 
 		debug("BGX%d LMAC%d BGX_SPUX_STATUS2: %lx\n",
@@ -772,7 +687,6 @@ int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 		      (unsigned long)bgx_reg_read(lmac->bgx, lmac->lmacid, BGX_SMUX_TX_CTL));
 
 		if ((status1 & SPU_STATUS1_RCV_LNK) &&
-		    ((tx_ctl & SMU_TX_CTL_LNK_STATUS) == 0) &&
 		    ((rx_ctl & SMU_RX_CTL_STATUS) == 0)) {
 			lmac->link_up = 1;
 			if (lmac->lmac_type == 4)
@@ -784,7 +698,13 @@ int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 			lmac->link_up = 0;
 			lmac->last_speed = 0;
 			lmac->last_duplex = 0;
-			return bgx_xaui_check_link(lmac);
+		}
+
+		if (bgx_xaui_check_link(lmac)) {
+				/* Errors, clear link_up state */
+				lmac->link_up = 0;
+				lmac->last_speed = 0;
+				lmac->last_duplex = 0;
 		}
 
 		lmac->last_link = lmac->link_up;
@@ -810,7 +730,7 @@ static int bgx_lmac_enable(struct bgx *bgx, int8_t lmacid)
 	    (lmac->qlm_mode == QLM_MODE_RGMII) ||
 	    (lmac->qlm_mode == QLM_MODE_QSGMII)) {
 		if (bgx_lmac_sgmii_init(bgx, lmacid)) {
-			debug("bgx_lmac_sgmii_init failed\n");
+			printf("bgx_lmac_sgmii_init failed\n");
 			return -1;
 		}
 		cfg = bgx_reg_read(bgx, lmacid, BGX_GMP_GMI_TXX_APPEND);
@@ -818,7 +738,7 @@ static int bgx_lmac_enable(struct bgx *bgx, int8_t lmacid)
 		bgx_reg_modify(bgx, lmacid, BGX_GMP_GMI_TXX_APPEND, cfg);
 		bgx_reg_write(bgx, lmacid, BGX_GMP_GMI_TXX_MIN_PKT, 60 - 1);
 	} else {
-		if (bgx_lmac_xaui_init(bgx, lmacid, lmac->lmac_type))
+		if (bgx_lmac_xaui_init(bgx, lmac))
 			return -1;
 		cfg = bgx_reg_read(bgx, lmacid, BGX_SMUX_TX_APPEND);
 		cfg |= ((1ull << 2) | (1ull << 1)); /* FCS and PAD */
@@ -859,7 +779,7 @@ static void bgx_init_hw(struct bgx *bgx)
 	struct lmac *lmac;
 	int i, lmacid, lmac_count = 0;
 
-	for (lmacid = 0; lmacid < MAX_LMAC_PER_BGX; lmacid++) {
+	for (lmacid = 0; lmacid < bgx->max_lmac; lmacid++) {
 		lmac = &bgx->lmac[lmacid];
 
 		/* If QLM is not programmed, skip */
@@ -1010,20 +930,21 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 	struct lmac *lmac;
 	int lmacid;
 
+	bgx->max_lmac = MAX_LMAC_PER_BGX;
+
 	/* Read LMACx type to figure out QLM mode
 	 * This is configured by low level firmware
 	 */
-	for (lmacid = 0; lmacid < MAX_LMAC_PER_BGX; lmacid++) {
+	for (lmacid = 0; lmacid < bgx->max_lmac; lmacid++) {
 		int lmac_type;
 		int train_en;
-		int index = (lmacid < 2) ? 0 : 2;
 
 		lmac = &bgx->lmac[lmacid];
 
 		if (lmac->qlm == -1)
 			continue;
 
-		lmac_type = bgx_reg_read(bgx, index, BGX_CMRX_CFG);
+		lmac_type = bgx_reg_read(bgx, lmacid, BGX_CMRX_CFG);
 		lmac->lmac_type = (lmac_type >> 8) & 0x07;
 		debug("bgx_get_qlm_mode:%d:%d: lmac_type = %d\n", bgx->bgx_id,
 				lmacid, lmac->lmac_type);
@@ -1031,7 +952,8 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 		train_en = (readq(CSR_PA(0, GSERX_SCRATCH(lmac->qlm))) & 0xf);
 
 		switch(lmac->lmac_type) {
-		case 0:
+		case BGX_MODE_SGMII:
+			bgx->max_lmac = 4;
 			if (bgx->is_rgx) {
 				if (lmacid == 0) {
 					lmac->qlm_mode = QLM_MODE_RGMII;
@@ -1049,29 +971,22 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 						bgx->bgx_id, lmac->qlm, lmacid);
 			}
 			break;
-		case 1:
+		case BGX_MODE_XAUI:
+			bgx->max_lmac = 1;
 			if ((bgx->bgx_id == 0) && is_altpkg)
 				continue;
 			lmac->qlm_mode = QLM_MODE_XAUI;
-			if (lmacid != 0)
-				continue;
 			printf("BGX%d QLM%d LMAC%d mode: XAUI\n",
 					bgx->bgx_id, lmac->qlm, lmacid);
 			break;
-		case 2:
+		case BGX_MODE_RXAUI:
+			bgx->max_lmac = 2;
 			if ((bgx->bgx_id == 0) && is_altpkg)
 				continue;
 			lmac->qlm_mode = QLM_MODE_RXAUI;
-			if (index == lmacid) {
-				printf("BGX%d QLM%d LMAC%d mode: RXAUI\n",
-					bgx->bgx_id, lmac->qlm, (index ? 1 : 0));
-			}
 			break;
-		case 3:
-			if ((bgx->bgx_id == 0) && is_altpkg) {
-				if (lmacid >= 2)
-					continue;
-			}
+		case BGX_MODE_XFI:
+			bgx->max_lmac = 4;
 			if (((lmacid < 2) && (train_en & (1 << lmacid)))
 			    || (train_en & (1 << (lmacid - 2)))) {
 				lmac->qlm_mode = QLM_MODE_10G_KR;
@@ -1083,7 +998,8 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 					bgx->bgx_id, lmac->qlm, lmacid);
 			}
 			break;
-		case 4:
+		case BGX_MODE_XLAUI:
+			bgx->max_lmac = 1;
 			if ((bgx->bgx_id == 0) && is_altpkg)
 				continue;
 			if (train_en) {
@@ -1100,12 +1016,11 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 					bgx->bgx_id, lmac->qlm, lmacid);
 			}
 		break;
-		case 6:
-			if ((lmacid == 0) || (lmacid == 2)) {
-				lmac->qlm_mode = QLM_MODE_QSGMII;
-				printf("BGX%d QLM%d LMAC%d mode: QSGMII\n",
+		case BGX_MODE_QSGMII:
+			bgx->max_lmac = 4;
+			lmac->qlm_mode = QLM_MODE_QSGMII;
+			printf("BGX%d QLM%d LMAC%d mode: QSGMII\n",
 					bgx->bgx_id, lmac->qlm, lmacid);
-			}
 			break;
 		default:
 			break;
@@ -1129,13 +1044,12 @@ int thunderx_bgx_probe(struct udevice *dev)
 	int err;
 	struct bgx *bgx = dev_get_priv(dev);
 	uint8_t lmac = 0;
-	int qlm[4] = {-1};
 	int bgx_idx, node;
 	size_t size;
 
 	bgx->reg_base = dm_pci_map_bar(dev, 0, &size, PCI_REGION_MEM);
 
-	printf("%s: bgx base = %llx\n", __func__, (uint64_t)bgx->reg_base);
+	debug("%s: bgx base = %llx\n", __func__, (uint64_t)bgx->reg_base);
 	is_altpkg = alternate_pkg();
 
 #ifdef CONFIG_THUNDERX_XCV
@@ -1160,33 +1074,11 @@ int thunderx_bgx_probe(struct udevice *dev)
 	bgx_idx = ((uintptr_t)bgx->reg_base >> 24) & 3;
 	bgx->bgx_id = (node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx;
 
-/*
-	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac += 2) {
-		if (is_altpkg && (lmac == 2) && (bgx_idx == 0)) {
-			qlm[lmac - 1] = get_qlm_for_bgx(node, bgx_idx, lmac);
-			debug("qlm[%d] = %d\n", lmac, qlm[lmac-1]);
-		} else {
-			qlm[lmac + 0] = get_qlm_for_bgx(node, bgx_idx, lmac);
-			qlm[lmac + 1] = qlm[lmac];
-			debug("qlm[%d] = %d\n", lmac, qlm[lmac]);
-		}
-	}
-*/
-	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac++) {
-		qlm[lmac] = get_qlm_for_bgx(node, bgx_idx, lmac);
-	}
-
-#if 0
-	/* A BGX can take 1 or 2 DLMs, if both the DLMs are not configured
-	   as BGX, then return, nothing to initialize */
-	if ((qlm[0] == -1) && (qlm[2] == -1))
-		return -ENODEV;
-#endif
-
 	/* MAP configuration registers */
 	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac++) {
-		bgx->lmac[lmac].qlm = qlm[lmac];
+		bgx->lmac[lmac].qlm = get_qlm_for_bgx(node, bgx_idx, lmac);;
 		bgx->lmac[lmac].lmacid = lmac;
+		debug("qlm[%d] =%d \n", lmac, bgx->lmac[lmac].qlm);
 	}
 
 #ifdef CONFIG_THUNDERX_XCV
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index 405b58025b..c62a5f3123 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -229,4 +229,19 @@ struct bgx_board_info {
 	unsigned int mdio_bus;
 	unsigned int phy_addr[MAX_LMAC_PER_BGX];
 };
+
+enum LMAC_TYPE {
+	BGX_MODE_SGMII = 0, /* 1 lane, 1.250 Gbaud */
+	BGX_MODE_XAUI = 1,  /* 4 lanes, 3.125 Gbaud */
+	BGX_MODE_DXAUI = 1, /* 4 lanes, 6.250 Gbaud */
+	BGX_MODE_RXAUI = 2, /* 2 lanes, 6.250 Gbaud */
+	BGX_MODE_XFI = 3,   /* 1 lane, 10.3125 Gbaud */
+	BGX_MODE_XLAUI = 4, /* 4 lanes, 10.3125 Gbaud */
+	BGX_MODE_10G_KR = 3,/* 1 lane, 10.3125 Gbaud */
+	BGX_MODE_40G_KR = 4,/* 4 lanes, 10.3125 Gbaud */
+	BGX_MODE_RGMII = 5,
+	BGX_MODE_QSGMII = 6,
+	BGX_MODE_INVALID = 7,
+};
+
 #endif /* THUNDER_BGX_H */
-- 
2.29.0

