From 9b525f0d2fcacf090b44a53634a8fc5df58fe72c Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <sergey.temerkhanov@auriga.com>
Date: Fri, 13 Mar 2015 18:45:19 +0300
Subject: [PATCH 0301/1239] armv8: cavium: Add the "vnic" command for adding
 MAC address ranges to the "ethernet-macs" node

---
 board/cavium/thunderx/Makefile   |   7 ++
 board/cavium/thunderx/cmd_vnic.c | 129 +++++++++++++++++++++++++++++++
 2 files changed, 136 insertions(+)
 create mode 100644 board/cavium/thunderx/cmd_vnic.c

diff --git a/board/cavium/thunderx/Makefile b/board/cavium/thunderx/Makefile
index 3d963b2359..e3992682ce 100644
--- a/board/cavium/thunderx/Makefile
+++ b/board/cavium/thunderx/Makefile
@@ -5,3 +5,10 @@
 
 obj-y	:= thunderx.o atf.o
 obj-$(CONFIG_OF_LIBFDT) += fdt.o psci.o powerburn_dp.o
+
+ccflags-y += -Icsr/include
+obj-y	+= hal/
+
+obj-$(CONFIG_SATA_AHCI) += sata.o
+obj-$(CONFIG_PCI) += pcie.o
+obj-$(CONFIG_CMD_VNIC) += cmd_vnic.o
diff --git a/board/cavium/thunderx/cmd_vnic.c b/board/cavium/thunderx/cmd_vnic.c
new file mode 100644
index 0000000000..504d1ccf05
--- /dev/null
+++ b/board/cavium/thunderx/cmd_vnic.c
@@ -0,0 +1,129 @@
+/** @file
+#
+#  Copyright (c) 2014, Cavium Inc. All rights reserved.<BR>
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#**/
+
+#include <common.h>
+#include <asm/io.h>
+#include <net.h>
+
+#include <malloc.h>
+#include <cavium/atf.h>
+
+#include <libfdt.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+extern struct fdt_header *working_fdt;
+
+struct mac_range {
+	unsigned char	enetaddr[6];
+	uint32_t		size;
+} __attribute__((packed));
+
+int do_vnic(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	int ret, len, i;
+	unsigned int node;
+
+	struct mac_range range;
+	struct mac_range *rangep;
+
+	char nodename[25];
+	int nodeoffset;
+
+	if ((argc == 5) && !strcmp(argv[1], "addmac")) {
+		rangep = &range;
+		node = simple_strtoul(argv[2], NULL, 10);
+
+		if (node > atf_node_count()) {
+			printf("Invalid node number\n");
+			return 0;
+		}
+
+		eth_parse_enetaddr(argv[3], rangep->enetaddr);
+
+		if (!is_valid_ethaddr(rangep->enetaddr)) {
+			printf("Invalid MAC address\n");
+			return 0;
+		}
+
+		rangep->size = simple_strtoul(argv[4], NULL, 10);
+		rangep->size = cpu_to_fdt32(rangep->size);
+
+		snprintf(nodename, sizeof(nodename), "/ethernet-macs/node%d", node);
+
+		nodeoffset = fdt_path_offset(working_fdt, nodename);
+
+		if (nodeoffset < 0) {
+			printf("WARNING: could not find %s: %s.\n", nodename,
+						fdt_strerror(nodeoffset));
+		}
+
+		ret = fdt_appendprop(working_fdt, nodeoffset, "mac",
+									rangep, sizeof(struct mac_range));
+
+		if (ret < 0) {
+			printf("WARNING: could not add the ethernet address %pM: %s.\n",
+						rangep->enetaddr, fdt_strerror(ret));
+			return 0;
+		}
+	} else if ((argc == 3) && !strcmp(argv[1], "listmacs")) {
+		node = simple_strtoul(argv[2], NULL, 10);
+
+		if (node > atf_node_count()) {
+			printf("Invalid node number\n");
+			return 0;
+		}
+
+		snprintf(nodename, sizeof(nodename), "/ethernet-macs/node%d", node);
+
+		nodeoffset = fdt_path_offset(working_fdt, nodename);
+
+		if (nodeoffset < 0) {
+			printf("WARNING: could not find %s: %s.\n", nodename,
+						fdt_strerror(nodeoffset));
+		}
+
+		rangep = (void *)fdt_getprop(working_fdt, nodeoffset, "mac", &len);
+
+		if (len < 0) {
+			printf("WARNING: could not get the property: %s.\n", fdt_strerror(len));
+			return 0;
+		}
+
+		debug("len: %d, sizeof(struct mac_range): %ld\n",
+				len, sizeof(struct mac_range));
+
+		if (len % sizeof(struct mac_range)) {
+			printf("Invalid property length %d\n", len);
+			return 0;
+		}
+
+		printf("MAC\t\tSize\n");
+
+		for (i = 0; i < len / sizeof(struct mac_range); i++) {
+			printf("%pM\t%u\n", rangep[i].enetaddr, fdt32_to_cpu(rangep[i].size));
+		}
+
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+U_BOOT_CMD(
+	vnic,   10,   1,     do_vnic,
+	"VNIC related commands",
+	"\t addmac node mac size - add a MAC address range\n"
+	"\t listmacs node        - list MAC address ranges\n"
+);
-- 
2.29.0

