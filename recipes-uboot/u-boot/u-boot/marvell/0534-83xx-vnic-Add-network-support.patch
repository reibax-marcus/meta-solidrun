From 22579e784cdef6977bef125be3604af5accf7565 Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <rchintakuntla@cavium.com>
Date: Wed, 26 Oct 2016 16:18:03 -0400
Subject: [PATCH 0534/1239] 83xx: vnic: Add network support

Add network support. There is still work to be done on programming right
LMAC count so that we don't detect bogus interfaces.

Also BGX-QLM mapping will need work to support all chips.

Signed-off-by: Radha Mohan Chintakuntla <rchintakuntla@cavium.com>
---
 drivers/net/cavium/nic_main.c    | 10 +++++++---
 drivers/net/cavium/thunder_bgx.c | 33 ++++++++++++++++++++++++++++----
 include/configs/thunderx_83xx.h  |  6 +++---
 3 files changed, 39 insertions(+), 10 deletions(-)

diff --git a/drivers/net/cavium/nic_main.c b/drivers/net/cavium/nic_main.c
index ba79ffb9b9..1eeaf81805 100644
--- a/drivers/net/cavium/nic_main.c
+++ b/drivers/net/cavium/nic_main.c
@@ -761,15 +761,19 @@ exit:
 int thunderx_nic_probe(struct udevice *dev)
 {
 	int vf;
-	int num_vfs;
+	int ret;
 	struct nicpf *nicpf;
 
 	nic_initialize(dev);
 	nicpf = dev_get_priv(dev);
 
-	num_vfs = pci_sriov_init(dev, nicpf->num_vf_en);
+	ret = pci_sriov_init(dev, nicpf->num_vf_en);
+	if(ret < 0) {
+		printf("enabling SRIOV failed for num VFs %d",nicpf->num_vf_en);
+		return ret;
+	}
 
-	for (vf = 0; vf < num_vfs; vf++) {
+	for (vf = 0; vf < nicpf->num_vf_en; vf++) {
 		 nicvf_initialize(dev, vf);
 	}
 
diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index 297b988207..7bd73c4a52 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -256,11 +256,28 @@ void bgx_lmac_internal_loopback(int node, int bgx_idx,
 /* Return the DLM used for the BGX */
 static int get_qlm_for_bgx(int node, int bgx_id, int index)
 {
-	int qlm = (bgx_id) ? 2 : 0;
+	int qlm = -1;
 	uint64_t cfg;
 
-	qlm += (index >= 2) ? 1 : 0;
-	cfg = readq(CSR_PA(node, GSERX_CFG(qlm))) & GSERX_CFG_BGX;
+	switch(bgx_id) {
+		case 0:
+			qlm = 2;
+			cfg = readq(CSR_PA(node, GSERX_CFG(qlm))) & GSERX_CFG_BGX;
+			break;
+		case 1: 
+			qlm = 3;
+			cfg = readq(CSR_PA(node, GSERX_CFG(qlm))) & GSERX_CFG_BGX;
+			break;
+		case 2:
+			qlm = 6;
+			cfg = readq(CSR_PA(node, GSERX_CFG(qlm))) & GSERX_CFG_BGX;
+			break;
+		case 3:
+			qlm = 4;
+			cfg = readq(CSR_PA(node, GSERX_CFG(qlm))) & GSERX_CFG_BGX;
+			break;
+	}
+
 	debug("get_qlm_for_bgx:qlm%d: cfg = %lld\n", qlm, cfg);
 
 	/* Check if DLM is configured as BGX# */
@@ -1118,6 +1135,7 @@ int thunderx_bgx_probe(struct udevice *dev)
 
 	bgx->reg_base = dm_pci_map_bar(dev, 0, &size, PCI_REGION_MEM);
 
+	printf("%s: bgx base = %llx\n", __func__, (uint64_t)bgx->reg_base);
 	is_altpkg = alternate_pkg();
 
 #ifdef CONFIG_THUNDERX_XCV
@@ -1139,9 +1157,10 @@ int thunderx_bgx_probe(struct udevice *dev)
 #endif
 
 	node = node_id(bgx->reg_base);
-	bgx_idx = ((uintptr_t)bgx->reg_base >> 24) & 1;
+	bgx_idx = ((uintptr_t)bgx->reg_base >> 24) & 3;
 	bgx->bgx_id = (node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx;
 
+/*
 	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac += 2) {
 		if (is_altpkg && (lmac == 2) && (bgx_idx == 0)) {
 			qlm[lmac - 1] = get_qlm_for_bgx(node, bgx_idx, lmac);
@@ -1152,11 +1171,17 @@ int thunderx_bgx_probe(struct udevice *dev)
 			debug("qlm[%d] = %d\n", lmac, qlm[lmac]);
 		}
 	}
+*/
+	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac++) {
+		qlm[lmac] = get_qlm_for_bgx(node, bgx_idx, lmac);
+	}
 
+#if 0
 	/* A BGX can take 1 or 2 DLMs, if both the DLMs are not configured
 	   as BGX, then return, nothing to initialize */
 	if ((qlm[0] == -1) && (qlm[2] == -1))
 		return -ENODEV;
+#endif
 
 	/* MAP configuration registers */
 	for (lmac = 0; lmac < MAX_LMAC_PER_BGX; lmac++) {
diff --git a/include/configs/thunderx_83xx.h b/include/configs/thunderx_83xx.h
index 56be0c22a6..10d6eabab8 100644
--- a/include/configs/thunderx_83xx.h
+++ b/include/configs/thunderx_83xx.h
@@ -148,13 +148,13 @@
 
 /* Net */
 /** Enable ThunderX BGX networking support */
-//#define CONFIG_THUNDERX_BGX
+#define CONFIG_THUNDERX_BGX
 
 /** Enable ThunderX SMI MDIO driver */
-//#define CONFIG_THUNDERX_SMI
+#define CONFIG_THUNDERX_SMI
 
 /** Enable ThunderX VNIC driver support */
-//#define CONFIG_THUNDERX_VNIC
+#define CONFIG_THUNDERX_VNIC
 
 /** Generate a random MAC address if it is not already defined */
 #define CONFIG_RANDOM_MACADDR
-- 
2.29.0

