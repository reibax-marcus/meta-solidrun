From 0393493d7bc03aab6c1f449eeedab92dc2bdc5e8 Mon Sep 17 00:00:00 2001
From: zachary zhang <zhangzg@marvell.com>
Date: Mon, 21 Aug 2017 14:51:30 +0800
Subject: [PATCH 0119/1239] efuse: mvebu: use High density efuse operation

The A38x SoC uses internally the same High Density (HD) efuses as the
A8K SoC.
This patch is to use hd efuse operation to replace A38x efuse operation
and support ap806 hd efuse rows read/write action.

Change-Id: I767fcb0370e094c46316fb71838293d426f25c0f
Signed-off-by: zachary zhang <zhangzg@marvell.com>
---
 arch/arm/dts/armada-388-gp.dts |   1 +
 arch/arm/dts/armada-38x.dtsi   |   2 +-
 arch/arm/mach-mvebu/Kconfig    |  17 --
 drivers/fuse/Kconfig           |   2 +-
 drivers/fuse/Makefile          |   4 +-
 drivers/fuse/fuse-mvebu-hd.c   | 112 ++++++++++++
 drivers/fuse/fuse-mvebu-init.c |  33 ++++
 drivers/fuse/fuse-mvebu.c      | 305 +++++++++++++--------------------
 include/mvebu/fuse-mvebu.h     |  49 ++++--
 9 files changed, 301 insertions(+), 224 deletions(-)
 create mode 100644 drivers/fuse/fuse-mvebu-hd.c
 create mode 100644 drivers/fuse/fuse-mvebu-init.c

diff --git a/arch/arm/dts/armada-388-gp.dts b/arch/arm/dts/armada-388-gp.dts
index 3552384c3a..babd581ed6 100644
--- a/arch/arm/dts/armada-388-gp.dts
+++ b/arch/arm/dts/armada-388-gp.dts
@@ -55,6 +55,7 @@
 		ethernet0 = &eth0;
 		ethernet1 = &eth1;
 		spi0 = &spi0;
+		fuse0 = &efuse;
 	};
 
 	memory {
diff --git a/arch/arm/dts/armada-38x.dtsi b/arch/arm/dts/armada-38x.dtsi
index ed74343221..3193070da7 100644
--- a/arch/arm/dts/armada-38x.dtsi
+++ b/arch/arm/dts/armada-38x.dtsi
@@ -592,7 +592,7 @@
 			};
 
 			efuse: efuse@f9000 {
-				compatible = "marvell,a38x-efuse";
+				compatible = "marvell,mvebu-fuse-hd";
 				reg = <0xe4008 0x4>;
 				otp-mem = <0xf60f9000>;
 				rows-count = <64>;
diff --git a/arch/arm/mach-mvebu/Kconfig b/arch/arm/mach-mvebu/Kconfig
index cdc5ae677c..13a0a57674 100644
--- a/arch/arm/mach-mvebu/Kconfig
+++ b/arch/arm/mach-mvebu/Kconfig
@@ -245,23 +245,6 @@ config MVEBU_SPL_BOOT_DEVICE_UART
 
 endchoice
 
-config MVEBU_EFUSE
-	bool "Enable eFuse support"
-	default n
-	depends on HAVE_MVEBU_EFUSE
-	help
-	  Enable support for reading and writing eFuses on mvebu SoCs.
-
-config MVEBU_EFUSE_FAKE
-	bool "Fake eFuse access (dry run)"
-	default n
-	depends on MVEBU_EFUSE
-	help
-	  This enables a "dry run" mode where eFuses are not really programmed.
-	  Instead the eFuse accesses are emulated by writing to and reading
-	  from a memory block.
-	  This is can be used for testing prog scripts.
-
 config SECURED_MODE_IMAGE
 	bool "Build image for trusted boot"
 	default false
diff --git a/drivers/fuse/Kconfig b/drivers/fuse/Kconfig
index cdd87c7d67..02a90b8f6f 100644
--- a/drivers/fuse/Kconfig
+++ b/drivers/fuse/Kconfig
@@ -12,7 +12,7 @@ config MVEBU_EFUSE
 	  This enable mvebu efuse driver.
 	  It supports for reading and writing eFuses.
 	  This efuse driver supports marvell
-	  a38x SoC chips.
+	  a38x and a7k/8k SoC chips.
 
 config MVEBU_EFUSE_FAKE
 	bool "Fake eFuse access (dry run)"
diff --git a/drivers/fuse/Makefile b/drivers/fuse/Makefile
index 2dfef5fd49..50128201ce 100644
--- a/drivers/fuse/Makefile
+++ b/drivers/fuse/Makefile
@@ -1 +1,3 @@
-obj-$(CONFIG_MVEBU_EFUSE) += fuse-mvebu.o
\ No newline at end of file
+obj-$(CONFIG_MVEBU_EFUSE) += fuse-mvebu.o
+obj-$(CONFIG_MVEBU_EFUSE) += fuse-mvebu-hd.o
+obj-$(CONFIG_ARMADA_38X) += fuse-mvebu-init.o
diff --git a/drivers/fuse/fuse-mvebu-hd.c b/drivers/fuse/fuse-mvebu-hd.c
new file mode 100644
index 0000000000..e1c508d3ca
--- /dev/null
+++ b/drivers/fuse/fuse-mvebu-hd.c
@@ -0,0 +1,112 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * https://spdx.org/licenses
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <errno.h>
+#include <mvebu/fuse-mvebu.h>
+
+#define GET_LEN(width)  DIV_ROUND_UP(width, 32)
+#define ROW_WORDS_LEN	3
+#define ECC_BITS_MASK	0xfe000000
+
+static int valid_prog_words;
+static u32 prog_val[ROW_WORDS_LEN];
+
+int mvebu_efuse_hd_read(struct udevice *dev, int row_id, u32 *val)
+{
+	void __iomem *otp_mem;
+	int row_base, i, row_widths;
+	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
+
+	row_base = priv->row_base;
+	otp_mem = priv->target_otp_mem + (row_id - row_base) *
+		   priv->pdata->row_step;
+	row_widths = priv->pdata->row_bit_width;
+
+	for (i = 0; i < GET_LEN(row_widths); i++)
+		*(val + i) = readl(otp_mem + 4 * i);
+
+	return 0;
+}
+
+static int do_mvebu_efuse_hd_prog(struct udevice *dev, int row_id, u32 *new_val)
+{
+	void __iomem *otp_mem, *ctrl_reg;
+	int row_base, i, row_widths;
+	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
+	u32 fuse_read_value[ROW_WORDS_LEN];
+
+	row_base = priv->row_base;
+	otp_mem = priv->target_otp_mem + (row_id - row_base) *
+		   priv->pdata->row_step;
+	ctrl_reg = priv->control_reg;
+	row_widths = priv->pdata->row_bit_width;
+
+	/* only write a fuse line with lock bit */
+	if (!(*(new_val + 2) & 0x1))
+		return -EINVAL;
+	/* according to specs ECC protection bits must be 0 on write */
+	if (*(new_val + 1) & ECC_BITS_MASK)
+		return -EINVAL;
+
+	/* enable fuse prog */
+#ifndef DRY_RUN
+	setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+#else
+	/* avoid build warning for enable DRY_RUN */
+	ctrl_reg = ctrl_reg;
+#endif
+	/* read fuse row value before burn fuse */
+	for (i = 0; i < GET_LEN(row_widths); i++)
+		fuse_read_value[i] = readl(otp_mem + 4 * i);
+	/* fuse row value burn */
+	for (i = 0; i < GET_LEN(row_widths); i++) {
+		fuse_read_value[i] |= *(new_val + i);
+		writel(fuse_read_value[i], otp_mem + 4 * i);
+	}
+
+	/* wait 1 ms for burn efuse */
+	mdelay(1);
+
+	/* Disable efuse write */
+#ifndef DRY_RUN
+	clrbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+#endif
+	return 0;
+}
+
+int mvebu_efuse_hd_prog(struct udevice *dev, int word, int row_id, u32 new_val)
+{
+	int res = 0;
+
+	if (word < ROW_WORDS_LEN - 1) {
+		prog_val[word] = new_val;
+		valid_prog_words |= (1 << word);
+	}
+
+	if (word == ROW_WORDS_LEN - 1) {
+		if ((valid_prog_words & 3) == 0 && new_val) {
+			prog_val[0] = 0;
+			prog_val[1] = 0;
+			/* lock bit is set to 1*/
+			prog_val[2] = 1;
+			res = do_mvebu_efuse_hd_prog(dev, row_id, prog_val);
+			valid_prog_words = 0;
+		} else if ((valid_prog_words & 3) == 3 && new_val) {
+			prog_val[ROW_WORDS_LEN - 1] = new_val;
+			res = do_mvebu_efuse_hd_prog(dev, row_id, prog_val);
+			valid_prog_words = 0;
+		} else {
+			res = -EINVAL;
+			valid_prog_words = 0;
+		}
+	}
+
+	return res;
+}
diff --git a/drivers/fuse/fuse-mvebu-init.c b/drivers/fuse/fuse-mvebu-init.c
new file mode 100644
index 0000000000..b487ac6c12
--- /dev/null
+++ b/drivers/fuse/fuse-mvebu-init.c
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ * Copyright (C) 2015-2016 Reinhard Pfau <reinhard.pfau@gdsys.cc>
+ *
+ * https://spdx.org/licenses
+ */
+
+#include <config.h>
+#include <common.h>
+#include <asm/arch/cpu.h>
+#include <linux/mbus.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <errno.h>
+#include <mvebu/fuse-mvebu.h>
+
+#define MBUS_EFUSE_SIZE BIT(20)
+#define EFUSE_ADDR_MASK	0xff000000
+
+int mvebu_efuse_init_hw(struct udevice *dev)
+{
+	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
+	int ret = 0;
+	phys_addr_t efuse_base;
+
+	efuse_base = (phys_addr_t)priv->target_otp_mem & EFUSE_ADDR_MASK;
+
+	ret = mvebu_mbus_add_window_by_id(CPU_TARGET_SATA23_DFX,
+					  0xA, efuse_base, MBUS_EFUSE_SIZE);
+
+	return ret;
+}
diff --git a/drivers/fuse/fuse-mvebu.c b/drivers/fuse/fuse-mvebu.c
index b1a247e74d..b15b0f5233 100644
--- a/drivers/fuse/fuse-mvebu.c
+++ b/drivers/fuse/fuse-mvebu.c
@@ -10,224 +10,111 @@
 #include <asm/io.h>
 #include <asm/arch/cpu.h>
 #include <asm/arch/soc.h>
-#include <linux/mbus.h>
-#include <dm/device.h>
 #include <dm.h>
 #include <fdt_support.h>
 #include <mvebu/fuse-mvebu.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
-#if defined(CONFIG_MVEBU_EFUSE_FAKE)
-#define DRY_RUN
-#else
-#undef DRY_RUN
-#endif
-
-#define MBUS_EFUSE_SIZE		BIT(20)
-#define EFUSE_ROW_REG_WIDTH	16
-
-enum {
-	MVEBU_EFUSE_CTRL_PROGRAM_ENABLE = (1 << 31),
-};
-
-struct mvebu_fuse_block_data {
-	unsigned int	row_num;
-	void	*control_reg;
-	void	*target_otp_mem;
-};
+#define GET_LEN(width)  DIV_ROUND_UP(width, 32)
 
-static struct mvebu_fuse_block_data efuse_data;
+static int row_index;
 
-static void enable_efuse_program(void)
+static int get_fuse_device(u32 bank, struct udevice **devp)
 {
-#ifndef DRY_RUN
-	setbits_le32(efuse_data.control_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-#endif
-}
-
-static void disable_efuse_program(void)
-{
-#ifndef DRY_RUN
-	clrbits_le32(efuse_data.control_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-#endif
-}
-
-static int do_prog_efuse(int nr, struct efuse_val *new_val,
-			 u32 mask0, u32 mask1)
-{
-	struct efuse_val val;
-	void __iomem *otp_mem;
-
-	otp_mem = efuse_data.target_otp_mem + EFUSE_ROW_REG_WIDTH * nr;
-
-	/* read efuse row value before burn */
-	val.dwords.d[0] = readl(otp_mem);
-	val.dwords.d[1] = readl(otp_mem + 4);
-	val.lock = readl(otp_mem + 8);
-
-	if (val.lock & 1)
-		return -EPERM;
-
-	val.dwords.d[0] |= (new_val->dwords.d[0] & mask0);
-	val.dwords.d[1] |= (new_val->dwords.d[1] & mask1);
-	val.lock |= new_val->lock;
-
-	writel(val.dwords.d[0], otp_mem);
-	mdelay(1);
-	writel(val.dwords.d[1], otp_mem + 4);
-	mdelay(1);
-	writel(val.lock, otp_mem + 8);
-	mdelay(5);
+	struct mvebu_fuse_block_data *priv;
+	struct udevice *dev;
+
+	for (uclass_first_device(UCLASS_MISC, &dev); dev;
+	     uclass_next_device(&dev)) {
+		if ((device_is_compatible(dev, "marvell,mvebu-fuse-hd"))) {
+			priv = dev_get_priv(dev);
+			if (bank >= priv->row_base &&
+			    bank < priv->row_base + priv->row_num) {
+				*devp = dev;
+				break;
+			}
+		}
+	}
 
 	return 0;
 }
 
-static int prog_efuse(int nr, struct efuse_val *new_val, u32 mask0, u32 mask1)
+int fuse_read(u32 bank, u32 word, u32 *val)
 {
 	int res = 0;
+	u32 *fuse_data;
+	struct udevice *dev = NULL;
+	struct mvebu_fuse_block_data *priv;
+	const struct fuse_ops *ops;
+	int row_widths;
 
-	if (!new_val)
+	if (bank < 0 || bank >= row_index)
 		return -EINVAL;
 
-	/* only write a fuse line with lock bit */
-	if (!new_val->lock)
-		return -EINVAL;
-
-	/* according to specs ECC protection bits must be 0 on write */
-	if (new_val->bytes.d[7] & 0xFE)
-		return -EINVAL;
-
-	if (!new_val->dwords.d[0] && !new_val->dwords.d[1] && (mask0 | mask1))
-		return 0;
-
-	enable_efuse_program();
-
-	res = do_prog_efuse(nr, new_val, mask0, mask1);
-
-	disable_efuse_program();
-
-	return res;
-}
-
-int mvebu_efuse_init_hw(unsigned long efuse_base)
-{
-	int ret;
-
-	ret = mvebu_mbus_add_window_by_id(CPU_TARGET_SATA23_DFX,
-					  0xA, efuse_base, MBUS_EFUSE_SIZE);
-
-	if (ret)
-		return ret;
-
-	return 0;
-}
-
-int mvebu_read_efuse(int nr, struct efuse_val *val)
-{
-	void __iomem *otp_mem;
-
-	otp_mem = efuse_data.target_otp_mem + EFUSE_ROW_REG_WIDTH * nr;
-
-	val->dwords.d[0] = readl(otp_mem);
-	val->dwords.d[1] = readl(otp_mem + 4);
-	val->lock = readl(otp_mem + 8);
-
-	return 0;
-}
-
-int mvebu_write_efuse(int nr, struct efuse_val *val)
-{
-	return prog_efuse(nr, val, ~0, ~0);
-}
+	res = get_fuse_device(bank, &dev);
+	if (res)
+		return res;
 
-int mvebu_lock_efuse(int nr)
-{
-	struct efuse_val val = {
-		.lock = 1,
-	};
+	priv = dev_get_priv(dev);
+	ops = device_get_ops(dev);
+	row_widths = priv->pdata->row_bit_width;
 
-	return prog_efuse(nr, &val, 0, 0);
-}
+	if (word >= GET_LEN(row_widths))
+		return -EINVAL;
 
-/*
- * wrapper funcs providing the fuse API
- *
- * we use the following mapping:
- *   "bank" ->	eFuse line
- *   "word" ->	0: bits 0-31
- *		1: bits 32-63
- *		2: bit 64 (lock)
- */
+	fuse_data = kmalloc_array(GET_LEN(row_widths), sizeof(u32),
+				  GFP_KERNEL);
 
-static struct efuse_val prog_val;
-static int valid_prog_words;
+	res = ops->fuse_hd_read(dev, bank, fuse_data);
 
-int fuse_read(u32 bank, u32 word, u32 *val)
-{
-	struct efuse_val fuse_line;
-	int res;
-
-	if (bank < 0 || bank >= efuse_data.row_num ||
-	    word > 2)
-		return -EINVAL;
-
-	res = mvebu_read_efuse(bank, &fuse_line);
 	if (res)
-		return res;
+		goto read_end;
 
-	if (word < 2)
-		*val = fuse_line.dwords.d[word];
-	else
-		*val = fuse_line.lock;
+	*val = fuse_data[word];
 
+read_end:
+	kfree(fuse_data);
 	return res;
 }
 
 int fuse_sense(u32 bank, u32 word, u32 *val)
 {
 	/* not supported */
-	return -ESRCH;
+	return -EPERM;
 }
 
 int fuse_prog(u32 bank, u32 word, u32 val)
 {
 	int res = 0;
+	struct udevice *dev = NULL;
+	struct mvebu_fuse_block_data *priv;
+	const struct fuse_ops *ops;
+	int row_widths;
 
-	/*
-	 * For now: remember values for word == 0 and word == 1 and write the
-	 * whole line when word == 2.
-	 * This implies that we always require all 3 fuse prog cmds (one for
-	 * for each word) to write a single fuse line.
-	 * Exception is a single write to word 2 which will lock the fuse line.
-	 *
-	 * Hope that will be OK.
-	 */
+	if (bank < 0 || bank >= row_index)
+		return -EINVAL;
+
+	res = get_fuse_device(bank, &dev);
+	if (res)
+		return res;
+
+	priv = dev_get_priv(dev);
+	ops = device_get_ops(dev);
+	row_widths = priv->pdata->row_bit_width;
 
-	if (bank < 0 || bank >= efuse_data.row_num ||
-	    word > 2)
+	if (word >= GET_LEN(row_widths))
 		return -EINVAL;
 
-	if (word < 2) {
-		prog_val.dwords.d[word] = val;
-		valid_prog_words |= (1 << word);
-	} else if ((valid_prog_words & 3) == 0 && val) {
-		res = mvebu_lock_efuse(bank);
-		valid_prog_words = 0;
-	} else if ((valid_prog_words & 3) != 3 || !val) {
-		res = -EINVAL;
-	} else {
-		prog_val.lock = val != 0;
-		res = mvebu_write_efuse(bank, &prog_val);
-		valid_prog_words = 0;
-	}
+	res = ops->fuse_hd_prog(dev, word, bank, val);
+
 	return res;
 }
 
 int fuse_override(u32 bank, u32 word, u32 val)
 {
 	/* not supported */
-	return -ESRCH;
+	return -EPERM;
 }
 
 static int fuse_probe(struct udevice *dev)
@@ -235,14 +122,15 @@ static int fuse_probe(struct udevice *dev)
 	const void *blob = gd->fdt_blob;
 	int node = dev_of_offset(dev);
 	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
+	const struct fuse_ops *ops = NULL;
 	int res = 0;
-	unsigned long efuse_base;
 
 	priv->control_reg = dev_read_addr_ptr(dev);
 	if (IS_ERR(priv->control_reg))
 		return -EINVAL;
-	efuse_data.control_reg = priv->control_reg;
 
+	priv->pdata =
+		(struct mvebu_fuse_platform_data *)dev_get_driver_data(dev);
 #ifndef DRY_RUN
 	priv->target_otp_mem =
 		(void *)(((unsigned long)fdtdec_get_int(blob, node,
@@ -251,30 +139,77 @@ static int fuse_probe(struct udevice *dev)
 #else
 	priv->target_otp_mem = NULL;
 #endif
-	efuse_data.target_otp_mem = priv->target_otp_mem;
 
-	/* efuse mbus window initialization */
-	efuse_base = (unsigned long)priv->target_otp_mem & 0xFF000000;
-	res = mvebu_efuse_init_hw(efuse_base);
+	ops = device_get_ops(dev);
+	res = ops->fuse_init(dev);
 	if (res)
 		return res;
 
-	priv->row_num = fdtdec_get_int(blob, node, "row-count", 0);
-	efuse_data.row_num = priv->row_num;
+	priv->row_num = fdtdec_get_int(blob, node, "rows-count", 1);
 
-	return 0;
+	priv->row_base = row_index;
+	row_index = priv->row_num + row_index;
+
+	return res;
 }
 
-static const struct udevice_id efuse_ids[] = {
-	{ .compatible = "marvell,a38x-efuse" },
-	{ }
+static struct fuse_ops fuse_ops = {
+	.fuse_init = mvebu_efuse_init_hw,
+	.fuse_hd_read = mvebu_efuse_hd_read,
+	.fuse_hd_prog = mvebu_efuse_hd_prog,
+};
+
+static struct mvebu_fuse_platform_data fuse_hd_pdata = {
+	.row_bit_width = 65,
+	.row_step = 16,
 };
 
+static const struct udevice_id mvebu_fuse_ids[] = {
+	{ .compatible = "marvell,mvebu-fuse-hd",
+		.data = (ulong)&fuse_hd_pdata },
+	{}
+};
+
+int fuse_bind(struct udevice *dev)
+{
+	struct udevice *bank;
+	struct uclass *uc;
+	const void *blob = gd->fdt_blob;
+	int node = dev_of_offset(dev);
+	int ret = 0;
+
+	fdtdec_get_alias_seq(blob, "fuse", node, &dev->req_seq);
+
+	/* Get MISC uclass */
+	ret = uclass_get(UCLASS_MISC, &uc);
+	if (ret)
+		return ret;
+
+	/*
+	 * Reorder the efuse bank device in devices
+	 * list by its request sequence number.
+	 */
+	uclass_foreach_dev(bank, uc) {
+		node = dev_of_offset(bank);
+		fdtdec_get_alias_seq(blob, "fuse", node, &bank->req_seq);
+		if ((device_is_compatible(bank, "marvell,mvebu-fuse-hd"))) {
+			if (bank->req_seq > dev->req_seq) {
+				list_move(&dev->uclass_node,
+					  bank->uclass_node.prev);
+				break;
+			}
+		}
+	}
+
+	return 0;
+}
+
 U_BOOT_DRIVER(mvebu_efuse) = {
 	.name	= "mvebu_efuse",
 	.id	= UCLASS_MISC,
-	.of_match = efuse_ids,
+	.of_match = mvebu_fuse_ids,
 	.probe	= fuse_probe,
 	.priv_auto_alloc_size = sizeof(struct mvebu_fuse_block_data),
+	.ops	= &fuse_ops,
+	.bind	= fuse_bind,
 };
-
diff --git a/include/mvebu/fuse-mvebu.h b/include/mvebu/fuse-mvebu.h
index 671f6a06bd..77752ef6b3 100644
--- a/include/mvebu/fuse-mvebu.h
+++ b/include/mvebu/fuse-mvebu.h
@@ -1,6 +1,5 @@
 /* SPDX-License-Identifier: GPL-2.0+
  * Copyright (C) 2018 Marvell International Ltd.
- * Copyright (C) 2015-2016 Reinhard Pfau <reinhard.pfau@gdsys.cc>
  *
  * https://spdx.org/licenses
  */
@@ -10,27 +9,39 @@
 
 #include <common.h>
 
-struct efuse_val {
-	union {
-		struct {
-			u8 d[8];
-		} bytes;
-		struct {
-			u16 d[4];
-		} words;
-		struct {
-			u32 d[2];
-		} dwords;
-	};
-	u32 lock;
-};
+#if defined(CONFIG_MVEBU_EFUSE_FAKE)
+#define DRY_RUN
+#else
+#undef DRY_RUN
+#endif
+
+#define MVEBU_EFUSE_SRV_CTRL_LD_SEL_USER	BIT(6)
+#define MVEBU_EFUSE_CTRL_LD_SEC_EN_MASK		BIT(7)
+#define MVEBU_EFUSE_CTRL_PROGRAM_ENABLE		BIT(31)
 
-int mvebu_efuse_init_hw(unsigned long efuse_base);
+struct mvebu_fuse_platform_data {
+	unsigned int row_bit_width;
+	unsigned int row_step;
+};
 
-int mvebu_read_efuse(int nr, struct efuse_val *val);
+struct mvebu_fuse_block_data {
+	struct mvebu_fuse_platform_data	*pdata;
+	unsigned int	row_base;
+	unsigned int	row_num;
+	void	*control_reg;
+	void	*target_otp_mem;
+	char	block_name[64];
+};
 
-int mvebu_write_efuse(int nr, struct efuse_val *val);
+struct fuse_ops {
+	int (*fuse_init)(struct udevice *dev);
+	int (*fuse_hd_read)(struct udevice *dev, int row_id, u32 *val);
+	int (*fuse_hd_prog)(struct udevice *dev, int word, int row_id,
+			    u32 new_val);
+};
 
-int mvebu_lock_efuse(int nr);
+int mvebu_efuse_init_hw(struct udevice *dev);
+int mvebu_efuse_hd_read(struct udevice *dev, int row_id, u32 *val);
+int mvebu_efuse_hd_prog(struct udevice *dev, int word, int row_id, u32 new_val);
 
 #endif
-- 
2.29.0

