From 4ef626fc8bea0f3f295238b275c5b8dfdfb15b50 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@caviumnetworks.com>
Date: Tue, 17 Apr 2018 08:31:54 -0700
Subject: [PATCH 0805/1239] drivers: net: octeontx2: few more changes to code
 for cgx

Signed-off-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 drivers/net/cavium/octeontx2/cgx.c            |   8 +-
 drivers/net/cavium/octeontx2/cgx.h            |  34 +++
 drivers/net/cavium/octeontx2/cgx_intf.c       |  12 +-
 drivers/net/cavium/octeontx2/cgx_intf.h       |  27 +-
 drivers/net/cavium/octeontx2/octeontx2_cgx.c  |  10 -
 .../net/cavium/octeontx2/octeontx2_cgx_intf.h | 237 ------------------
 6 files changed, 45 insertions(+), 283 deletions(-)
 create mode 100644 drivers/net/cavium/octeontx2/cgx.h
 delete mode 100644 drivers/net/cavium/octeontx2/octeontx2_cgx.c
 delete mode 100644 drivers/net/cavium/octeontx2/octeontx2_cgx_intf.h

diff --git a/drivers/net/cavium/octeontx2/cgx.c b/drivers/net/cavium/octeontx2/cgx.c
index 947eeb2167..6a99ca1b17 100644
--- a/drivers/net/cavium/octeontx2/cgx.c
+++ b/drivers/net/cavium/octeontx2/cgx.c
@@ -18,7 +18,7 @@
 #include <asm/io.h>
 #include <errno.h>
 
-#include "cgx_intf.h"
+#include "cgx.h"
 
 
 void enumerate_lmacs(void)
@@ -45,17 +45,11 @@ int cgx_remove(struct udevice *dev)
 	return 0;
 }
 
-static const struct udevice_id cgx_ids[] = {
-        { .compatible = "cavium,cgx" },
-        {}
-};
-
 U_BOOT_DRIVER(cgx) = {
         .name   = "cgx",
         .id     = UCLASS_MISC,
         .probe  = cgx_probe,
 	.remove	= cgx_remove,
-        .of_match = cgx_ids,
         .priv_auto_alloc_size = sizeof(struct cgx),
 };
 
diff --git a/drivers/net/cavium/octeontx2/cgx.h b/drivers/net/cavium/octeontx2/cgx.h
new file mode 100644
index 0000000000..9983e39a37
--- /dev/null
+++ b/drivers/net/cavium/octeontx2/cgx.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2018 Cavium, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+
+//#include "cavm-csrs-cgx.h"
+
+#define LMAC_PER_CGX 4
+#define CGX_PER_NODE 3
+#define PCI_DEVICE_ID_OCTEONTX2_CGX	0xA059
+
+struct lmac_priv {
+	u8 enable:1;
+	u8 full_duplex:1;
+	u8 speed:4;
+	u8 mode:1;
+	u8 rsvd:1;
+	u8 mac_addr[6];
+};
+
+struct cgx_priv {
+	u8 enable;
+	struct lmac_priv lmac[LMAC_PER_CGX];
+};
+
+struct cgx {
+	void *__iomem base;
+	struct cgx_priv cgx;
+};
diff --git a/drivers/net/cavium/octeontx2/cgx_intf.c b/drivers/net/cavium/octeontx2/cgx_intf.c
index bf6191647f..175db485c0 100644
--- a/drivers/net/cavium/octeontx2/cgx_intf.c
+++ b/drivers/net/cavium/octeontx2/cgx_intf.c
@@ -76,8 +76,10 @@ int wait_for_ownership(u8 cgx, u8 lmac)
 	
 	while (scr1.s.own_status == CGX_OWN_FIRMWARE &&
 		scr0.s.evt_sts.ack) {
-		if (timeout-- < 0)
+		if (timeout-- < 0) {
+			debug("timeout waiting for ownership\n");
 			return -ETIMEDOUT;
+		}
 		mdelay(1);
 		scr1.u = cgx_rd_scr1(cgx, lmac);
 		scr0.u = cgx_rd_scr0(cgx, lmac);
@@ -107,9 +109,11 @@ int cgx_intf_req(u8 cgx, u8 lmac, u8 cmd, uint64_t *rsp)
 	do {
 		scr0.u = cgx_rd_scr0(cgx, lmac);
 		mdelay(10);
-	} while (timeout-- && (scr0.s.evt_sts.ack != CGX_EVT_CMD_RESP));
-	if (timeout < 0)
-		return -1;	
+	} while (timeout-- && ( !scr0.s.evt_sts.ack));
+	if (timeout < 0) {
+		debug("%s timeout waiting for ack\n",__func__);
+		return -1;
+	}
 	/* wait for release */
 	do {
 		scr1.u = cgx_rd_scr1(cgx, lmac);
diff --git a/drivers/net/cavium/octeontx2/cgx_intf.h b/drivers/net/cavium/octeontx2/cgx_intf.h
index 9dd38f8f59..f99957f956 100644
--- a/drivers/net/cavium/octeontx2/cgx_intf.h
+++ b/drivers/net/cavium/octeontx2/cgx_intf.h
@@ -10,13 +10,6 @@
 #ifndef __OCTEONTX2_CGX_INTF_H__
 #define __OCTEONTX2_CGX_INTF_H__
 
-#define PCI_DEVICE_ID_OCTEONTX2_CGX	0xA059
-
-#define CGX_FIRWARE_MAJOR_VER		1
-#define CGX_FIRWARE_MINOR_VER		0
-#define LMAC_PER_CGX 4
-#define CGX_PER_NODE 3 
-
 /* Register offsets */
 #define CGX_CMR_SCRATCH0	0x87e0e0001050
 #define CGX_CMR_SCRATCH1	0x87e0e0001058
@@ -24,24 +17,8 @@
 #define CGX_SHIFT(x)		(0x1000000 * (x & 0x3))
 #define CMR_SHIFT(x)		(0x40000 * (x & 0x3))
 
-struct lmac_priv {
-	u8 enable:1;
-	u8 full_duplex:1;
-	u8 speed:4;
-	u8 mode:1;
-	u8 rsvd:1;
-	u8 mac_addr[6];
-};
-
-struct cgx_priv {
-	u8 enable;
-	struct lmac_priv lmac[LMAC_PER_CGX];
-};
-
-struct cgx {
-	void *__iomem base;
-	struct cgx_priv cgx;
-};
+#define CGX_FIRWARE_MAJOR_VER		1
+#define CGX_FIRWARE_MINOR_VER		0
 
 <<<<<<< HEAD
 void cgx_intf_shutdown(void);
diff --git a/drivers/net/cavium/octeontx2/octeontx2_cgx.c b/drivers/net/cavium/octeontx2/octeontx2_cgx.c
deleted file mode 100644
index 0903e5d36d..0000000000
--- a/drivers/net/cavium/octeontx2/octeontx2_cgx.c
+++ /dev/null
@@ -1,10 +0,0 @@
-/*
- * Copyright (C) 2018 Cavium, Inc.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- */
-
-#include <config.h>
diff --git a/drivers/net/cavium/octeontx2/octeontx2_cgx_intf.h b/drivers/net/cavium/octeontx2/octeontx2_cgx_intf.h
deleted file mode 100644
index 4fa139f83c..0000000000
--- a/drivers/net/cavium/octeontx2/octeontx2_cgx_intf.h
+++ /dev/null
@@ -1,237 +0,0 @@
-/*
- * Copyright (C) 2018 Cavium, Inc.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- */
-
-#ifndef __OCTEONTX2_CGX_INTF_H__
-#define __OCTEONTX2_CGX_INTF_H__
-
-#define CGX_FIRWARE_MAJOR_VER		1
-#define CGX_FIRWARE_MINOR_VER		0
-
-/* CGX error types. set for cmd response status as CGX_STAT_FAIL */
-enum cgx_error_type {
-	CGX_ERR_NONE,
-	CGX_ERR_LMAC_NOT_ENABLED,
-	CGX_ERR_LMAC_MODE_INVALID,
-	CGX_ERR_REQUEST_ID_INVALID,
-	CGX_ERR_PREV_ACK_NOT_CLEAR,
-	CGX_ERR_PHY_LINK_DOWN,
-	CGX_ERR_PCS_RESET_FAIL,
-	CGX_ERR_AN_CPT_FAIL,
-	CGX_ERR_TX_NOT_IDLE,
-	CGX_ERR_RX_NOT_IDLE,
-	CGX_ERR_SPUX_BR_BLKLOCK_FAIL,
-	CGX_ERR_SPUX_RX_ALIGN_FAIL,
-	CGX_ERR_SPUX_TX_FAULT,
-	CGX_ERR_SPUX_RX_FAULT,
-	CGX_ERR_SPUX_RESET_FAIL,
-	CGX_ERR_SMUX_RX_LINK_NOT_OK,
-	CGX_ERR_PCS_RECV_LINK_FAIL,
-	CGX_ERR_TRAINING_FAIL,
-	CGX_ERR_RX_EQU_FAIL,		/* = 18 */
-	/* FIXME : add more error types when adding support for new modes */
-};
-
-/* LINK speed types */
-enum cgx_link_speed {
-	CGX_LINK_NONE,
-	CGX_LINK_10M,
-	CGX_LINK_100M,
-	CGX_LINK_1G,
-	CGX_LINK_10G,
-	CGX_LINK_25G,
-	CGX_LINK_40G,
-	CGX_LINK_50G,
-	CGX_LINK_100G,
-};
-
-/* REQUEST ID types. Input to firmware */
-enum cgx_cmd_id {
-	CGX_CMD_NONE,
-	CGX_CMD_GET_FW_VER,
-	CGX_CMD_GET_MAC_ADDR,
-	CGX_CMD_SET_MTU,
-	CGX_CMD_GET_LINK_STS,		/* optional to user */
-	CGX_CMD_LINK_BRING_UP,
-	CGX_CMD_LINK_BRING_DOWN,
-	CGX_CMD_INTERNAL_LBK,
-	CGX_CMD_EXTERNAL_LBK,
-	CGX_CMD_HIGIG,
-	CGX_CMD_LINK_STAT_CHANGE,
-	CGX_CMD_MODE_CHANGE,		/* hot plug support */
-	CGX_CMD_INTF_SHUTDOWN
-};
-
-/* async event ids */
-enum cgx_evt_id {
-	CGX_EVT_NONE,
-	CGX_EVT_LINK_CHANGE,
-};
-
-/* event types - cause of interrupt */
-enum cgx_evt_type {
-	CGX_EVT_ASYNC,
-	CGX_EVT_CMD_RESP
-};
-
-enum cgx_stat {
-	CGX_STAT_SUCCESS,
-	CGX_STAT_FAIL
-};
-
-enum cgx_csr_own {
-	/* ownership is free, no SW component is writing to CSRs */
-	CGX_OWN_NONE,
-	/* set by kernel/uefi/u-boot after posting a new request to ATF */
-	CGX_OWN_FIRMWARE,
-	/* set by kernel/uefi/u-boot when preparing for the request */
-	CGX_OWN_NON_SECURE_FW,
-};
-
-/* scratchx(0) CSR used for ATF->non-secure SW communication.
- * This acts as the status register
- * Provides details on command ack/status, link status, error details
- */
-
-/* CAUTION : below structures are placed in order based on the bit positions
- * For any updates/new bitfields, corresponding structures needs to be updated
- */
-struct cgx_evt_sts_s {			/* start from bit 0 */
-	uint64_t ack:1;
-	uint64_t evt_type:1;		/* cgx_evt_type */
-	uint64_t stat:1;		/* cgx_stat */
-	uint64_t id:6;			/* cgx_evt_id/cgx_cmd_id */
-	uint64_t reserved:55;
-};
-
-/* all the below structures are in the same memory location of SCRATCHX(0)
- * value can be read/written based on command ID
- */
-
-/* Resp to command IDs with command status as CGX_STAT_FAIL
- * Not applicable for commands :
- *	CGX_CMD_LINK_BRING_UP/DOWN/CGX_EVT_LINK_CHANGE
- *	check struct cgx_lnk_sts_s comments
- */
-struct cgx_err_sts_s {			/* start from bit 9 */
-	uint64_t reserved1:9;
-	uint64_t type:10;		/* cgx_error_type */
-	uint64_t reserved2:35;
-};
-
-/* Resp to cmd ID as CGX_CMD_GET_FW_VER with cmd status as CGX_STAT_SUCCESS */
-struct cgx_ver_s {			/* start from bit 9 */
-	uint64_t reserved1:9;
-	uint64_t major_ver:4;
-	uint64_t minor_ver:4;
-	uint64_t reserved2:47;
-};
-
-/* Resp to cmd ID as CGX_CMD_GET_MAC_ADDR with cmd status as CGX_STAT_SUCCESS
- * Returns each byte of MAC address in a seperate bit field
- */
-struct cgx_mac_addr_s {			/* start from bit 9 */
-	uint64_t reserved1:9;
-	uint64_t addr_0:8;
-	uint64_t addr_1:8;
-	uint64_t addr_2:8;
-	uint64_t addr_3:8;
-	uint64_t addr_4:8;
-	uint64_t addr_5:8;
-	uint64_t reserved2:7;
-};
-
-/* Resp to cmd ID - CGX_CMD_LINK_BRING_UP/DOWN, event ID CGX_EVT_LINK_CHANGE
- * status can be either CGX_STAT_FAIL or CGX_STAT_SUCCESS
- * In case of CGX_STAT_FAIL, it indicates CGX configuration failed when
- * processing link up/down/change command. Both err_type and current link status
- * will be updated
- * In case of CGX_STAT_SUCCESS, err_type will be CGX_ERR_NONE and current
- * link status will be updated
- */
-struct cgx_lnk_sts_s {
-	uint64_t reserved1:9;
-	uint64_t link_up:1;
-	uint64_t full_duplex:1;
-	uint64_t speed:4;		/* cgx_link_speed */
-	uint64_t err_type:10;
-	uint64_t reserved2:39;
-};
-
-union cgx_rsp_sts {
-	/* Fixed, applicable for all commands/events */
-	struct cgx_evt_sts_s evt_sts;
-	/* response to CGX_CMD_LINK_BRINGUP/DOWN/LINK_CHANGE */
-	struct cgx_lnk_sts_s link_sts;
-	/* response to CGX_CMD_GET_FW_VER */
-	struct cgx_ver_s ver;
-	/* response to CGX_CMD_GET_MAC_ADDR */
-	struct cgx_mac_addr_s mac_s;
-	/* response if evt_status = CMD_FAIL */
-	struct cgx_err_sts_s err;
-};
-
-union cgx_scratchx0 {
-	uint64_t u;
-	union cgx_rsp_sts s;
-};
-
-/* scratchx(1) CSR used for non-secure SW->ATF communication
- * This CSR acts as a command register
- */
-struct cgx_cmd {			/* start from bit 2 */
-	uint64_t reserved1:2;
-	uint64_t id:6;			/* cgx_request_id */
-	uint64_t reserved2:56;
-};
-
-/* all the below structures are in the same memory location of SCRATCHX(1)
- * corresponding arguements for command Id needs to be updated
- */
-
-/* Any command using enable/disable as an argument need
- * to pass the option via this structure.
- * Ex: Loopback, HiGig...
- */
-struct cgx_ctl_args {			/* start from bit 8 */
-	uint64_t reserved1:8;
-	uint64_t enable:1;
-	uint64_t reserved2:55;
-};
-
-/* command argument to be passed for cmd ID - CGX_CMD_SET_MTU */
-struct cgx_mtu_args {
-	uint64_t reserved1:8;
-	uint64_t size:16;
-	uint64_t reserved2:40;
-};
-
-/* command argument to be passed for cmd ID - CGX_CMD_LINK_CHANGE */
-struct cgx_link_change_args {		/* start from bit 8 */
-	uint64_t reserved1:8;
-	uint64_t link_up:1;
-	uint64_t full_duplex:1;
-	uint64_t speed:4;		/* cgx_link_speed */
-	uint64_t reserved2:50;
-};
-
-union cgx_cmd_s {
-	uint64_t own_status:2;			/* cgx_csr_own */
-	struct cgx_cmd cmd;
-	struct cgx_ctl_args cmd_args;
-	struct cgx_mtu_args mtu_size;
-	struct cgx_link_change_args lnk_args;	/* Input to CGX_CMD_LINK_CHANGE */
-	/* any other arg for command id * like : mtu, dmac filtering control */
-};
-
-union cgx_scratchx1 {
-	uint64_t u;
-	union cgx_cmd_s s;
-};
-
-#endif
-- 
2.29.0

