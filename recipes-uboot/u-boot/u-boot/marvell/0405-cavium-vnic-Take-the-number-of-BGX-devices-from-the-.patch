From 55eea8258de143d8a96e71a5ee6242c3a32d260d Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Fri, 6 May 2016 14:35:22 -0700
Subject: [PATCH 0405/1239] cavium: vnic: Take the number of BGX devices from
 the board config

This commit facilitates support for different ThunderX SoC types
by parametrizing the code

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/net/cavium/nic.h         |  2 +-
 drivers/net/cavium/nic_main.c    |  2 +-
 drivers/net/cavium/thunder_bgx.c | 22 +++++++++++-----------
 drivers/net/cavium/thunder_bgx.h |  4 +---
 4 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/drivers/net/cavium/nic.h b/drivers/net/cavium/nic.h
index 5f02d3fbc7..b5e6107ac8 100644
--- a/drivers/net/cavium/nic.h
+++ b/drivers/net/cavium/nic.h
@@ -80,7 +80,7 @@
 #define	NIC_CPI_COUNT			2048 /* No of channel parse indices */
 
 /* TNS bypass mode: 1-1 mapping between VNIC and BGX:LMAC */
-#define NIC_MAX_BGX				MAX_BGX_PER_CN88XX
+#define NIC_MAX_BGX			CONFIG_MAX_BGX_PER_NODE
 #define	NIC_CPI_PER_BGX			(NIC_CPI_COUNT / NIC_MAX_BGX)
 #define	NIC_MAX_CPI_PER_LMAC	64 /* Max when CPI_ALG is IP diffserv */
 #define	NIC_RSSI_PER_BGX		(NIC_RSSI_COUNT / NIC_MAX_BGX)
diff --git a/drivers/net/cavium/nic_main.c b/drivers/net/cavium/nic_main.c
index f0e190a832..520d074302 100644
--- a/drivers/net/cavium/nic_main.c
+++ b/drivers/net/cavium/nic_main.c
@@ -364,7 +364,7 @@ static void nic_set_tx_pkt_pad(struct nicpf *nic, int size)
 	if (size > 60)
 		size = 60;
 
-	for (lmac = 0; lmac < (MAX_BGX_PER_CN88XX * MAX_LMAC_PER_BGX); lmac++) {
+	for (lmac = 0; lmac < (CONFIG_MAX_BGX_PER_NODE * MAX_LMAC_PER_BGX); lmac++) {
 		lmac_cfg = nic_reg_read(nic, NIC_PF_LMAC_0_7_CFG | (lmac << 3));
 		lmac_cfg &= ~(0xF << 2);
 		lmac_cfg |= ((size / 4) << 2);
diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index c736791b0f..c25c3d36ad 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -56,8 +56,8 @@ struct bgx {
 	struct pci_dev		*pdev;
 };
 
-struct bgx_board_info bgx_board_info[MAX_BGX_PER_CN88XX];
-struct bgx *bgx_vnic[MAX_BGX_THUNDER];
+struct bgx_board_info bgx_board_info[CONFIG_MAX_BGX];
+struct bgx *bgx_vnic[CONFIG_MAX_BGX];
 static int lmac_count = 0; /* Total no of LMACs in system */
 
 /* Register read/write APIs */
@@ -107,7 +107,7 @@ static int bgx_poll_reg(struct bgx *bgx, uint8_t lmac,
 
 const u8 *bgx_get_lmac_mac(int node, int bgx_idx, int lmacid)
 {
-	struct bgx *bgx = bgx_vnic[(node * MAX_BGX_PER_CN88XX) + bgx_idx];
+	struct bgx *bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
 
 	if (bgx)
 		return bgx->lmac[lmacid].mac;
@@ -117,7 +117,7 @@ const u8 *bgx_get_lmac_mac(int node, int bgx_idx, int lmacid)
 
 void bgx_set_lmac_mac(int node, int bgx_idx, int lmacid, const u8 *mac)
 {
-	struct bgx *bgx = bgx_vnic[(node * MAX_BGX_PER_CN88XX) + bgx_idx];
+	struct bgx *bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
 
 	if (!bgx)
 		return;
@@ -132,9 +132,9 @@ void bgx_get_count(int node, int *bgx_count)
 	struct bgx *bgx;
 
 	*bgx_count = 0;
-	for (i = 0; i < MAX_BGX_PER_CN88XX; i++) {
-		bgx = bgx_vnic[node * MAX_BGX_PER_CN88XX + i];
-		debug("bgx_vnic[%u]: %p\n", node * MAX_BGX_PER_CN88XX + i, bgx);
+	for (i = 0; i < CONFIG_MAX_BGX_PER_NODE; i++) {
+		bgx = bgx_vnic[node * CONFIG_MAX_BGX_PER_NODE + i];
+		debug("bgx_vnic[%u]: %p\n", node * CONFIG_MAX_BGX_PER_NODE + i, bgx);
 		if (bgx)
 			*bgx_count |= (1 << i);
 	}
@@ -145,7 +145,7 @@ int bgx_get_lmac_count(int node, int bgx_idx)
 {
 	struct bgx *bgx;
 
-	bgx = bgx_vnic[(node * MAX_BGX_PER_CN88XX) + bgx_idx];
+	bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
 	if (bgx)
 		return bgx->lmac_count;
 
@@ -154,7 +154,7 @@ int bgx_get_lmac_count(int node, int bgx_idx)
 
 void bgx_lmac_rx_tx_enable(int node, int bgx_idx, int lmacid, bool enable)
 {
-	struct bgx *bgx = bgx_vnic[(node * MAX_BGX_PER_CN88XX) + bgx_idx];
+	struct bgx *bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
 	u64 cfg;
 
 	if (!bgx)
@@ -191,7 +191,7 @@ void bgx_lmac_internal_loopback(int node, int bgx_idx,
 	struct lmac *lmac;
 	u64    cfg;
 
-	bgx = bgx_vnic[(node * MAX_BGX_PER_CN88XX) + bgx_idx];
+	bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
 	if (!bgx)
 		return;
 
@@ -759,7 +759,7 @@ int thunderx_bgx_initialize(unsigned int bgx_idx, unsigned int node)
 
 	/* MAP configuration registers */
 	bgx->reg_base = (void *)CSR_PA(node, BGXX_PF_BAR0(bgx_idx));
-	bgx->bgx_id = bgx_idx + node * MAX_BGX_PER_CN88XX;
+	bgx->bgx_id = bgx_idx + node * CONFIG_MAX_BGX_PER_NODE;
 
 	bgx_vnic[bgx->bgx_id] = bgx;
 	bgx_get_qlm_mode(bgx);
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index 9a2f2eaed6..24601bd4d7 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -10,8 +10,6 @@
 #ifndef THUNDER_BGX_H
 #define THUNDER_BGX_H
 
-#define    MAX_BGX_THUNDER			8 /* Max 4 nodes, 2 per node */
-#define    MAX_BGX_PER_CN88XX			2
 #define    MAX_LMAC_PER_BGX			4
 #define    MAX_BGX_CHANS_PER_LMAC		16
 #define    MAX_DMAC_PER_LMAC			8
@@ -19,7 +17,7 @@
 
 #define    MAX_DMAC_PER_LMAC_TNS_BYPASS_MODE	2
 
-#define    MAX_LMAC	(MAX_BGX_PER_CN88XX * MAX_LMAC_PER_BGX)
+#define    MAX_LMAC	(CONFIG_MAX_BGX_PER_NODE * MAX_LMAC_PER_BGX)
 
 #define    NODE_ID_MASK				0x300000000000
 #define    NODE_ID(x)				((x & NODE_ID_MASK) >> 44)
-- 
2.29.0

