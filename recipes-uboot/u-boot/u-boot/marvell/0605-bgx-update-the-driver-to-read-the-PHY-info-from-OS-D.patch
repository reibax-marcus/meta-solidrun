From 7e51196ffc92ed9ab81f360628eab8bafd3f67f1 Mon Sep 17 00:00:00 2001
From: Nithya <nithya.mani@caviumnetworks.com>
Date: Wed, 1 Feb 2017 12:02:13 -0800
Subject: [PATCH 0605/1239] bgx : update the driver to read the PHY info from
 OS DT

This patch removes obtaining phy info from bdk DT and instead
uses OS DT and applies it.

This patch also reverts the changes from commit : 747122ed
and handles interfaces without phy (like qsgmii on router board)

Signed-off-by: Nithya <nithya.mani@caviumnetworks.com>
---
 .../include/asm/arch-thunderx/thunderx_fdt.h  |   1 +
 .../include/asm/arch-thunderx/thunderx_vnic.h |   4 +-
 board/cavium/thunderx/fdt.c                   | 134 ++++++++++++++----
 board/cavium/thunderx/thunderx.c              |   2 +-
 drivers/net/cavium/thunder_bgx.c              |  34 +++--
 drivers/net/cavium/thunder_bgx.h              |  13 +-
 6 files changed, 140 insertions(+), 48 deletions(-)

diff --git a/arch/arm/include/asm/arch-thunderx/thunderx_fdt.h b/arch/arm/include/asm/arch-thunderx/thunderx_fdt.h
index b25355ae3d..49f46f3042 100644
--- a/arch/arm/include/asm/arch-thunderx/thunderx_fdt.h
+++ b/arch/arm/include/asm/arch-thunderx/thunderx_fdt.h
@@ -7,5 +7,6 @@
 #define __THUNDERX_FDT_H__
 
 void thunderx_parse_bdk_config(void);
+void thunderx_parse_phy_info(void);
 
 #endif
diff --git a/arch/arm/include/asm/arch-thunderx/thunderx_vnic.h b/arch/arm/include/asm/arch-thunderx/thunderx_vnic.h
index e79284c8c5..e615b42827 100644
--- a/arch/arm/include/asm/arch-thunderx/thunderx_vnic.h
+++ b/arch/arm/include/asm/arch-thunderx/thunderx_vnic.h
@@ -14,7 +14,7 @@ int nicvf_initialize(struct udevice *dev, int vf_num);
 int thunderx_bgx_initialize(unsigned int bgx_idx, unsigned int node);
 void bgx_get_count(int node, int *bgx_count);
 int bgx_get_lmac_count(int node, int bgx_idx);
-void bgx_set_board_info(unsigned int bgx_id, unsigned int mdio_bus,
-			unsigned int *phy_addr);
+void bgx_set_board_info(int bgx_id, int *mdio_bus,
+			int *phy_addr, int *autoneg_dis);
 
 #endif /* VNIC_H_ */
diff --git a/board/cavium/thunderx/fdt.c b/board/cavium/thunderx/fdt.c
index 139a27d9d3..8ffb811545 100644
--- a/board/cavium/thunderx/fdt.c
+++ b/board/cavium/thunderx/fdt.c
@@ -22,31 +22,6 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-static void thunderx_parse_phy_address(const void *fdt, int node)
-{
-	char bgxname[32];
-	int bgx_id, phy_id;
-	unsigned int phy_addr[MAX_LMAC_PER_BGX] = {-1, -1, -1, -1}, mdio_bus = 0;
-	const char *buffer;
-	uint32_t val;
-
-	for (bgx_id = 0; bgx_id < CONFIG_MAX_BGX_PER_NODE; bgx_id++) {
-		for (phy_id = 0; phy_id < MAX_LMAC_PER_BGX; phy_id++)   {
-			snprintf(bgxname, sizeof(bgxname),
-				 "PHY-ADDRESS.N0.BGX%d.P%d", bgx_id, phy_id);
-			buffer = fdt_getprop(fdt, node, bgxname, NULL);
-			if (buffer != NULL) {
-				val = simple_strtoul(buffer, NULL, 16);
-				mdio_bus = (val >> 8) & 0xF;
-				phy_addr[phy_id] = val & 0xFF;
-			} else {
-				debug("Err: cannot retrieve phy address from fdt:%d:%d\n", bgx_id, phy_id);
-			}
-		}
-		bgx_set_board_info(bgx_id, mdio_bus, &phy_addr[0]);
-	}
-}
-
 void thunderx_parse_bdk_config(void)
 {
 	char boardname[32];
@@ -91,7 +66,6 @@ void thunderx_parse_bdk_config(void)
 	}
 
 #ifdef CONFIG_THUNDERX_BGX
-	thunderx_parse_phy_address(gd->fdt_blob, node);
 	str = fdt_getprop(gd->fdt_blob, node, "BOARD-MAC-ADDRESS", &len);
 	if (!str) {
 		printf("%s: BOARD-MAC-ADDRESS missing from device tree\n",
@@ -114,6 +88,114 @@ void thunderx_parse_bdk_config(void)
 #endif
 }
 
+static int thunderx_get_mdio_bus(const void *fdt, int phy_offset)
+{
+	int node, bus = -1;
+	const u64 *reg;
+	u64 addr;
+
+	if (phy_offset < 0)
+		return -1;
+	/* obtain mdio node and get the reg prop */
+	node = fdt_parent_offset(fdt, phy_offset);
+	if (node < 0)
+		return -1;
+
+	reg = fdt_getprop(fdt, node, "reg", NULL);
+	addr = fdt64_to_cpu(*reg);
+	bus = (addr & (1 << 7)) ? 1 : 0;
+	return bus;
+}
+
+static int thunderx_get_phy_addr(const void *fdt, int phy_offset)
+{
+	const u32 *reg;
+	int addr = -1;
+
+	if (phy_offset < 0)
+		return -1;
+	reg = fdt_getprop(fdt, phy_offset, "reg", NULL);
+	addr = fdt32_to_cpu(*reg);
+	return addr;
+}
+
+void thunderx_parse_phy_info(void)
+{
+	const void *fdt = gd->fdt_blob;
+	int offset = 0, node, bgx_id = 0, lmacid = 0;
+	const u32 *val;
+	char bgxname[16];
+	int len, rgx_id = 0;
+	int phandle, phy_offset;
+	int subnode;
+
+	offset = fdt_node_offset_by_compatible(fdt, -1, "pci-bridge");
+	if (offset > 1) {
+		for (bgx_id = 0; bgx_id < CONFIG_MAX_BGX_PER_NODE; bgx_id++) {
+			int phy_addr[MAX_LMAC_PER_BGX] = { [0 ... MAX_LMAC_PER_BGX - 1] = -1};
+			int autoneg_dis[MAX_LMAC_PER_BGX] = { [0 ... MAX_LMAC_PER_BGX - 1] = 0};
+			int mdio_bus[MAX_LMAC_PER_BGX] = { [0 ... MAX_LMAC_PER_BGX - 1] = -1};
+			snprintf(bgxname, sizeof(bgxname),
+				 "bgx%d", bgx_id);
+			node = fdt_subnode_offset(fdt, offset, bgxname);
+			if (node < 0) {
+				/* check if it is rgx node */
+				snprintf(bgxname, sizeof(bgxname),
+					 "rgx%d", rgx_id);
+				node = fdt_subnode_offset(fdt, offset, bgxname);
+				if (node < 0) {
+					printf("bgx%d/rgx0 node not found\n",
+					       bgx_id);
+					return;
+				}
+			}
+			debug("bgx%d node found\n", bgx_id);
+
+			/* loop through each of the bgx/rgx nodes
+			to find PHY nodes */
+			fdt_for_each_subnode(fdt, subnode, node) {
+				/* check for phy-handle property */
+				val = fdt_getprop(fdt, subnode, "phy-handle",
+						  &len);
+				if (val) {
+					phandle = fdt32_to_cpu(*val);
+					if (!phandle) {
+						debug("phandle not valid %d\n",
+						      lmacid);
+					} else {
+						phy_offset =
+						fdt_node_offset_by_phandle
+							(fdt, phandle);
+						phy_addr[lmacid] =
+						thunderx_get_phy_addr
+							(fdt, phy_offset);
+
+						mdio_bus[lmacid] =
+						thunderx_get_mdio_bus
+							(fdt, phy_offset);
+					}
+				} else
+					debug("phy-handle property not found %d\n",
+					      lmacid);
+
+				/* check for autonegotiation property */
+				val = fdt_getprop(fdt, subnode,
+						  "cavium,disable-autonegotiation",
+						  &len);
+				if (val)
+					autoneg_dis[lmacid] = 1;
+
+				lmacid++;
+			}
+
+			lmacid = 0;
+			bgx_set_board_info(bgx_id, mdio_bus, phy_addr,
+					   autoneg_dis);
+		}
+	}
+}
+
+
 int arch_fixup_memory_node(void *blob)
 {
 	return 0;
diff --git a/board/cavium/thunderx/thunderx.c b/board/cavium/thunderx/thunderx.c
index 0b626d5142..1301e5194a 100644
--- a/board/cavium/thunderx/thunderx.c
+++ b/board/cavium/thunderx/thunderx.c
@@ -133,7 +133,7 @@ int board_late_init(void)
 	const char *board;
 	debug("%s()\n", __func__);
 	thunderx_parse_bdk_config();
-
+	thunderx_parse_phy_info();
 	board = getenv("board");
 	printf("Board type: %s\n", getenv("board"));
 
diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index ce113a01d4..f8298d8c6d 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -329,8 +329,8 @@ static int bgx_lmac_sgmii_init(struct bgx *bgx, int lmacid)
 	/* power down, reset autoneg, autoneg enable */
 	cfg = bgx_reg_read(bgx, lmacid, BGX_GMP_PCS_MRX_CTL);
 	cfg &= ~PCS_MRX_CTL_PWR_DN;
-	if ((lmac->qlm_mode == QLM_MODE_QSGMII)
-	    && (board && strncasecmp(board, "rbd8030", 7) == 0))
+
+	if (bgx_board_info[bgx->bgx_id].phy_info[lmacid].autoneg_dis)
 		cfg |= (PCS_MRX_CTL_RST_AN);
 	else
 		cfg |= (PCS_MRX_CTL_RST_AN | PCS_MRX_CTL_AN_EN);
@@ -793,25 +793,22 @@ int bgx_poll_for_link(int node, int bgx_idx, int lmacid)
 	if ((lmac->qlm_mode == QLM_MODE_SGMII) ||
 	    (lmac->qlm_mode == QLM_MODE_RGMII) ||
 	    (lmac->qlm_mode == QLM_MODE_QSGMII)) {
-		const char *board;
-		board = getenv("board");
 
-		if ((lmac->qlm_mode == QLM_MODE_QSGMII)
-		    && (board && strncasecmp(board, "rbd8030", 7) == 0)) {
+		if (bgx_board_info[bgx_idx].phy_info[lmacid].phy_addr == -1) {
 			lmac->link_up = 1;
 			lmac->last_speed = 1000;
 			lmac->last_duplex = 1;
 			printf("BGX%d:LMAC %u link up\n", bgx_idx, lmacid);
-
 			return lmac->link_up;
 		}
 		snprintf(mii_name, sizeof(mii_name), "txsmi%d",
-			 bgx_board_info[bgx_idx].mdio_bus);
+			 bgx_board_info[bgx_idx].phy_info[lmacid].mdio_bus);
 
 		debug("mii_name: %s\n", mii_name);
 
 		lmac->mii_bus = miiphy_get_dev_by_name(mii_name);
-		lmac->phy_addr = bgx_board_info[bgx_idx].phy_addr[lmacid];
+		lmac->phy_addr = bgx_board_info[bgx_idx].
+				 phy_info[lmacid].phy_addr;
 
 		debug("lmac->mii_bus: %p\n",lmac->mii_bus);
 		if (!lmac->mii_bus) {
@@ -1260,17 +1257,24 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 	}
 }
 
-void bgx_set_board_info(unsigned int bgx_id, unsigned int mdio_bus,
-			unsigned int *phy_addr)
+void bgx_set_board_info(int bgx_id, int *mdio_bus,
+			int *phy_addr, int *autoneg_dis)
 {
 	unsigned int i;
 
-	bgx_board_info[bgx_id].mdio_bus = mdio_bus;
-
-	for (i = 0; i < MAX_LMAC_PER_BGX; i++)
-		bgx_board_info[bgx_id].phy_addr[i] = phy_addr[i];
+	for (i = 0; i < MAX_LMAC_PER_BGX; i++) {
+		bgx_board_info[bgx_id].phy_info[i].phy_addr = phy_addr[i];
+		bgx_board_info[bgx_id].phy_info[i].mdio_bus = mdio_bus[i];
+		bgx_board_info[bgx_id].phy_info[i].autoneg_dis = autoneg_dis[i];
+		debug("bgx_set_board_info lmac %d phy_addr 0x%x mdio bus %d "
+		      "autoneg_dis %d\n", i,
+			bgx_board_info[bgx_id].phy_info[i].phy_addr,
+			bgx_board_info[bgx_id].phy_info[i].mdio_bus,
+			bgx_board_info[bgx_id].phy_info[i].autoneg_dis);
+	}
 }
 
+
 int thunderx_bgx_probe(struct udevice *dev)
 {
 	int err;
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index c62a5f3123..d21aea9c8b 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -206,8 +206,8 @@ void bgx_add_dmac_addr(uint64_t dmac, int node, int bgx_idx, int lmac);
 void bgx_get_count(int node, int *bgx_count);
 int bgx_get_lmac_count(int node, int bgx);
 void bgx_print_stats(int bgx_idx, int lmac);
-void bgx_set_board_info(unsigned int bgx_id, unsigned int mdio_bus,
-			unsigned int *phy_addr);
+void bgx_set_board_info(int bgx_id, int *mdio_bus,
+			int *phy_addr, int *autoneg_dis);
 void xcv_init_hw(void);
 void xcv_setup_link(bool link_up, int link_speed);
 
@@ -225,9 +225,14 @@ enum qlm_mode {
 	QLM_MODE_RGMII,     /* 1 RGX */
 };
 
+struct phy_info {
+	int mdio_bus;
+	int phy_addr;
+	bool autoneg_dis;
+};
+
 struct bgx_board_info {
-	unsigned int mdio_bus;
-	unsigned int phy_addr[MAX_LMAC_PER_BGX];
+	struct phy_info phy_info[MAX_LMAC_PER_BGX];
 };
 
 enum LMAC_TYPE {
-- 
2.29.0

