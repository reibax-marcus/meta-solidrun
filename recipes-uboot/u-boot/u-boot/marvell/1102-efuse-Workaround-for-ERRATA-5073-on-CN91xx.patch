From 880454d9f8723aeeb75fb5bdcb3b014fe138e42e Mon Sep 17 00:00:00 2001
From: Srikanth Pidugu <spidugu@marvell.com>
Date: Thu, 30 Jan 2020 16:31:36 -0800
Subject: [PATCH 1102/1239] efuse: Workaround for ERRATA-5073 on CN91xx

HD efuse programming will fail on first write to any row due to
this errata. The workaround is to detect failure and retry the
fuse programming gracefully.

Change-Id: I09b95a419db92ac7eac308292ae69054092e0855
Signed-off-by: Srikanth Pidugu <spidugu@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22618
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Yi Guo <yi.guo@cavium.com>
---
 drivers/fuse/fuse-mvebu-hd.c | 80 +++++++++++++++++++++++++++++-------
 1 file changed, 66 insertions(+), 14 deletions(-)

diff --git a/drivers/fuse/fuse-mvebu-hd.c b/drivers/fuse/fuse-mvebu-hd.c
index 1a338fba0d..6f692c6906 100644
--- a/drivers/fuse/fuse-mvebu-hd.c
+++ b/drivers/fuse/fuse-mvebu-hd.c
@@ -35,12 +35,15 @@ int mvebu_efuse_hd_read(struct udevice *dev, int row_id, u32 *val)
 	return 0;
 }
 
+#define EFUSE_MAX_RETRIES	3
+
 static int do_mvebu_efuse_hd_prog(struct udevice *dev, int row_id, u32 *new_val)
 {
 	void __iomem *otp_mem, *ctrl_reg;
 	int row_base, i, row_widths;
 	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
 	u32 fuse_read_value[ROW_WORDS_LEN];
+	int retry_cnt = 0, err_flag = 0;
 
 	row_base = priv->row_base;
 	otp_mem = priv->target_otp_mem + (row_id - row_base) *
@@ -55,23 +58,72 @@ static int do_mvebu_efuse_hd_prog(struct udevice *dev, int row_id, u32 *new_val)
 	if (*(new_val + 1) & ECC_BITS_MASK)
 		return -EINVAL;
 
-	/* enable fuse prog */
-	setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-	/* read fuse row value before burn fuse */
-	for (i = 0; i < GET_LEN(row_widths); i++)
-		fuse_read_value[i] = readl(otp_mem + 4 * i);
-	/* fuse row value burn */
-	for (i = 0; i < GET_LEN(row_widths); i++) {
-		fuse_read_value[i] |= *(new_val + i);
-		writel(fuse_read_value[i], otp_mem + 4 * i);
-	}
+	do {
+		err_flag = 0;
+
+		/* enable fuse prog */
+		setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
 
-	/* wait 1 ms for burn efuse */
-	mdelay(1);
+		/* read fuse row value before burn fuse */
+		for (i = 0; i < GET_LEN(row_widths); i++)
+			fuse_read_value[i] = readl(otp_mem + 4 * i);
 
-	/* Disable efuse write */
-	clrbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+		/* fuse row value burn */
+		for (i = 0; i < GET_LEN(row_widths); i++) {
+			fuse_read_value[i] |= *(new_val + i);
+			writel(fuse_read_value[i], otp_mem + 4 * i);
+		}
+
+		/* wait 1 ms for burn efuse */
+		mdelay(1);
+
+		/* Disable efuse write */
+		clrbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+
+		/* ERRATA: 5073
+		 * When burning a row in the HD eFuse, the SM first read the
+		 * row to be burned to check it wasnt already burned, to prevent
+		 * re-buring. However, this errata causes the first HD burn
+		 * to read row zero instead of the targeted row, causing the
+		 * write to fail even if its empty. (The row zero is always
+		 * programmed in the production chips)
+		 *
+		 * The workaround is to detect failure by read and compare
+		 * and retry the fuse burn again (for max_retries = 3)
+		 */
+
+		/* Read & compare new read values with expected values */
+		for (i = 0; i < GET_LEN(row_widths); i++)
+			fuse_read_value[i] = readl(otp_mem + 4 * i);
+
+		for (i = 0; i < GET_LEN(row_widths); i++) {
+			dev_dbg(&dev->dev, "Expected value: 0x%x\n",
+				*(new_val + i));
+			/* Bank 1 has ECC bits which should
+			 * be masked while comparing
+			 */
+			if (i == 1)
+				fuse_read_value[i] &= ~ECC_BITS_MASK;
+			dev_dbg(&dev->dev, "Read value: 0x%x\n",
+				fuse_read_value[i]);
+			/* If comparison fails,
+			 * set error flag to initiate retry
+			 */
+			if (fuse_read_value[i] != *(new_val + i)) {
+				dev_dbg(&dev->dev, "Fuse prog failed\n");
+				err_flag = 1;
+				retry_cnt++;
+				dev_dbg(&dev->dev, "Retrying fuse prog..\n");
+			}
+		}
+	} while ((err_flag != 0) && (retry_cnt < EFUSE_MAX_RETRIES));
 
+	/* If we exceed retries limit, report error */
+	if (err_flag != 0) {
+		dev_err(&dev->dev, "fuse prog failed after %d retries\n",
+			retry_cnt);
+		return -EIO;
+	}
 	return 0;
 }
 
-- 
2.29.0

