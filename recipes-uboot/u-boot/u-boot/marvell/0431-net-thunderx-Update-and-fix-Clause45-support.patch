From 660b42740f6171d1268d56533643eae2a57b21a8 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Fri, 13 May 2016 19:03:18 -0400
Subject: [PATCH 0431/1239] net: thunderx: Update and fix Clause45 support

This commit fixes Clause45 support and allows tuning of
MDIO interfaces for different sampling modes via environment
variables

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/net/cavium/thunderx_smi.c | 95 +++++++++++++++++++++++--------
 1 file changed, 72 insertions(+), 23 deletions(-)

diff --git a/drivers/net/cavium/thunderx_smi.c b/drivers/net/cavium/thunderx_smi.c
index 9fcd332571..674dab8d46 100644
--- a/drivers/net/cavium/thunderx_smi.c
+++ b/drivers/net/cavium/thunderx_smi.c
@@ -9,6 +9,8 @@
 #include <miiphy.h>
 #include <malloc.h>
 #include <asm/io.h>
+#include <environment.h>
+#include <linux/ctype.h>
 
 enum thunderx_smi_mode {
 	CLAUSE22 = 0,
@@ -85,25 +87,30 @@ union smi_x_en {
 struct thunderx_priv {
 	int bus_num;
 	enum thunderx_smi_mode mode;
+	int sample_lo;
+	int sample_mode;
+	int sample_hi;
 };
 
-#define MDIO_TIMEOUT 256
+#define MDIO_TIMEOUT 10000
 
 void thunderx_smi_setmode(struct mii_dev *bus, enum thunderx_smi_mode mode)
 {
 	struct thunderx_priv *priv = bus->priv;
 	union smi_x_clk smix_clk;
 
-	if (priv->mode != mode) {
-		smix_clk.u = readq(SMI_X_CLK(priv->bus_num));
+	smix_clk.u = readq(SMI_X_CLK(priv->bus_num));
 
-		smix_clk.s.mode = mode;
-		smix_clk.s.preamble = 1;
+#if 0
+	smix_clk.s.sample = priv->sample_lo;
+	smix_clk.s.sample_mode = priv->sample_mode;
+	smix_clk.s.sample_hi =  priv->sample_hi;
+#endif
+	smix_clk.s.mode = mode;
+	smix_clk.s.preamble = mode == CLAUSE45;
+	writeq(smix_clk.u, SMI_X_CLK(priv->bus_num));
 
-		writeq(smix_clk.u, SMI_X_CLK(priv->bus_num));
-
-		priv->mode = mode;
-	}
+	priv->mode = mode;
 }
 
 int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
@@ -114,8 +121,6 @@ int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
 	union smi_x_wr_dat smix_wr_dat;
 	unsigned long timeout = MDIO_TIMEOUT;
 
-	thunderx_smi_setmode(bus, CLAUSE45);
-
 	smix_wr_dat.u = 0;
 	smix_wr_dat.s.dat = regnum;
 
@@ -130,7 +135,7 @@ int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
 
 	do {
 		smix_wr_dat.u = readq(SMI_X_WR_DAT(priv->bus_num));
-		udelay(1);
+		udelay(100);
 		timeout--;
 	} while (smix_wr_dat.s.pending && timeout);
 
@@ -155,24 +160,29 @@ int thunderx_phy_read(struct mii_dev *bus, int addr, int devad, int regnum)
 	if (mode == CLAUSE45) {
 		ret = thunderx_c45_addr(bus, addr, devad, regnum);
 
+		debug("RD: ret: %u\n", ret);
+
 		if (ret)
 			return 0;
 	}
 
 	smix_cmd.u = 0;
 	smix_cmd.s.phy_adr = addr;
-	smix_cmd.s.reg_adr = regnum;
 
-	if (mode == CLAUSE45)
+
+	if (mode == CLAUSE45) {
+		smix_cmd.s.reg_adr = devad;
 		smix_cmd.s.phy_op = SMI_OP_C45_READ;
-	else
+	} else {
+		smix_cmd.s.reg_adr = regnum;
 		smix_cmd.s.phy_op = SMI_OP_C22_READ;
+	}
 
 	writeq(smix_cmd.u, SMI_X_CMD(priv->bus_num));
 
 	do {
 		smix_rd_dat.u = readq(SMI_X_RD_DAT(priv->bus_num));
-		udelay(1);
+		udelay(10);
 		timeout--;
 	} while (smix_rd_dat.s.pending && timeout);
 
@@ -198,6 +208,8 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 	if (mode == CLAUSE45) {
 		ret = thunderx_c45_addr(bus, addr, devad, regnum);
 
+		debug("WR: ret: %u\n", ret);
+
 		if (ret)
 			return ret;
 	}
@@ -209,18 +221,20 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 
 	smix_cmd.u = 0;
 	smix_cmd.s.phy_adr = addr;
-	smix_cmd.s.reg_adr = regnum;
 
-	if (mode == CLAUSE45)
+	if (mode == CLAUSE45) {
+		smix_cmd.s.reg_adr = devad;
 		smix_cmd.s.phy_op = SMI_OP_C45_READ;
-	else
+	} else {
+		smix_cmd.s.reg_adr = regnum;
 		smix_cmd.s.phy_op = SMI_OP_C22_READ;
+	}
 
 	writeq(smix_cmd.u, SMI_X_CMD(priv->bus_num));
 
 	do {
 		smix_wr_dat.u = readq(SMI_X_WR_DAT(priv->bus_num));
-		udelay(1);
+		udelay(10);
 		timeout--;
 	} while (smix_wr_dat.s.pending && timeout);
 
@@ -251,8 +265,6 @@ int thunderx_smi_initialize(bd_t *bis, unsigned int index)
 	struct mii_dev *bus = mdio_alloc();
 	struct thunderx_priv *priv = malloc(sizeof(*priv));
 
-	debug("%s: %d\n", __FUNCTION__, __LINE__);
-
 	if (!bus || !priv) {
 		printf("Failed to allocate ThunderX MDIO bus # %u\n", index);
 		return -1;
@@ -267,10 +279,47 @@ int thunderx_smi_initialize(bd_t *bis, unsigned int index)
 	priv->bus_num = index;
 	priv->mode = CLAUSE22;
 
+	priv->sample_lo = 0;
+	priv->sample_hi = 0;
+	priv->sample_mode = 0;
+
 	/* use given name or generate its own unique name */
-	snprintf(bus->name, MDIO_NAME_LEN, "thunderx%d", priv->bus_num);
+	snprintf(bus->name, MDIO_NAME_LEN, "txsmi%d", priv->bus_num);
 
 	debug("%s: %d\n", __FUNCTION__, __LINE__);
 
 	return mdio_register(bus);
 }
+
+static int on_smimode(const char *name, const char *value, enum env_op op,
+	int flags)
+{
+	char *str;
+	int i = 0, mode;
+	struct mii_dev *bus;
+	struct thunderx_priv *priv;
+
+	str = strdup(name);
+
+	while (!isdigit(str[i++]));
+	while (isdigit(str[i++]));
+	str[i - 1] = '\0';
+
+	bus = miiphy_get_dev_by_name(str);
+
+	if (!bus) {
+		free(str);
+		return 0;
+	}
+
+	priv = bus->priv;
+
+	mode = simple_strtoul(value, NULL, 16);
+	priv->sample_lo = (mode >> 0) & 0xf;
+	priv->sample_hi = (mode >> 8) & 0x1f;
+	priv->sample_mode = (mode >> 16) & 0x1;
+
+	return 0;
+}
+
+U_BOOT_ENV_CALLBACK(smimode, on_smimode);
-- 
2.29.0

