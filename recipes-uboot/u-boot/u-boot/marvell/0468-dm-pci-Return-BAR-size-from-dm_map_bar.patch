From 2305780edb55b0856d5a5d9ef45fb1cf81ee3bda Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Wed, 18 May 2016 23:21:35 -0400
Subject: [PATCH 0468/1239] dm: pci: Return BAR size from dm_map_bar()

Return BAR size from dm_map_bar() to support advanced features

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/pci/pci-uclass.c | 39 +--------------------------------------
 include/pci.h            |  3 ++-
 2 files changed, 3 insertions(+), 39 deletions(-)

diff --git a/drivers/pci/pci-uclass.c b/drivers/pci/pci-uclass.c
index e4e0be9ebe..daadddbbae 100644
--- a/drivers/pci/pci-uclass.c
+++ b/drivers/pci/pci-uclass.c
@@ -1447,44 +1447,7 @@ pci_addr_t dm_pci_phys_to_bus(struct udevice *dev, phys_addr_t phys_addr,
 	return bus_addr;
 }
 
-static void *dm_pci_map_ea_bar(struct udevice *dev, int bar, int flags,
-			       int ea_off)
-{
-	int ea_cnt, i, entry_size;
-	int bar_id = (bar - PCI_BASE_ADDRESS_0) >> 2;
-	u32 ea_entry;
-	phys_addr_t addr;
-
-	/* EA capability structure header */
-	dm_pci_read_config32(dev, ea_off, &ea_entry);
-	ea_cnt = (ea_entry >> 16) & PCI_EA_NUM_ENT_MASK;
-	ea_off += PCI_EA_FIRST_ENT;
-
-	for (i = 0; i < ea_cnt; i++, ea_off += entry_size) {
-		/* Entry header */
-		dm_pci_read_config32(dev, ea_off, &ea_entry);
-		entry_size = ((ea_entry & PCI_EA_ES) + 1) << 2;
-
-		if (((ea_entry & PCI_EA_BEI) >> 4) != bar_id)
-			continue;
-
-		/* Base address, 1st DW */
-		dm_pci_read_config32(dev, ea_off + 4, &ea_entry);
-		addr = ea_entry & PCI_EA_FIELD_MASK;
-		if (ea_entry & PCI_EA_IS_64) {
-			/* Base address, 2nd DW, skip over 4B MaxOffset */
-			dm_pci_read_config32(dev, ea_off + 12, &ea_entry);
-			addr |= ((u64)ea_entry) << 32;
-		}
-
-		/* size ignored for now */
-		return map_physmem(addr, flags, 0);
-	}
-
-	return 0;
-}
-
-void *dm_pci_map_bar(struct udevice *dev, int bar, int flags)
+void *dm_pci_map_bar(struct udevice *dev, int bar, size_t *size, int flags)
 {
 	int ea_pos;
 	pci_addr_t pci_bus_start;
diff --git a/include/pci.h b/include/pci.h
index 9aba49751f..d37809dcd4 100644
--- a/include/pci.h
+++ b/include/pci.h
@@ -1592,10 +1592,11 @@ pci_addr_t dm_pci_phys_to_bus(struct udevice *dev, phys_addr_t addr,
  *
  * @dev:	Device to check
  * @bar:	Bar register offset (PCI_BASE_ADDRESS_...)
+ * @size:	BAR size
  * @flags:	Flags for the region type (PCI_REGION_...)
  * @return: pointer to the virtual address to use or 0 on error
  */
-void *dm_pci_map_bar(struct udevice *dev, int bar, int flags);
+void *dm_pci_map_bar(struct udevice *dev, int bar, size_t *size, int flags);
 
 /**
  * dm_pci_find_next_capability() - find a capability starting from an offset
-- 
2.29.0

