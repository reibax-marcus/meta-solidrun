From 57d94d48e8c578ade6b4a5cb9e3ade815d0a8753 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@caviumnetworks.com>
Date: Thu, 9 Aug 2018 14:40:49 -0700
Subject: [PATCH 0813/1239] net: octeontx2: check for link status before packet
 transfer

lmac link status should be checked in init call from network
stack, if not enabled, return error to avoid packet transfer.
Add error checks on the atf interface calls.

Signed-off-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 drivers/net/cavium/octeontx2/cgx.c | 46 +++++++++++++++++++++++++-----
 drivers/net/cavium/octeontx2/cgx.h |  2 ++
 drivers/net/cavium/octeontx2/nix.c | 17 +++++++++++
 3 files changed, 58 insertions(+), 7 deletions(-)

diff --git a/drivers/net/cavium/octeontx2/cgx.c b/drivers/net/cavium/octeontx2/cgx.c
index 8f1e0f32e0..98e5e2d8ad 100644
--- a/drivers/net/cavium/octeontx2/cgx.c
+++ b/drivers/net/cavium/octeontx2/cgx.c
@@ -139,12 +139,40 @@ int cgx_lmac_set_pkind(struct lmac *lmac, u8 lmac_id, int pkind)
 }
 
 
-int cgx_lmac_link_enable(struct lmac *lmac, int lmac_id, bool enable)
+int cgx_lmac_link_status(struct lmac *lmac, int lmac_id, u64 *status)
 {
-	u64 link;
+	int ret = 0;
+
+	ret = cgx_intf_get_link_sts(lmac->cgx->cgx_id,
+					lmac_id, status);
+	if (ret) {
+		printf("%s interface request failed for cgx%d lmac%d\n",
+			__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+		ret = -1;
+	}
+	return ret;
+}
 
-	return cgx_intf_link_up_dwn(lmac->cgx->cgx_id,
-					lmac_id, enable, &link);
+int cgx_lmac_link_enable(struct lmac *lmac, int lmac_id, bool enable)
+{
+	int ret = 0;
+	u64 status;
+
+	ret = cgx_intf_link_up_dwn(lmac->cgx->cgx_id,
+					lmac_id, enable, &status);
+	if (ret) {
+		printf("%s interface request failed for cgx%d lmac%d\n",
+			__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+		ret = -1;
+	}
+	status &= 0x1;
+	if (status != enable) {
+		printf("%s couldn't bring %s link cgx%d lmac%d\n",
+			__func__, enable ? "up" : "down",
+			lmac->cgx->cgx_id, lmac->lmac_id);
+		ret = -1;
+	}
+	return ret;
 }
 
 int cgx_lmac_internal_loopback(struct lmac *lmac, int lmac_id, bool enable)
@@ -196,7 +224,7 @@ static int cgx_lmac_init(struct cgx *cgx)
 	struct lmac *lmac;
 	union cavm_cgxx_cmrx_config cmrx_cfg;
 	static int instance = 1;
-	int i;
+	int i, ret;
 
 	cgx->lmac_count = cgx_read(cgx, 0, CAVM_CGXX_CMR_RX_LMACS());
 	debug("%s: Found %d lmacs for cgx %d@%p\n", __func__, cgx->lmac_count,
@@ -228,8 +256,12 @@ static int cgx_lmac_init(struct cgx *cgx)
 					lmac_type_to_str[lmac->lmac_type]);
 
 		cgx_lmac_mac_filter_setup(lmac);
-		cgx_lmac_link_enable(lmac, lmac->lmac_id, true);
-		cgx_lmac_rx_tx_enable(lmac, lmac->lmac_id, false);
+		ret = cgx_lmac_link_enable(lmac, lmac->lmac_id, true);
+		if (ret)
+			printf("%s could not bring up cgx%d lmac%d\n",
+				__func__, lmac->cgx->cgx_id, lmac->lmac_id);
+		else
+			cgx_lmac_rx_tx_enable(lmac, lmac->lmac_id, false);
 	}
 	return 0;
 }
diff --git a/drivers/net/cavium/octeontx2/cgx.h b/drivers/net/cavium/octeontx2/cgx.h
index d61973d387..52027f9419 100644
--- a/drivers/net/cavium/octeontx2/cgx.h
+++ b/drivers/net/cavium/octeontx2/cgx.h
@@ -91,8 +91,10 @@ int cgx_lmac_set_pkind(struct lmac *lmac, u8 lmac_id, int pkind);
 int cgx_lmac_internal_loopback(struct lmac *lmac, int lmac_id, bool enable);
 int cgx_lmac_rx_tx_enable(struct lmac *lmac, int lmac_id, bool enable);
 int cgx_lmac_link_enable(struct lmac *lmac, int lmac_id, bool enable);
+int cgx_lmac_link_status(struct lmac *lmac, int lmac_id, u64 *status);
 void cgx_lmac_mac_filter_setup(struct lmac *lmac);
 
+int cgx_intf_get_link_sts(u8 cgx, u8 lmac, u64 *lnk_sts);
 int cgx_intf_link_up_dwn(u8 cgx, u8 lmac, u8 up_dwn, u64 *lnk_sts);
 int cgx_intf_get_mac_addr(u8 cgx, u8 lmac, u8 *mac);
 
diff --git a/drivers/net/cavium/octeontx2/nix.c b/drivers/net/cavium/octeontx2/nix.c
index 19b8def90f..7e1ea4e213 100644
--- a/drivers/net/cavium/octeontx2/nix.c
+++ b/drivers/net/cavium/octeontx2/nix.c
@@ -774,12 +774,29 @@ int nix_lf_init(struct udevice *dev)
 {
 	struct rvu_pf *rvu = dev_get_priv(dev);
 	struct nix *nix = rvu->nix;
+	int ret;
+	u64 link_sts;
+
 #if 0
 	cgx_lmac_mac_filter_setup(nix->lmac);
 	/* Bring up LMAC */
 	cgx_lmac_link_enable(nix->lmac, nix->lmac->lmac_id, true);
 	cgx_lmac_mac_filter_setup(nix->lmac);
 #endif
+	ret = cgx_lmac_link_status(nix->lmac, nix->lmac->lmac_id, &link_sts);
+	if (ret) {
+		printf("%s failed to get link_sts for cgx%d lmac%d\n",
+			__func__, nix->lmac->cgx->cgx_id,
+			nix->lmac->lmac_id);
+		return -1;
+	}
+
+	if (!(link_sts & 0x1)) {
+		printf("%s cgx%d lmac%d link is down\n", __func__,
+			nix->lmac->cgx->cgx_id, nix->lmac->lmac_id);
+		return -1;
+	}
+
 	cgx_lmac_rx_tx_enable(nix->lmac, nix->lmac->lmac_id, true);
 
 	return 0;
-- 
2.29.0

