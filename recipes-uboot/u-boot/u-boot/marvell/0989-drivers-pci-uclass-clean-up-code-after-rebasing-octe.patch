From 7d18c9cb2558f19ebc78ed0d71525c5e9aff7e44 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Fri, 8 Nov 2019 17:02:18 -0800
Subject: [PATCH 0989/1239] drivers: pci-uclass: clean up code after rebasing
 octeontx

Change-Id: If0541b000d311e587794f9fdfbe2b09a0fa87666
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
---
 drivers/pci/Kconfig      |  9 +++++++++
 drivers/pci/pci-uclass.c | 35 +++++++++++++++++++----------------
 2 files changed, 28 insertions(+), 16 deletions(-)

diff --git a/drivers/pci/Kconfig b/drivers/pci/Kconfig
index 4fadc8cc84..ac4c5ad7a6 100644
--- a/drivers/pci/Kconfig
+++ b/drivers/pci/Kconfig
@@ -43,6 +43,15 @@ config PCI_PNP
 	help
 	  Enable PCI memory and I/O space resource allocation and assignment.
 
+config PCI_REGION_MULTI_ENTRY
+	bool "Enable Multiple entries of MEMORY region for PCI"
+	depends on PCI || DM_PCI
+	default n
+	help
+	  Enable PCI memory regions to be of multiple entry. This helps to
+	  add support for SoC's like OcteonTX/TX2 where every peripheral is
+	  on PCI bus.
+
 config PCIE_ECAM_GENERIC
 	bool "Generic ECAM-based PCI host controller support"
 	default n
diff --git a/drivers/pci/pci-uclass.c b/drivers/pci/pci-uclass.c
index f23886d453..5cee0fa935 100644
--- a/drivers/pci/pci-uclass.c
+++ b/drivers/pci/pci-uclass.c
@@ -609,12 +609,11 @@ int dm_pci_hose_probe_bus(struct udevice *bus)
 	if (ea_pos) {
 		dm_pci_read_config8(bus, ea_pos + sizeof(u32) + sizeof(u8), &reg);
 		sub_bus = reg;
-		debug("%s: bus = %d/%s\n", __func__, sub_bus, bus->name);
 	} else {
 		sub_bus = pci_get_bus_max() + 1;
-		debug("%s: bus = %d/%s\n", __func__, sub_bus, bus->name);
-		dm_pciauto_prescan_setup_bridge(bus, sub_bus);
 	}
+	debug("%s: bus = %d/%s\n", __func__, sub_bus, bus->name);
+	dm_pciauto_prescan_setup_bridge(bus, sub_bus);
 
 	ret = device_probe(bus);
 	if (ret) {
@@ -630,8 +629,8 @@ int dm_pci_hose_probe_bus(struct udevice *bus)
 			return -EPIPE;
 		}
 		sub_bus = pci_get_bus_max();
-		dm_pciauto_postscan_setup_bridge(bus, sub_bus);
 	}
+	dm_pciauto_postscan_setup_bridge(bus, sub_bus);
 
 	return sub_bus;
 }
@@ -688,7 +687,8 @@ static int pci_find_and_bind_driver(struct udevice *parent,
 	      find_id->vendor, find_id->device);
 
 	/* Determine optional OF node */
-	pci_dev_find_ofnode(parent, bdf, &node);
+	if (ofnode_valid(dev_ofnode(parent)))
+		pci_dev_find_ofnode(parent, bdf, &node);
 
 	start = ll_entry_start(struct pci_driver_entry, pci_driver_entry);
 	n_ents = ll_entry_count(struct pci_driver_entry, pci_driver_entry);
@@ -912,16 +912,19 @@ static void decode_regions(struct pci_controller *hose, ofnode parent_node,
 			continue;
 		}
 
-		pos = hose->region_count++;
+		pos = -1;
+#if !CONFIG_IS_ENABLED(PCI_REGION_MULTI_ENTRY)
+		for (i = 0; i < hose->region_count; i++) {
+			if (hose->regions[i].flags == type)
+				pos = i;
+		}
+#endif
+		if (pos == -1)
+			pos = hose->region_count++;
 		debug(" - type=%d, pos=%d\n", type, pos);
 		pci_set_region(hose->regions + pos, pci_addr, addr, size, type);
 	}
 
-	if(hose->region_count == MAX_PCI_REGIONS) {
-		printf("PCI region count reached limit, cannot add local memory region");
-		return 1;
-	}
-
 	/* Add a region for our local memory */
 #ifdef CONFIG_NR_DRAM_BANKS
 	bd_t *bd = gd->bd;
@@ -1362,7 +1365,7 @@ static void *dm_pci_map_ea_bar(struct udevice *dev, int bar, int flags,
 	phys_addr_t addr;
 
 	/* In case of Virtual Function devices, device is Physical function,
-	 * so pdata will point to required VF specific info
+	 * so pdata will point to required VF specific data.
 	 */
 	if (pdata->is_virtfn)
 		bar_id += PCI_EA_BEI_VF_BAR0;
@@ -1389,7 +1392,7 @@ static void *dm_pci_map_ea_bar(struct udevice *dev, int bar, int flags,
 			addr |= ((u64)ea_entry) << 32;
 		}
 
-		/* In case of Virtual Function devices using VF0 BAR
+		/* In case of Virtual Function devices using BAR
 		 * base and size, add offset for VFn BAR(1, 2, 3...n)
 		 */
 		if (pdata->is_virtfn) {
@@ -1401,7 +1404,7 @@ static void *dm_pci_map_ea_bar(struct udevice *dev, int bar, int flags,
 			/* Fill up lower 2 bits */
 			sz |= (~PCI_EA_FIELD_MASK);
 			if (ea_entry & PCI_EA_IS_64) {
-				/* Offset 2nd DW */
+				/* MaxOffset 2nd DW */
 				dm_pci_read_config32(dev, ea_off + 16,
 						     &ea_entry);
 				sz |= ((u64)ea_entry) << 32;
@@ -1583,7 +1586,7 @@ int pci_sriov_init(struct udevice *pdev, int vf_en)
 	pos = dm_pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_SRIOV);
 	if (!pos) {
 		printf("Error: SRIOV capability not found\n");
-		return -ENODEV;
+		return -ENOENT;
 	}
 
 	dm_pci_read_config16(pdev, pos + PCI_SRIOV_CTRL, &ctrl);
@@ -1672,7 +1675,7 @@ int pci_sriov_get_totalvfs(struct udevice *pdev)
 	pos = dm_pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_SRIOV);
 	if (!pos) {
 		printf("Error: SRIOV capability not found\n");
-		return -ENODEV;
+		return -ENOENT;
 	}
 
 	dm_pci_read_config16(pdev, pos + PCI_SRIOV_TOTAL_VF, &total_vf);
-- 
2.29.0

