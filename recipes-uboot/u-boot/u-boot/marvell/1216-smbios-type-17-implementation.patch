From 878d9de4cd257648dd08398ab0b7c3cf62562de0 Mon Sep 17 00:00:00 2001
From: Sujeet Baranwal <sbaranwal@marvell.com>
Date: Mon, 27 Jul 2020 10:50:38 -0700
Subject: [PATCH 1216/1239] smbios: type 17 implementation

This structure describes a single memory device that
is part of a larger Physical Memory Array structure.

Signed-off-by: Sujeet Baranwal <sbaranwal@marvell.com>
Change-Id: Ie6e184679c5c84f5585a64dcffec7bb67c0787b8
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/35168
Reviewed-by: Jia Ma <jiam@marvell.com>
Tested-by: Jia Ma <jiam@marvell.com>
---
 include/smbios.h | 45 +++++++++++++++++++++++++++++++++++++++++++++
 lib/smbios.c     | 38 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 83 insertions(+)

diff --git a/include/smbios.h b/include/smbios.h
index c16327174b..5286e18f74 100644
--- a/include/smbios.h
+++ b/include/smbios.h
@@ -26,6 +26,7 @@ enum {
 #define NO_OF_CACHE CACHE_MAX
 #define MAX_PORTS 3
 #define MAX_SLOTS 2
+#define MAX_MEMORY_DEV 1
 
 /* SMBIOS structure types */
 enum {
@@ -330,6 +331,50 @@ struct __packed smbios_type16 {
 	char eos[SMBIOS_STRUCT_EOS_BYTES];
 };
 
+/* Type 17 */
+#define DMTF_TYPE17_DIMM	0x09
+#define DMTF_TYPE17_4GB		BIT(12)
+
+struct __packed smbios_type17 {
+	u8 type;
+	u8 length;
+	u16 handle;
+	u16 physical_memory_array_handle;
+	u16 memory_error_information_handle;
+	u16 total_width;
+	u16 data_width;
+	u16 size;
+	u8 form_factor;
+	u8 device_set;
+	u8 device_locator;
+	u8 bank_locator;
+	u8 memory_type;
+	u16 type_detail;
+	u16 speed;
+	u8 manufacturer;
+	u8 serial_number;
+	u8 asset_tag;
+	u8 part_number;
+	u8 attributes;
+	u32 extended_size;
+	u16 configured_memory_speed;
+	u16 minimum_voltage;
+	u16 maximum_voltage;
+	u16 configured_voltage;
+	u8 memory_technology;
+	u16 memory_operating_mode_capability;
+	u8 firmware_version;
+	u16 module_manufacturer_id;
+	u16 module_product_id;
+	u16 memory_subsystem_controller_manufacturer_id;
+	u16 memory_subsystem_controller_product_id;
+	u32 non_volatile_size;
+	u32 volatile_size;
+	u32 cache_size;
+	u32 logical_size;
+	char eos[SMBIOS_STRUCT_EOS_BYTES];
+};
+
 struct __packed smbios_type32 {
 	u8 type;
 	u8 length;
diff --git a/lib/smbios.c b/lib/smbios.c
index 3a3adaab3a..7acb7cbbb7 100644
--- a/lib/smbios.c
+++ b/lib/smbios.c
@@ -455,6 +455,43 @@ static int smbios_write_type16(ulong *current, int handle)
 	return len;
 }
 
+static int smbios_write_type17_dm(ulong *current, int handle, int index)
+{
+	struct smbios_type17 *t;
+	int len = sizeof(struct smbios_type17);
+	const char *manufacturer = "UNKNOWN";
+
+	t = map_sysmem(*current, len);
+	memset(t, 0, sizeof(struct smbios_type17));
+	fill_smbios_header(t, SMBIOS_MEMORY_DEVICE, len, handle + index);
+
+	/* Data to be filled by OEM */
+	/* ...
+	 * ...
+	 * ...
+	 */
+	t->physical_memory_array_handle = 0x0800;
+	t->size = DMTF_TYPE17_4GB;
+	t->form_factor = DMTF_TYPE17_DIMM;
+	t->manufacturer = smbios_add_string(t->eos, manufacturer);
+
+	len = t->length + smbios_string_table_len(t->eos);
+	*current += len;
+	unmap_sysmem(t);
+
+	return len;
+}
+
+static int smbios_write_type17(ulong *current, int handle)
+{
+	u32 no_of_handles = MAX_MEMORY_DEV, i = 0, len = 0;
+
+	for (; i < no_of_handles; i++)
+		len += smbios_write_type17_dm(current, handle, i);
+
+	return len;
+}
+
 static int smbios_write_type32(ulong *current, int handle)
 {
 	struct smbios_type32 *t;
@@ -496,6 +533,7 @@ static smbios_write_type smbios_write_funcs[] = {
 	smbios_write_type9,
 	smbios_write_type13,
 	smbios_write_type16,
+	smbios_write_type17,
 	smbios_write_type32,
 	smbios_write_type127
 };
-- 
2.29.0

