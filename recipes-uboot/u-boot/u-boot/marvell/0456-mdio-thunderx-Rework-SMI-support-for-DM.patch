From 5b7ce152a1312c9228c138d77dd4a25e50884a11 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Tue, 17 May 2016 16:19:08 -0400
Subject: [PATCH 0456/1239] mdio: thunderx: Rework SMI support for DM

Use ECAM-based enumeration for SMI support which gives more
flexibility in SoC support

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/net/cavium/thunderx_smi.c | 138 +++++++++++++++++++-----------
 1 file changed, 89 insertions(+), 49 deletions(-)

diff --git a/drivers/net/cavium/thunderx_smi.c b/drivers/net/cavium/thunderx_smi.c
index 674dab8d46..6fce11bff1 100644
--- a/drivers/net/cavium/thunderx_smi.c
+++ b/drivers/net/cavium/thunderx_smi.c
@@ -5,13 +5,19 @@
 **/
 
 #include <common.h>
+#include <dm.h>
+#include <pci.h>
 #include <phy.h>
 #include <miiphy.h>
+#include <misc.h>
 #include <malloc.h>
 #include <asm/io.h>
 #include <environment.h>
 #include <linux/ctype.h>
 
+#define PCI_DEVICE_ID_THUNDERX_SMI	0xa02b
+#define THUNDERX_SMI_DEVS		2
+
 enum thunderx_smi_mode {
 	CLAUSE22 = 0,
 	CLAUSE45 = 1,
@@ -78,14 +84,14 @@ union smi_x_en {
 	} s;
 };
 
-#define SMI_X_RD_DAT(x)	(0x87E005003810ull + (x) * 0x80ull)
-#define SMI_X_WR_DAT(x)	(0x87E005003808ull + (x) * 0x80ull)
-#define SMI_X_CMD(x)	(0x87E005003800ull + (x) * 0x80ull)
-#define SMI_X_CLK(x)	(0x87E005003818ull + (x) * 0x80ull)
-#define SMI_X_EN(x)	(0x87E005003820ull + (x) * 0x80ull)
+#define SMI_X_RD_DAT	0x3810ull
+#define SMI_X_WR_DAT	0x3808ull
+#define SMI_X_CMD	0x3800ull
+#define SMI_X_CLK	0x3818ull
+#define SMI_X_EN	0x3820ull
 
-struct thunderx_priv {
-	int bus_num;
+struct thunderx_smi_priv {
+	void __iomem *baseaddr;
 	enum thunderx_smi_mode mode;
 	int sample_lo;
 	int sample_mode;
@@ -96,10 +102,10 @@ struct thunderx_priv {
 
 void thunderx_smi_setmode(struct mii_dev *bus, enum thunderx_smi_mode mode)
 {
-	struct thunderx_priv *priv = bus->priv;
+	struct thunderx_smi_priv *priv = bus->priv;
 	union smi_x_clk smix_clk;
 
-	smix_clk.u = readq(SMI_X_CLK(priv->bus_num));
+	smix_clk.u = readq(priv->baseaddr + SMI_X_CLK);
 
 #if 0
 	smix_clk.s.sample = priv->sample_lo;
@@ -108,14 +114,14 @@ void thunderx_smi_setmode(struct mii_dev *bus, enum thunderx_smi_mode mode)
 #endif
 	smix_clk.s.mode = mode;
 	smix_clk.s.preamble = mode == CLAUSE45;
-	writeq(smix_clk.u, SMI_X_CLK(priv->bus_num));
+	writeq(smix_clk.u, priv->baseaddr + SMI_X_CLK);
 
 	priv->mode = mode;
 }
 
 int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
 {
-	struct thunderx_priv *priv = bus->priv;
+	struct thunderx_smi_priv *priv = bus->priv;
 
 	union smi_x_cmd smix_cmd;
 	union smi_x_wr_dat smix_wr_dat;
@@ -124,17 +130,17 @@ int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
 	smix_wr_dat.u = 0;
 	smix_wr_dat.s.dat = regnum;
 
-	writeq(smix_wr_dat.u, SMI_X_WR_DAT(priv->bus_num));
+	writeq(smix_wr_dat.u, priv->baseaddr + SMI_X_WR_DAT);
 
 	smix_cmd.u = 0;
 	smix_cmd.s.phy_op = SMI_OP_C45_ADDR;
 	smix_cmd.s.phy_adr = addr;
 	smix_cmd.s.reg_adr = devad;
 
-	writeq(smix_cmd.u, SMI_X_CMD(priv->bus_num));
+	writeq(smix_cmd.u, priv->baseaddr + SMI_X_CMD);
 
 	do {
-		smix_wr_dat.u = readq(SMI_X_WR_DAT(priv->bus_num));
+		smix_wr_dat.u = readq(priv->baseaddr + SMI_X_WR_DAT);
 		udelay(100);
 		timeout--;
 	} while (smix_wr_dat.s.pending && timeout);
@@ -144,7 +150,7 @@ int thunderx_c45_addr(struct mii_dev *bus, int addr, int devad, int regnum)
 
 int thunderx_phy_read(struct mii_dev *bus, int addr, int devad, int regnum)
 {
-	struct thunderx_priv *priv = bus->priv;
+	struct thunderx_smi_priv *priv = bus->priv;
 	union smi_x_cmd smix_cmd;
 	union smi_x_rd_dat smix_rd_dat;
 	unsigned long timeout = MDIO_TIMEOUT;
@@ -152,8 +158,8 @@ int thunderx_phy_read(struct mii_dev *bus, int addr, int devad, int regnum)
 
 	enum thunderx_smi_mode mode = (devad < 0) ? CLAUSE22 : CLAUSE45;
 
-	debug("RD: Mode: %u, index: %u, addr: %d, devad: %d, reg: %d\n",
-	      mode, priv->bus_num, addr, devad, regnum);
+	debug("RD: Mode: %u, baseaddr: %p, addr: %d, devad: %d, reg: %d\n",
+	      mode, priv->baseaddr, addr, devad, regnum);
 
 	thunderx_smi_setmode(bus, mode);
 
@@ -178,10 +184,10 @@ int thunderx_phy_read(struct mii_dev *bus, int addr, int devad, int regnum)
 		smix_cmd.s.phy_op = SMI_OP_C22_READ;
 	}
 
-	writeq(smix_cmd.u, SMI_X_CMD(priv->bus_num));
+	writeq(smix_cmd.u, priv->baseaddr + SMI_X_CMD);
 
 	do {
-		smix_rd_dat.u = readq(SMI_X_RD_DAT(priv->bus_num));
+		smix_rd_dat.u = readq(priv->baseaddr + SMI_X_RD_DAT);
 		udelay(10);
 		timeout--;
 	} while (smix_rd_dat.s.pending && timeout);
@@ -194,7 +200,7 @@ int thunderx_phy_read(struct mii_dev *bus, int addr, int devad, int regnum)
 int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 		       u16 value)
 {
-	struct thunderx_priv *priv = bus->priv;
+	struct thunderx_smi_priv *priv = bus->priv;
 	union smi_x_cmd smix_cmd;
 	union smi_x_wr_dat smix_wr_dat;
 	unsigned long timeout = MDIO_TIMEOUT;
@@ -202,8 +208,8 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 
 	enum thunderx_smi_mode mode = (devad < 0) ? CLAUSE22 : CLAUSE45;
 
-	debug("WR: Mode: %u, index: %u, addr: %d, devad: %d, reg: %d\n",
-	      mode, priv->bus_num, addr, devad, regnum);
+	debug("WR: Mode: %u, baseaddr: %p, addr: %d, devad: %d, reg: %d\n",
+	      mode, priv->baseaddr, addr, devad, regnum);
 
 	if (mode == CLAUSE45) {
 		ret = thunderx_c45_addr(bus, addr, devad, regnum);
@@ -217,7 +223,7 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 	smix_wr_dat.u = 0;
 	smix_wr_dat.s.dat = value;
 
-	writeq(smix_wr_dat.u, SMI_X_WR_DAT(priv->bus_num));
+	writeq(smix_wr_dat.u, priv->baseaddr + SMI_X_WR_DAT);
 
 	smix_cmd.u = 0;
 	smix_cmd.s.phy_adr = addr;
@@ -230,10 +236,10 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 		smix_cmd.s.phy_op = SMI_OP_C22_READ;
 	}
 
-	writeq(smix_cmd.u, SMI_X_CMD(priv->bus_num));
+	writeq(smix_cmd.u, priv->baseaddr + SMI_X_CMD);
 
 	do {
-		smix_wr_dat.u = readq(SMI_X_WR_DAT(priv->bus_num));
+		smix_wr_dat.u = readq(priv->baseaddr + SMI_X_WR_DAT);
 		udelay(10);
 		timeout--;
 	} while (smix_wr_dat.s.pending && timeout);
@@ -245,50 +251,61 @@ int thunderx_phy_write(struct mii_dev *bus, int addr, int devad, int regnum,
 
 int thunderx_smi_reset(struct mii_dev *bus)
 {
-	struct thunderx_priv *priv = bus->priv;
+	struct thunderx_smi_priv *priv = bus->priv;
 
 	union smi_x_en smi_en;
 
 	smi_en.s.en = 0;
-	writeq(smi_en.u, SMI_X_EN(priv->bus_num));
+	writeq(smi_en.u, priv->baseaddr + SMI_X_EN);
 
 	smi_en.s.en = 1;
-	writeq(smi_en.u, SMI_X_EN(priv->bus_num));
+	writeq(smi_en.u, priv->baseaddr + SMI_X_EN);
 
 	thunderx_smi_setmode(bus, CLAUSE22);
 
 	return 0;
 }
 
-int thunderx_smi_initialize(bd_t *bis, unsigned int index)
+int thunderx_smi_probe(struct udevice *dev)
 {
-	struct mii_dev *bus = mdio_alloc();
-	struct thunderx_priv *priv = malloc(sizeof(*priv));
+	struct mii_dev *bus;
+	int ctlr, ret;
 
-	if (!bus || !priv) {
-		printf("Failed to allocate ThunderX MDIO bus # %u\n", index);
-		return -1;
-	}
+	struct thunderx_smi_priv *priv;
+
+	for (ctlr = 0; ctlr < THUNDERX_SMI_DEVS; ctlr++) {
+		bus = mdio_alloc();
+		priv = malloc(sizeof(*priv));
+
+		if (!bus || !priv) {
+			printf("Failed to allocate ThunderX MDIO bus # %u\n", dev->seq);
+			return -1;
+		}
 
-	bus->read = thunderx_phy_read;
-	bus->write = thunderx_phy_write;
-	bus->reset = thunderx_smi_reset;
+		bus->read = thunderx_phy_read;
+		bus->write = thunderx_phy_write;
+		bus->reset = thunderx_smi_reset;
 
-	bus->priv = priv;
+		bus->priv = priv;
 
-	priv->bus_num = index;
-	priv->mode = CLAUSE22;
+		priv->baseaddr = dm_pci_map_bar(dev, PCI_BASE_ADDRESS_0,
+						PCI_REGION_MEM) + 0x80 * ctlr;
+		priv->mode = CLAUSE22;
 
-	priv->sample_lo = 0;
-	priv->sample_hi = 0;
-	priv->sample_mode = 0;
+		priv->sample_lo = 0;
+		priv->sample_hi = 0;
+		priv->sample_mode = 0;
 
-	/* use given name or generate its own unique name */
-	snprintf(bus->name, MDIO_NAME_LEN, "txsmi%d", priv->bus_num);
+		/* use given name or generate its own unique name */
+		snprintf(bus->name, MDIO_NAME_LEN, "txsmi%d", ctlr);
 
-	debug("%s: %d\n", __FUNCTION__, __LINE__);
+		ret = mdio_register(bus);
 
-	return mdio_register(bus);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
 }
 
 static int on_smimode(const char *name, const char *value, enum env_op op,
@@ -297,7 +314,7 @@ static int on_smimode(const char *name, const char *value, enum env_op op,
 	char *str;
 	int i = 0, mode;
 	struct mii_dev *bus;
-	struct thunderx_priv *priv;
+	struct thunderx_smi_priv *priv;
 
 	str = strdup(name);
 
@@ -323,3 +340,26 @@ static int on_smimode(const char *name, const char *value, enum env_op op,
 }
 
 U_BOOT_ENV_CALLBACK(smimode, on_smimode);
+
+static const struct misc_ops thunderx_smi_ops = {
+};
+
+static const struct udevice_id thunderx_smi_ids[] = {
+	{ .compatible = "cavium,mdio" },
+	{}
+};
+
+U_BOOT_DRIVER(thunderx_smi) = {
+	.name	= "thunderx_smi",
+	.id	= UCLASS_MISC,
+	.probe	= thunderx_smi_probe,
+	.of_match = thunderx_smi_ids,
+	.ops	= &thunderx_smi_ops,
+};
+
+static struct pci_device_id thunderx_smi_supported[] = {
+	{ PCI_VDEVICE(CAVIUM, PCI_DEVICE_ID_THUNDERX_SMI) },
+	{}
+};
+
+U_BOOT_PCI_DEVICE(thunderx_smi, thunderx_smi_supported);
-- 
2.29.0

