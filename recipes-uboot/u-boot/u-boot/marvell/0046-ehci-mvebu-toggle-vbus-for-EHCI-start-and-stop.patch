From 62b8cfcfeac111d0568676ee3de7ca7ac0723192 Mon Sep 17 00:00:00 2001
From: allen yan <yanwei@marvell.com>
Date: Fri, 8 Dec 2017 11:06:59 +0800
Subject: [PATCH 0046/1239] ehci: mvebu: toggle vbus for EHCI start and stop

Currently, the VBUS for EHCI is fixed on 5v and never toggle it
when do usb start and usb stop.
According the USB2.0 SPEC, the timing between VBUS on and USB
enumeration should be 200ms. But now the timing depends on
when to run the command "usb start" and it maybe a long time. It
is not follow the USB2.0 SPEC and will cause some u-disk misdetection.
This patch add toggle VBUS for EHCI to follow the time requirement
in USB2.0 SPEC and also add marvell.ehci-usb document.

Change-Id: I5b10b6a391ef1cb13df627fb9eb3126509862d9f
Signed-off-by: allen yan <yanwei@marvell.com>
Reviewed-by: Igal Liberman <igall@marvell.com>
---
 .../usb/marvell.ehci-usb.txt                  | 22 +++++++++
 drivers/usb/host/ehci-marvell.c               | 45 ++++++++++++++++++-
 2 files changed, 66 insertions(+), 1 deletion(-)
 create mode 100644 doc/device-tree-bindings/usb/marvell.ehci-usb.txt

diff --git a/doc/device-tree-bindings/usb/marvell.ehci-usb.txt b/doc/device-tree-bindings/usb/marvell.ehci-usb.txt
new file mode 100644
index 0000000000..3c26403d5d
--- /dev/null
+++ b/doc/device-tree-bindings/usb/marvell.ehci-usb.txt
@@ -0,0 +1,22 @@
+Marvell SOC USB controllers
+
+This controller is integrated in Armada 3700.
+It uses the same properties as a generic EHCI host controller
+
+Required properties :
+ - compatible: should be one or more of:
+   - "marvell,armada3700-ehci", "marvell,orion-ehci"
+ - reg: should contain address and length of the standard EHCI
+   register set for the device.
+
+Optional properties:
+ - vbus-supply : If present, specifies the fixed regulator to be turned on
+   for providing power to the USB VBUS rail.
+
+Example:
+	usb2: usb@5e000 {
+		compatible = "marvell,armada3700-ehci";
+		reg = <0x5e000 0x450>;
+		vbus-supply = <&reg_usb2_vbus>;
+		status = "disabled";
+	};
\ No newline at end of file
diff --git a/drivers/usb/host/ehci-marvell.c b/drivers/usb/host/ehci-marvell.c
index 8efe6b63b9..a52560d719 100644
--- a/drivers/usb/host/ehci-marvell.c
+++ b/drivers/usb/host/ehci-marvell.c
@@ -12,6 +12,7 @@
 #include <linux/mbus.h>
 #include <asm/arch/cpu.h>
 #include <dm.h>
+#include <power/regulator.h>
 
 #if defined(CONFIG_KIRKWOOD)
 #include <asm/arch/soc.h>
@@ -103,6 +104,10 @@ static int ehci_mvebu_probe(struct udevice *dev)
 	struct ehci_mvebu_priv *priv = dev_get_priv(dev);
 	struct ehci_hccr *hccr;
 	struct ehci_hcor *hcor;
+#ifdef CONFIG_DM_REGULATOR
+	struct udevice *regulator;
+	int ret;
+#endif
 
 	/*
 	 * Get the base address for EHCI controller from the device node
@@ -125,6 +130,18 @@ static int ehci_mvebu_probe(struct udevice *dev)
 	else
 		usb_brg_adrdec_setup((void *)priv->hcd_base);
 
+	/* Enable VBUS */
+#ifdef CONFIG_DM_REGULATOR
+	ret = device_get_supply_regulator(dev, "vbus-supply", &regulator);
+	if (!ret) {
+		ret = regulator_set_enable(regulator, true);
+		if (ret) {
+			printf("Failed to turn ON the VBUS regulator\n");
+			return ret;
+		}
+	}
+#endif
+
 	hccr = (struct ehci_hccr *)(priv->hcd_base + 0x100);
 	hcor = (struct ehci_hcor *)
 		((uintptr_t)hccr + HC_LENGTH(ehci_readl(&hccr->cr_capbase)));
@@ -137,6 +154,32 @@ static int ehci_mvebu_probe(struct udevice *dev)
 			     USB_INIT_HOST);
 }
 
+static int ehci_usb_remove(struct udevice *dev)
+{
+	int ret;
+#ifdef CONFIG_DM_REGULATOR
+	struct udevice *regulator;
+#endif
+
+	ret = ehci_deregister(dev);
+	if (ret)
+		return ret;
+
+	/* Disable VBUS */
+#ifdef CONFIG_DM_REGULATOR
+	ret = device_get_supply_regulator(dev, "vbus-supply", &regulator);
+	if (!ret) {
+		ret = regulator_set_enable(regulator, false);
+		if (ret) {
+			printf("Failed to turn OFF the VBUS regulator\n");
+			return ret;
+		}
+	}
+#endif
+
+	return 0;
+}
+
 static const struct udevice_id ehci_usb_ids[] = {
 	{ .compatible = "marvell,orion-ehci", },
 	{ .compatible = "marvell,armada3700-ehci", },
@@ -148,7 +191,7 @@ U_BOOT_DRIVER(ehci_mvebu) = {
 	.id	= UCLASS_USB,
 	.of_match = ehci_usb_ids,
 	.probe = ehci_mvebu_probe,
-	.remove = ehci_deregister,
+	.remove = ehci_usb_remove,
 	.ops	= &ehci_usb_ops,
 	.platdata_auto_alloc_size = sizeof(struct usb_platdata),
 	.priv_auto_alloc_size = sizeof(struct ehci_mvebu_priv),
-- 
2.29.0

