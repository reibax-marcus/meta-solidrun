From a404b98c80e9513978bc97cc16a7b7ffd024aaff Mon Sep 17 00:00:00 2001
From: David Sniatkiwicz <davidsn@marvell.com>
Date: Mon, 24 Apr 2017 11:33:33 +0300
Subject: [PATCH 0115/1239] cmd: mvebu: initial support for SAR infrastructure

Introduce sar infrastructure and sar/SatR cmd.
SAR or SatR stands for sample at reset.
satr cmd allows to control the hardware configuration.
This driver controls sampled at reset signals,
usually on i2c bios devices.
This signal represents various HW configuration for the SoC,
such as CPU/DDR frequency, boot source selection, etc

Both sar and SatR are used because we want to keep the back support
for SatR cmd from uboot-2015 but gradually move to sar cmd.

Change-Id: Ic2c50712d2a7b97dcbaa37ae122e17795bd37f19
Signed-off-by: zachary zhang <zhangzg@marvell.com>
---
 board/Marvell/common/Kconfig  |   9 +
 board/Marvell/common/Makefile |   1 +
 board/Marvell/common/sar.c    | 516 ++++++++++++++++++++++++++++++++++
 cmd/Kconfig                   |   7 +
 cmd/mvebu/Makefile            |   1 +
 cmd/mvebu/sar.c               | 108 +++++++
 include/fdtdec.h              |   1 +
 include/mvebu/sar.h           |  60 ++++
 include/mvebu/var.h           |  31 ++
 lib/fdtdec.c                  |   3 +-
 10 files changed, 736 insertions(+), 1 deletion(-)
 create mode 100644 board/Marvell/common/sar.c
 create mode 100644 cmd/mvebu/sar.c
 create mode 100644 include/mvebu/sar.h
 create mode 100644 include/mvebu/var.h

diff --git a/board/Marvell/common/Kconfig b/board/Marvell/common/Kconfig
index 3aabf3fcaf..ec9d115ecc 100644
--- a/board/Marvell/common/Kconfig
+++ b/board/Marvell/common/Kconfig
@@ -10,4 +10,13 @@ config BOARD_CONFIG_EEPROM
 	  It will be enabled once the CMD_MVEBU_BOX_INFO or
 	  MULTI_DT_FILE is enabled
 
+config MVEBU_SAR
+	bool "Support MVEBU SAR Utility"
+	default n
+	help
+	  Say Y here to add support for Sample
+	  at Reset Utility. You need this only if
+	  you work on a Marvell development board.
+	  If not, keep this off to reduce code size
+
 endmenu
diff --git a/board/Marvell/common/Makefile b/board/Marvell/common/Makefile
index 4c1d181138..1adfef4246 100644
--- a/board/Marvell/common/Makefile
+++ b/board/Marvell/common/Makefile
@@ -6,3 +6,4 @@
 #
 
 obj-$(CONFIG_BOARD_CONFIG_EEPROM)	+= cfg_eeprom.o
+obj-$(CONFIG_MVEBU_SAR)	+= sar.o
diff --git a/board/Marvell/common/sar.c b/board/Marvell/common/sar.c
new file mode 100644
index 0000000000..6e94196304
--- /dev/null
+++ b/board/Marvell/common/sar.c
@@ -0,0 +1,516 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:       GPL-2.0+
+ * https://spdx.org/licenses
+ */
+
+#include <common.h>
+#include <errno.h>
+#include <asm/io.h>
+#include <i2c.h>
+#include <fdtdec.h>
+#include <mvebu/sar.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+struct sar_data  __attribute__((section(".data"))) sar_board;
+#define board_get_sar() (&sar_board)
+#define board_get_sar_table() (sar_board.sar_lookup)
+
+static u32 swap_value(u32 val, u32 bit_length)
+{
+	u32 var_mask = (1 << bit_length) - 1;
+
+	val = (val & 0xFFFF0000) >> 16 | (val & 0x0000FFFF) << 16;
+	val = (val & 0xFF00FF00) >> 8 | (val & 0x00FF00FF) << 8;
+	val = (val & 0xF0F0F0F0) >> 4 | (val & 0x0F0F0F0F) << 4;
+	val = (val & 0xCCCCCCCC) >> 2 | (val & 0x33333333) << 2;
+	val = (val & 0xAAAAAAAA) >> 1 | (val & 0x55555555) << 1;
+	val = (val >> (32 - bit_length)) & var_mask;
+	debug("value is swaped, new value = 0x%x\n", val);
+
+	return val;
+}
+
+static int sar_read_reg(u32 *reg)
+{
+	struct udevice *dev;
+	uchar byte = 0;
+	int ret, chip;
+	u32 sar_reg = 0;
+	struct sar_data *sar = board_get_sar();
+	int reg_width = sar->bit_width;
+	u8  reg_mask = (1 << reg_width) - 1;
+
+	for (chip = 0; chip  < sar->chip_count; chip++) {
+		ret = i2c_get_chip_for_busnum(0, sar->chip_addr[chip], 1, &dev);
+		if (ret) {
+			printf("Error: %s: Failed getting chip busnum 0x%x\n",
+			       __func__, sar->chip_addr[chip]);
+			return -1;
+		}
+		ret = dm_i2c_read(dev, 0, &byte, 1);
+		if (ret) {
+			printf("Error: %s: Failed reading from chip 0x%x\n",
+			       __func__, sar->chip_addr[chip]);
+			return -1;
+		}
+		sar_reg |= (byte & reg_mask) << (chip * reg_width);
+	}
+	debug("read: sar register = 0x%08x\n", sar_reg);
+	*reg = sar_reg;
+
+	return 0;
+}
+
+int sar_write_reg(u32 sar_reg)
+{
+	struct udevice *dev;
+	uchar byte = 0;
+	int ret, chip;
+	struct sar_data *sar = board_get_sar();
+	int reg_width = sar->bit_width;
+	u8  reg_mask = (1 << reg_width) - 1;
+
+	for (chip = 0; chip  < sar->chip_count; chip++) {
+		byte = (sar_reg >> (chip * reg_width)) & reg_mask;
+		ret = i2c_get_chip_for_busnum(0, sar->chip_addr[chip], 1, &dev);
+		if (ret) {
+			printf("Error: %s: Failed getting chip busnum 0x%x\n",
+			       __func__, sar->chip_addr[chip]);
+			return -1;
+		}
+
+		ret = dm_i2c_write(dev, 0, &byte, 1);
+		if (ret) {
+			printf("Error: %s: Failed writing to chip 0x%x\n",
+			       __func__, sar->chip_addr[chip]);
+			return -1;
+		}
+	}
+	debug("write: sar register = 0x%08x\n", sar_reg);
+	/*
+	 * Wait for the write to complete. The write can take
+	 * up to 10mSec (we allow a little more time).
+	 */
+	mdelay(11);
+
+	return 0;
+}
+
+int sar_read_var(struct sar_var *var, int *val)
+{
+	u32 sar_reg;
+	u32 var_mask = (1 << var->bit_length) - 1;
+
+	if (sar_read_reg(&sar_reg))
+		return -1;
+
+	(*val) = (sar_reg >> var->start_bit) & var_mask;
+	if (var->swap_bit)
+		(*val) = swap_value(*val, var->bit_length);
+
+	debug("var offset = %d len = %d val = 0x%x\n", var->start_bit,
+	      var->bit_length, (*val));
+
+	return 0;
+}
+
+int sar_write_var(struct sar_var *var, int val)
+{
+	u32 sar_reg;
+	u32 var_mask = (1 << var->bit_length) - 1;
+
+	if (sar_read_reg(&sar_reg))
+		return -1;
+
+	/* Update the bitfield inside the sar register */
+	if (var->swap_bit)
+		val = swap_value(val, var->bit_length);
+	val &= var_mask;
+	sar_reg &= ~(var_mask << var->start_bit);
+	sar_reg |= (val << var->start_bit);
+
+	/* Write the full sar register back to i2c */
+	if (sar_write_reg(sar_reg))
+		return -1;
+
+	return 0;
+}
+
+static int sar_default_var(struct sar_var *var)
+{
+	struct var_opts *opts;
+	struct var_opts *dflt =	NULL;
+	int i;
+
+	opts = var->option_desc;
+
+	for (i = 0; i < var->option_cnt; i++, opts++) {
+		if (opts->flags & VAR_IS_DEFAULT)
+			dflt = opts;
+	}
+
+	if (!dflt) {
+		printf("Error: Failed to find default option");
+		return -1;
+	}
+
+	if (sar_write_var(var, dflt->value)) {
+		printf("Error: Failed to write default value");
+		return -1;
+	}
+
+	debug("Wrote default value 0x%x = %s\n", dflt->value, dflt->desc);
+	return 0;
+}
+
+int sar_get_key_id(const char *key)
+{
+	struct sar_var *sar_table = board_get_sar_table();
+	int id;
+
+	for (id = 0; id < MAX_SAR; id++) {
+		if (strcmp(key, sar_table[id].key) == 0)
+			return id;
+	}
+	return -1;
+}
+
+int sar_is_var_active(int id)
+{
+	struct sar_var *sar_table = board_get_sar_table();
+
+	return sar_table[id].active;
+}
+
+struct var_opts *sar_get_var_opts(int id, int *cnt)
+{
+	struct sar_var *sar_table = board_get_sar_table();
+
+	(*cnt) = sar_table[id].option_cnt;
+
+	return sar_table[id].option_desc;
+}
+
+int sar_validate_key(const char *key)
+{
+	int id = sar_get_key_id(key);
+
+	if (id  == -1) {
+		printf("Satr: Error: Unknown key \"%s\"\n", key);
+		return -1;
+	}
+	if (sar_is_var_active(id) == 0) {
+		printf("Satr: Error: Key \"%s\" is inactive on this board\n",
+		       key);
+		return -1;
+	}
+	return id;
+}
+
+struct sar_var *sar_id_to_var(int id)
+{
+	struct sar_var *sar_table = board_get_sar_table();
+
+	sar_table += id;
+	return sar_table;
+}
+
+/* Interface to SatR command */
+int sar_is_available(void)
+{
+	if (!board_get_sar_table())
+		return 0;
+	else
+		return 1;
+}
+
+void sar_print_var(int id, bool print_opts)
+{
+	int cnt;
+	struct var_opts *opts;
+	struct sar_var *sar_table = board_get_sar_table();
+
+	printf("%-10s %s\n", sar_table[id].key, sar_table[id].desc);
+
+	if (print_opts) {
+		opts = sar_get_var_opts(id, &cnt);
+		while (cnt--) {
+			printf("\t0x%-2x %s ", opts->value, opts->desc);
+			if (opts->flags & VAR_IS_DEFAULT)
+				printf("[Default]");
+			printf("\n");
+			opts++;
+		}
+	}
+}
+
+int sar_read_all(void)
+{
+	struct sar_var *var;
+	int id;
+
+	for (id = 0; id < MAX_SAR; id++)
+		if (sar_is_var_active(id)) {
+			var = sar_id_to_var(id);
+			sar_print_key(var->key);
+		}
+
+	return 0;
+}
+
+void sar_list_keys(void)
+{
+	int id;
+
+	printf("\n");
+	for (id = 0; id < MAX_SAR; id++) {
+		if (sar_is_var_active(id))
+			sar_print_var(id, 0);
+	}
+	printf("\n");
+}
+
+int sar_list_key_opts(const char *key)
+{
+	int id = sar_validate_key(key);
+
+	if (id == -1)
+		return -EINVAL;
+
+	printf("\n");
+	sar_print_var(id, 1);
+	printf("\n");
+
+	return 0;
+}
+
+int  sar_print_key(const char *key)
+{
+	int id = sar_validate_key(key);
+	struct sar_var *var;
+	struct var_opts *opts;
+	char *desc = NULL;
+	int val, ret, cnt;
+
+	if (id == -1)
+		return -EINVAL;
+
+	var = sar_id_to_var(id);
+	ret = sar_read_var(var, &val);
+	if (ret)
+		return ret;
+
+	opts = sar_get_var_opts(id, &cnt);
+	while (cnt--) {
+		if (opts->value == val)
+			desc = opts->desc;
+		opts++;
+	}
+
+	if (!desc)
+		printf("%s = 0x%x  ERROR: UNKNOWN OPTION\n", key, val);
+	else
+		printf("%s = 0x%x  %s\n", key, val, desc);
+
+	return 0;
+}
+
+int  sar_write_key(const char *key, int val)
+{
+	int id = sar_validate_key(key);
+	struct sar_var *var;
+	struct var_opts *opts;
+	char *desc = NULL;
+	int cnt;
+
+	if (id == -1)
+		return -EINVAL;
+
+	var = sar_id_to_var(id);
+	opts = sar_get_var_opts(id, &cnt);
+	while (cnt--) {
+		if (opts->value == val)
+			desc = opts->desc;
+		opts++;
+	}
+
+	if (!desc) {
+		printf("ERROR: value 0x%x not supported for key %s\n",
+		       val, key);
+		printf("use \"SatR list %s\" to print supported values\n",
+		       key);
+		return -1;
+	}
+
+	if (sar_write_var(var, val))
+		return -1;
+
+	/* Display the updated variable */
+	sar_print_key(key);
+
+	return 0;
+}
+
+int sar_default_all(void)
+{
+	struct sar_var *var;
+	int id;
+	int ret = 0;
+
+	for (id = 0; id < MAX_SAR; id++) {
+		if (sar_is_var_active(id)) {
+			var = sar_id_to_var(id);
+			ret |= sar_default_var(var);
+			sar_print_key(var->key);
+		}
+	}
+
+	return ret;
+}
+
+int  sar_default_key(const char *key)
+{
+	int id = sar_validate_key(key);
+	struct sar_var *var;
+	int ret;
+
+	if (id == -1)
+		return -EINVAL;
+
+	var = sar_id_to_var(id);
+	ret = sar_default_var(var);
+	if (ret)
+		return ret;
+
+	/* Display the updated variable */
+	sar_print_key(key);
+
+	return 0;
+}
+
+static void sar_dump(void)
+{
+#ifdef DEBUG
+	struct sar_data *sar = board_get_sar();
+	struct sar_var *sar_var;
+	int i, id;
+
+	printf("Sample at reset Dumper:\n");
+	printf("\tSatR had %d chip addresses: ", sar->chip_count);
+	for (i = 0; i < sar->chip_count; i++)
+		printf("0x%x ", sar->chip_addr[i]);
+	printf("\n\tBit width for the I2C chip is: 0x%x\n", sar->bit_width);
+	printf("\tAll SatR variables thet available:\n");
+	for (i = 0, sar_var = sar->sar_lookup; i < MAX_SAR; i++, sar_var++) {
+		if (sar_var->active == 0)
+			continue;
+		printf("\t\tID = %d, ", i);
+		printf("Key = %s, ", sar_var->key);
+		printf("Desc. = %s", sar_var->desc);
+		if (sar_var->swap_bit)
+			printf(", BIT is swapped");
+		printf("\n\t\tStart bit = 0x%x, ", sar_var->start_bit);
+		printf("Bit length = %d\n", sar_var->bit_length);
+		printf("\t\tThis variable had %d options:\n",
+		       sar_var->option_cnt);
+		for (id = 0; id < sar_var->option_cnt; id++) {
+			printf("\t\t\tValue = 0x%x, ",
+			       sar_var->option_desc[id].value);
+			printf("Desc. = %s, ", sar_var->option_desc[id].desc);
+			printf("Is Default = %d\n",
+			       sar_var->option_desc[id].flags);
+		}
+	}
+#endif
+}
+
+void sar_init(void)
+{
+	int i, var_default;
+	int node, var, len, lenp;
+	const char *str;
+	const void *blob = gd->fdt_blob;
+	struct sar_var *sar_var;
+	struct sar_data *sar = board_get_sar();
+
+	/* Get sar node from the FDT blob */
+	node = fdt_node_offset_by_compatible(blob, -1,
+					     fdtdec_get_compatible(
+					     COMPAT_MVEBU_SAR));
+	if (node < 0) {
+		debug("No sar node found in FDT blob\n");
+		return;
+	}
+
+	/* Get the bit width of the sapmple at reset i2c register */
+	sar->bit_width = fdtdec_get_int(blob, node, "bit_width", 1);
+	/* Get the address count of sample at reset i2c */
+	sar->chip_count = fdtdec_get_int(blob, node, "chip_count", 1);
+	/* get the address in array */
+	if (fdtdec_get_int_array(blob, node, "reg",
+				 sar->chip_addr, sar->chip_count) != 0) {
+		pr_err("No sample at reset addresses found in FDT blob\n");
+		return;
+	}
+	/* Get the fisrt variable in sample at reset */
+	var = fdt_first_subnode(blob, node);
+	if (!var) {
+		pr_err("No sample at reset variables found in FDT\n");
+		return;
+	}
+	sar_var = sar->sar_lookup;
+	/* Find the variables under sample at reset node */
+	while (var > 0) {
+		/* if the variable is disabled skip it */
+		if (!fdtdec_get_is_enabled(blob, var)) {
+			/* Get the offset of the next subnode */
+			var = fdt_next_subnode(blob, var);
+			sar_var++;
+			continue;
+		}
+		/* Get the key of the var option */
+		sar_var->key = (char *)fdt_stringlist_get(blob, var, "key",
+							  0, &lenp);
+		/* Get the description of the var */
+		sar_var->desc = (char *)fdt_stringlist_get(blob, var,
+							   "description", 0,
+							   &lenp);
+		/* set the different options of the var */
+		sar_var->active = 1;
+		sar_var->start_bit = fdtdec_get_int(blob, var, "start-bit", 0);
+		sar_var->bit_length = fdtdec_get_int(blob, var,
+						     "bit-length", 0);
+		sar_var->option_cnt = fdtdec_get_int(blob, var,
+						     "option-cnt", 0);
+		sar_var->swap_bit = fdtdec_get_bool(blob, var, "swap-bit");
+		/* Get the options list */
+		len = fdt_stringlist_count(blob, var, "options");
+		if ((len < 0) || (sar_var->option_cnt * 2 != len)) {
+			pr_err("%s: failed to parse the \"options\" property",
+			       __func__);
+			return;
+		}
+		var_default = fdtdec_get_int(blob, var, "default", 0);
+		/* Fill the struct with the options from the FDT */
+		for (i = 0; i < len; i += 2) {
+			str = fdt_stringlist_get(blob, var, "options", i,
+						 &lenp);
+			sar_var->option_desc[i / 2].value = simple_strtoul(
+							  str, NULL, 16);
+			sar_var->option_desc[i / 2].desc =
+			(char *)fdt_stringlist_get(blob, var, "options",
+						   i + 1, &lenp);
+			if (sar_var->option_desc[i / 2].value == var_default)
+				sar_var->option_desc[i / 2].flags =
+				VAR_IS_DEFAULT;
+		}
+		/* Get the offset of the next subnode */
+		var = fdt_next_subnode(blob, var);
+		sar_var++;
+	}
+
+	sar_dump();
+}
diff --git a/cmd/Kconfig b/cmd/Kconfig
index 4e61565aab..da3a7eadc4 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -188,6 +188,13 @@ comment "Commands"
 
 menu "Info commands"
 
+config CMD_MVEBU_SAR
+	bool "sar"
+	depends on MVEBU_SAR
+	default n
+	help
+	  sar - Modify SOC's sample at reset (SAR) values
+
 config CMD_BDI
 	bool "bdinfo"
 	default y
diff --git a/cmd/mvebu/Makefile b/cmd/mvebu/Makefile
index 492612fbc8..7644152f49 100644
--- a/cmd/mvebu/Makefile
+++ b/cmd/mvebu/Makefile
@@ -11,3 +11,4 @@ obj-$(CONFIG_CMD_MVEBU_AVS) += avs.o
 obj-$(CONFIG_CMD_MVEBU_MAP) += map.o
 obj-$(CONFIG_CMD_MVEBU_TSEN) += thermal.o
 obj-$(CONFIG_CMD_MVEBU_HW_INFO) += hw_info.o
+obj-$(CONFIG_CMD_MVEBU_SAR) += sar.o
diff --git a/cmd/mvebu/sar.c b/cmd/mvebu/sar.c
new file mode 100644
index 0000000000..d7707fc2e6
--- /dev/null
+++ b/cmd/mvebu/sar.c
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:       GPL-2.0+
+ * https://spdx.org/licenses
+ */
+
+#include <config.h>
+#include <common.h>
+#include <command.h>
+#include <vsprintf.h>
+#include <errno.h>
+#include <i2c.h>
+#include <mvebu/sar.h>
+
+static int sar_initialized;
+
+int do_sar_cmd(cmd_tbl_t *cmdtp, int flag, int argc,
+	       char * const argv[])
+{
+	const char *cmd = argv[1];
+	const char *key = NULL;
+	int value = 0;
+
+	/* initialize sar driver variables from the device tree */
+	if (!sar_initialized) {
+		sar_init();
+		sar_initialized = 1;
+	}
+
+	if (sar_is_available() == 0) {
+		printf("Error: SAR variables not available for this board\n");
+		return 1;
+	}
+
+	if ((strcmp(cmd, "read") == 0) && (argc < 2)) {
+		printf("Error: Please specify SAR key\n");
+		return 1;
+	}
+
+	if ((strcmp(cmd, "write") == 0) && (argc < 4)) {
+		printf("Error: Please specify SAR key and value\n");
+		return 1;
+	}
+
+	if (argc > 2)
+		key = argv[2];
+	if (argc > 3)
+		value = (int)simple_strtoul(argv[3], NULL, 16);
+
+	if (strcmp(cmd, "list") == 0) {
+		if (argc < 3) {
+			sar_list_keys();
+		} else {
+			if (sar_list_key_opts(key))
+				return -EINVAL;
+		}
+	} else if (strcmp(cmd, "default") == 0) {
+		if (argc < 3) {
+			sar_default_all();
+		} else {
+			if (sar_default_key(key))
+				return -EINVAL;
+		}
+	} else if (strcmp(cmd, "read") == 0) {
+		if (!key)
+			sar_read_all();
+		else
+			if (sar_print_key(key))
+				return -EINVAL;
+	} else if (strcmp(cmd, "write") == 0) {
+		if (sar_write_key(key, value))
+			return -EINVAL;
+	} else {
+		printf("ERROR: unknown command to sar: \"%s\"\n", cmd);
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+U_BOOT_CMD(
+	sar,      6,     1,      do_sar_cmd,
+	"sar - Modify SOC's sample at reset (SAR) values",
+	"\n"
+	"Modify SOC's sample at reset values\n"
+	"\tlist		- Display all available SAR variables\n"
+	"\tlist <x>	- Display options for SAR variable x\n"
+	"\tdefault	- Set all SAR variable to default value\n"
+	"\tdefault <x>	- Set SAR variable x default value\n"
+	"\twrite x y	- Write y to SAR variable x\n"
+	"\tread		- Read all SAR variables\n"
+	"\tread <x>	- Read SAR variable x\n"
+);
+
+U_BOOT_CMD(
+	SatR,      6,     1,      do_sar_cmd,
+	"SatR - Modify SOC's sample at reset (SAR) values",
+	"\n"
+	"Modify SOC's sample at reset values\n"
+	"\tlist		- Display all available SAR variables\n"
+	"\tlist <x>	- Display options for SAR variable x\n"
+	"\tdefault	- Set all SAR variable to default value\n"
+	"\tdefault <x>	- Set SAR variable x default value\n"
+	"\twrite x y	- Write y to SAR variable x\n"
+	"\tread		- Read all SAR variables\n"
+	"\tread <x>	- Read SAR variable x\n"
+);
diff --git a/include/fdtdec.h b/include/fdtdec.h
index 635f53083b..89ba763e21 100644
--- a/include/fdtdec.h
+++ b/include/fdtdec.h
@@ -165,6 +165,7 @@ enum fdt_compat_id {
 	COMPAT_ALTERA_SOCFPGA_FPGA0,		/* SOCFPGA FPGA manager */
 	COMPAT_ALTERA_SOCFPGA_NOC,		/* SOCFPGA Arria 10 NOC */
 	COMPAT_ALTERA_SOCFPGA_CLK_INIT,		/* SOCFPGA Arria 10 clk init */
+	COMPAT_MVEBU_SAR,
 
 	COMPAT_COUNT,
 };
diff --git a/include/mvebu/sar.h b/include/mvebu/sar.h
new file mode 100644
index 0000000000..82ec543514
--- /dev/null
+++ b/include/mvebu/sar.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:       GPL-2.0+
+ * https://spdx.org/licenses
+ */
+
+#ifndef _SAR_H_
+#define _SAR_H_
+
+#include <common.h>
+#include <linux/compiler.h>
+#include <mvebu/var.h>
+
+#define MAX_SAR_CHIPS	4
+#define MAX_SAR 8
+
+enum sar_variables {
+	CPUS_NUM_SAR = 0,
+	CPU0_ENDIANES_SAR,
+	FREQ_SAR,
+	CPU_FREQ_SAR,
+	FAB_REQ_SAR,
+	BOOT_SRC_SAR,
+	BOOT_WIDTH_SAR,
+	PEX_MODE_SAR,
+	L2_SIZE_SAR,
+	DRAM_ECC_SAR,
+	DRAM_BUS_WIDTH_SAR,
+};
+
+struct sar_var {
+	u8 start_bit;
+	u8 bit_length;
+	u8 option_cnt;
+	u8 active;
+	bool swap_bit;
+	char *desc;
+	char *key;
+	struct var_opts option_desc[MAX_VAR_OPTIONS];
+};
+
+struct sar_data {
+	u32	chip_addr[MAX_SAR_CHIPS];
+	u8	chip_count;
+	u8	bit_width;
+	struct sar_var sar_lookup[MAX_SAR];
+};
+
+int  sar_read_all(void);
+int  sar_default_key(const char *key);
+int  sar_default_all(void);
+int  sar_write_key(const char *key, int val);
+int  sar_print_key(const char *key);
+void sar_list_keys(void);
+int  sar_list_key_opts(const char *key);
+int  sar_is_available(void);
+void sar_init(void);
+
+#endif /* _SAR_H_ */
diff --git a/include/mvebu/var.h b/include/mvebu/var.h
new file mode 100644
index 0000000000..419eeda5c4
--- /dev/null
+++ b/include/mvebu/var.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:       GPL-2.0+
+ * https://spdx.org/licenses
+ */
+
+#ifndef _VAR_H_
+#define _VAR_H_
+
+#include <common.h>
+#include <linux/compiler.h>
+
+#define INVALID_KEY	0xFF
+#define MAX_VAR_OPTIONS	10
+
+#define VAR_IS_DEFAULT	0x1
+#define VAR_IS_LAST	0x2
+
+struct var_opts {
+	u8 value;
+	char *desc;
+	u8 flags;
+};
+
+struct var_desc {
+	char *key;
+	char *description;
+};
+
+#endif /* _VAR_H_ */
diff --git a/lib/fdtdec.c b/lib/fdtdec.c
index 74430c8b2f..ae24245e67 100644
--- a/lib/fdtdec.c
+++ b/lib/fdtdec.c
@@ -68,7 +68,8 @@ static const char * const compat_names[COMPAT_COUNT] = {
 	COMPAT(ALTERA_SOCFPGA_F2SDR2, "altr,socfpga-fpga2sdram2-bridge"),
 	COMPAT(ALTERA_SOCFPGA_FPGA0, "altr,socfpga-a10-fpga-mgr"),
 	COMPAT(ALTERA_SOCFPGA_NOC, "altr,socfpga-a10-noc"),
-	COMPAT(ALTERA_SOCFPGA_CLK_INIT, "altr,socfpga-a10-clk-init")
+	COMPAT(ALTERA_SOCFPGA_CLK_INIT, "altr,socfpga-a10-clk-init"),
+	COMPAT(MVEBU_SAR, "marvell,sample-at-reset"),
 };
 
 const char *fdtdec_get_compatible(enum fdt_compat_id id)
-- 
2.29.0

