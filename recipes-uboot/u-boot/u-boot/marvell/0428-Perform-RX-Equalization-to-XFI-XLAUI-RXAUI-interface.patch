From cbe4a0df57a24fa7b810d7b0cd17436d7f1112ae Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Fri, 13 May 2016 08:38:54 -0700
Subject: [PATCH 0428/1239] Perform RX Equalization to XFI/XLAUI/RXAUI
 interfaces.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
---
 drivers/net/cavium/thunder_bgx.c | 117 +++++++++++++++++++++++++++++--
 drivers/net/cavium/thunder_bgx.h |  13 ++++
 2 files changed, 124 insertions(+), 6 deletions(-)

diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index c1640704b2..620785f66d 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -58,14 +58,9 @@ struct bgx {
 
 struct bgx_board_info bgx_board_info[CONFIG_MAX_BGX];
 
-#define GSERX_CFG(x)		(0x000087E090000080ull + (x) * 0x1000000ull)
-#define GSERX_SCRATCH(x)	(0x000087E090000020ull + (x) * 0x1000000ull)
-#define GSERX_PHY_CTL(x)	(0x000087E090000000ull + (x) * 0x1000000ull)
-#define GSERX_CFG_BGX		(1 << 2)
-
 struct bgx *bgx_vnic[CONFIG_MAX_BGX];
 
-/* Register read/write APIs */
+/* APIs to read/write BGXX CSRs */
 static uint64_t bgx_reg_read(struct bgx *bgx, uint8_t lmac, uint64_t offset)
 {
 	uint64_t addr = (uintptr_t)bgx->reg_base +
@@ -110,6 +105,19 @@ static int bgx_poll_reg(struct bgx *bgx, uint8_t lmac,
 	return 1;
 }
 
+static int gser_poll_reg(uint64_t reg, int bit, uint64_t mask, uint64_t expected_val, int timeout)
+{
+	uint64_t reg_val;
+	while (timeout) {
+		reg_val = readq(CSR_PA(0, reg)) >> bit;
+		if ((reg_val & mask) == (expected_val))
+			return 0;
+		mdelay(1);
+		timeout--;
+	}
+	return 1;
+}
+
 struct lmac *bgx_get_lmac(int node, int bgx_idx, int lmacid)
 {
 	struct bgx *bgx = bgx_vnic[(node * CONFIG_MAX_BGX_PER_NODE) + bgx_idx];
@@ -402,6 +410,70 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 	return 0;
 }
 
+int __rx_equalization(int qlm, int lane)
+{
+	int max_lanes = 2;
+	int l;
+	int fail = 0;
+
+	/* Before completing Rx equalization wait for GSERx_RX_EIE_DETSTS[CDRLOCK] to be set
+	   This ensures the rx data is valid */
+	if (lane == -1) {
+		if (gser_poll_reg(GSER_RX_EIE_DETSTS(qlm), GSER_CDRLOCK, 0xf, (1 << max_lanes) - 1, 100)) {
+			printf("ERROR: DLM%d: CDR Lock not detected for 2 lanes\n", qlm);
+			return -1;
+		}
+	} else {
+		if (gser_poll_reg(GSER_RX_EIE_DETSTS(qlm), GSER_CDRLOCK, (0xf & (1 << lane)), (1 << lane), 100)) {
+			printf("ERROR: DLM%d: CDR Lock not detected on %d lane\n", qlm, lane);
+			return -1;
+		}
+	}
+
+	for (l = 0; l < max_lanes; l++) {
+		uint64_t rctl, reer;
+
+		if ((lane != -1) && (lane != l))
+			continue;
+
+		/* Enable software control */
+		rctl = readq(CSR_PA(0, GSER_BR_RXX_CTL(qlm, l)));
+		rctl |= GSER_BR_RXX_CTL_RXT_SWM;
+		writeq(CSR_PA(0, GSER_BR_RXX_CTL(qlm, l)), rctl);
+
+		/* Clear the completion flag and initiate a new request */
+		reer = readq(CSR_PA(0, GSER_BR_RXX_EER(qlm, l)));
+		reer &= ~GSER_BR_RXX_EER_RXT_ESV;
+		reer |= GSER_BR_RXX_EER_RXT_EER;
+		writeq(CSR_PA(0, GSER_BR_RXX_EER(qlm, l)), reer);
+	}
+
+	/* Wait for RX equalization to complete */
+	for (l = 0; l < max_lanes; l++) {
+		uint64_t rctl, reer;
+
+		if ((lane != -1) && (lane != l))
+			continue;
+
+		gser_poll_reg(GSER_BR_RXX_CTL(qlm, l), EER_RXT_ESV, 1, 1, 200);
+		reer = readq(CSR_PA(0, GSER_BR_RXX_EER(qlm, l)));
+
+		/* Switch back to hardware control */
+		rctl = readq(CSR_PA(0, GSER_BR_RXX_CTL(qlm, l)));
+		rctl &= ~GSER_BR_RXX_CTL_RXT_SWM;
+		writeq(CSR_PA(0, GSER_BR_RXX_CTL(qlm, l)), rctl);
+
+		if (reer & GSER_BR_RXX_EER_RXT_ESV) {
+			printf("Rx equalization completed on DLM%d lane%d\n", qlm, l);
+		} else {
+			printf("Rx equalization timedout on DLM%d lane%d\n", qlm, l);
+			fail = 1;
+		}
+	}
+
+	return (fail) ? -1 : 0;
+}
+
 static int bgx_xaui_check_link(struct lmac *lmac)
 {
 	struct bgx *bgx = lmac->bgx;
@@ -422,6 +494,39 @@ static int bgx_xaui_check_link(struct lmac *lmac)
 		}
 	}
 
+	/* Perform RX Equalization. Applies to non-KR interfaces for speeds 
+	   >= 6.25Gbps. */ 
+	if (!lmac->use_training) {
+		int index;
+		switch (lmac->lmac_type) {
+		default:
+		case 0: // SGMII
+		case 1: // XAUI
+			/* Nothing to do */
+			break;
+		case 4: // XLAUI
+			if (__rx_equalization(lmac->qlm, -1) ||
+				__rx_equalization(lmac->qlm+1, -1))
+				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d/DLM%d\n",
+					bgx->bgx_id, lmacid, lmac->qlm, lmac->qlm+1);
+			break;
+		case 2: // RXAUI
+			if (lmacid > 1)
+				index = lmacid - 2;
+			else
+				index = lmacid;
+			if (__rx_equalization(lmac->qlm, index))
+				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d\n",
+					bgx->bgx_id, index, lmac->qlm);
+			break;
+		case 3: // XFI
+			if (__rx_equalization(lmac->qlm, lmacid))
+				printf("BGX%d:%d: Waiting for RX Equalization on DLM%d\n",
+					bgx->bgx_id, lmacid, lmac->qlm);
+			break;
+		}
+	}
+
 	/* wait for PCS to come out of reset */
 	if (bgx_poll_reg(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_RESET, true)) {
 		printf("BGX SPU reset not completed\n");
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index 897eca0700..de982aa27b 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -23,6 +23,19 @@
 #define    NODE_ID(x)				((x & NODE_ID_MASK) >> 44)
 
 /* Registers */
+#define GSERX_CFG(x)		(0x000087E090000080ull + (x) * 0x1000000ull)
+#define GSERX_SCRATCH(x)	(0x000087E090000020ull + (x) * 0x1000000ull)
+#define GSERX_PHY_CTL(x)	(0x000087E090000000ull + (x) * 0x1000000ull)
+#define GSERX_CFG_BGX		(1 << 2)
+#define GSER_RX_EIE_DETSTS(x)	(0x000087e090000150ull + (x) * 0x1000000ull)
+#define GSER_CDRLOCK		(8)
+#define GSER_BR_RXX_CTL(x,y)	(0x000087e090000400ull + (x) * 0x1000000ull + (y) * 0x80) 
+#define GSER_BR_RXX_CTL_RXT_SWM	(1 << 2)
+#define GSER_BR_RXX_EER(x,y)	(0x000087e090000418ull + (x) * 0x1000000ull + (y) * 0x80)
+#define GSER_BR_RXX_EER_RXT_ESV (1 << 14)
+#define GSER_BR_RXX_EER_RXT_EER (1 << 15)
+#define EER_RXT_ESV		(14)
+
 #define BGX_CMRX_CFG			0x00
 #define CMR_PKT_TX_EN				(1ull << 13)
 #define CMR_PKT_RX_EN				(1ull << 14)
-- 
2.29.0

