From 32563735910237a29d06329c63431c399c50375f Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Mon, 9 May 2016 16:42:44 -0700
Subject: [PATCH 0415/1239] net: thunderx: Fix TL4 configuration for secondary
 Qsets

TL4 calculation for a given SQ of secondary Qsets is incorrect
and goes out of bounds and also for some SQ's TL4 chosen will
transmit data via a different BGX interface and not same as
primary Qset's interface.

This patch fixes this issue.

Signed-off-by: Sunil Goutham <sgoutham@cavium.com>
Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/net/cavium/nic.h      | 63 +++++++++++++++++++----------------
 drivers/net/cavium/nic_main.c | 15 ++++++++-
 2 files changed, 49 insertions(+), 29 deletions(-)

diff --git a/drivers/net/cavium/nic.h b/drivers/net/cavium/nic.h
index b5e6107ac8..64c5adcbb9 100644
--- a/drivers/net/cavium/nic.h
+++ b/drivers/net/cavium/nic.h
@@ -243,34 +243,6 @@ struct nicvf_drv_stats {
 };
 
 
-struct nicpf {
-	struct eth_device	*netdev;
-#define NIC_NODE_ID_MASK	0x300000000000
-#define NIC_NODE_ID(x)		((x & NODE_ID_MASK) >> 44)
-	uint8_t			node;
-	unsigned int		flags;
-	uint16_t		total_vf_cnt;   /* Total num of VF supported */
-	uint16_t		num_vf_en;      /* No of VF enabled */
-	uint64_t		reg_base;       /* Register start address */
-	struct pkind_cfg	pkind;
-	uint8_t			bgx_cnt;
-	uint8_t			rev_id;
-#define	NIC_SET_VF_LMAC_MAP(bgx, lmac)	(((bgx & 0xF) << 4) | (lmac & 0xF))
-#define	NIC_GET_BGX_FROM_VF_LMAC_MAP(map)	((map >> 4) & 0xF)
-#define	NIC_GET_LMAC_FROM_VF_LMAC_MAP(map)	(map & 0xF)
-	uint8_t			vf_lmac_map[MAX_LMAC];
-	uint16_t		cpi_base[MAX_NUM_VFS_SUPPORTED];
-	uint16_t		rss_ind_tbl_size;
-	uint64_t		mac[MAX_NUM_VFS_SUPPORTED];
-	bool			mbx_lock[MAX_NUM_VFS_SUPPORTED];
-	uint8_t			link[MAX_LMAC];
-	uint8_t			duplex[MAX_LMAC];
-	uint32_t		speed[MAX_LMAC];
-	bool			vf_enabled[MAX_NUM_VFS_SUPPORTED];
-	uint16_t		rssi_base[MAX_NUM_VFS_SUPPORTED];
-	uint8_t			lmac_cnt;
-};
-
 struct nicvf {
 	struct eth_device	*netdev;
 	uint8_t			vf_id;
@@ -280,6 +252,8 @@ struct nicvf {
 	uint8_t			node;
 	uint16_t		mtu;
 	struct queue_set	*qs;
+#define		MAX_SQS_PER_VF_SINGLE_NODE	5
+#define		MAX_SQS_PER_VF			11   
 	uint8_t			num_qs;
 	void			*addnl_qs;
 	uint16_t		vf_mtu;
@@ -310,6 +284,39 @@ struct nicvf {
 	void 			*rcv_buf;
 };
 
+struct nicpf {
+	struct eth_device	*netdev;
+#define NIC_NODE_ID_MASK	0x300000000000
+#define NIC_NODE_ID(x)		((x & NODE_ID_MASK) >> 44)
+	uint8_t			node;
+	unsigned int		flags;
+	uint16_t		total_vf_cnt;   /* Total num of VF supported */
+	uint16_t		num_vf_en;      /* No of VF enabled */
+	uint64_t		reg_base;       /* Register start address */
+	u8			num_sqs_en;     /* Secondary qsets enabled */
+	u64			nicvf[MAX_NUM_VFS_SUPPORTED];
+	u8			vf_sqs[MAX_NUM_VFS_SUPPORTED][MAX_SQS_PER_VF];
+	u8			pqs_vf[MAX_NUM_VFS_SUPPORTED];
+	bool			sqs_used[MAX_NUM_VFS_SUPPORTED];
+	struct pkind_cfg	pkind;
+	uint8_t			bgx_cnt;
+	uint8_t			rev_id;
+#define	NIC_SET_VF_LMAC_MAP(bgx, lmac)	(((bgx & 0xF) << 4) | (lmac & 0xF))
+#define	NIC_GET_BGX_FROM_VF_LMAC_MAP(map)	((map >> 4) & 0xF)
+#define	NIC_GET_LMAC_FROM_VF_LMAC_MAP(map)	(map & 0xF)
+	uint8_t			vf_lmac_map[MAX_LMAC];
+	uint16_t		cpi_base[MAX_NUM_VFS_SUPPORTED];
+	uint16_t		rss_ind_tbl_size;
+	uint64_t		mac[MAX_NUM_VFS_SUPPORTED];
+	bool			mbx_lock[MAX_NUM_VFS_SUPPORTED];
+	uint8_t			link[MAX_LMAC];
+	uint8_t			duplex[MAX_LMAC];
+	uint32_t		speed[MAX_LMAC];
+	bool			vf_enabled[MAX_NUM_VFS_SUPPORTED];
+	uint16_t		rssi_base[MAX_NUM_VFS_SUPPORTED];
+	uint8_t			lmac_cnt;
+};
+
 /* PF <--> VF Mailbox communication
  * Eight 64bit registers are shared between PF and VF.
  * Separate set for each VF.
diff --git a/drivers/net/cavium/nic_main.c b/drivers/net/cavium/nic_main.c
index 520d074302..f822d116fe 100644
--- a/drivers/net/cavium/nic_main.c
+++ b/drivers/net/cavium/nic_main.c
@@ -558,6 +558,7 @@ static void nic_tx_channel_cfg(struct nicpf *nic, u8 vnic,
 	u32 rr_quantum;
 	u8 sq_idx = sq->sq_num;
 	u8 pqs_vnic = vnic;
+	int svf;
 
 	bgx = NIC_GET_BGX_FROM_VF_LMAC_MAP(nic->vf_lmac_map[pqs_vnic]);
 	lmac = NIC_GET_LMAC_FROM_VF_LMAC_MAP(nic->vf_lmac_map[pqs_vnic]);
@@ -565,7 +566,19 @@ static void nic_tx_channel_cfg(struct nicpf *nic, u8 vnic,
 	/* 24 bytes for FCS, IPG and preamble */
 	rr_quantum = ((NIC_HW_MAX_FRS + 24) / 4);
 
-	tl4 = (lmac * NIC_TL4_PER_LMAC) + (bgx * NIC_TL4_PER_BGX);
+	if (!sq->sqs_mode) {
+		tl4 = (lmac * NIC_TL4_PER_LMAC) + (bgx * NIC_TL4_PER_BGX);
+	} else {
+		for (svf = 0; svf < MAX_SQS_PER_VF; svf++) {
+			if (nic->vf_sqs[pqs_vnic][svf] == vnic)
+				break;
+		}
+		tl4 = (MAX_LMAC_PER_BGX * NIC_TL4_PER_LMAC);
+		tl4 += (lmac * NIC_TL4_PER_LMAC * MAX_SQS_PER_VF);
+		tl4 += (svf * NIC_TL4_PER_LMAC);
+		tl4 += (bgx * NIC_TL4_PER_BGX);
+	}
+
 	tl4 += sq_idx;
 
 	tl3 = tl4 / (NIC_MAX_TL4 / NIC_MAX_TL3);
-- 
2.29.0

