From 7c18ba29a14349d65a967e6c7d2b4e35c07bba19 Mon Sep 17 00:00:00 2001
From: Alex Leibovich <alexl@marvell.com>
Date: Sun, 7 Apr 2019 10:12:36 +0300
Subject: [PATCH 0254/1239] efuse: mvebu: efuse flag support

By default, efuse will support read operation.
Added EFUSE_READ_ONLY flag, to block write operation,
removed DRY_RUN flag, left from former debug.

Change-Id: I2d5a5cb678d5c6c011647556ba27e732c219e43d
Signed-off-by: Alex Leibovich <alexl@marvell.com>
---
 drivers/fuse/Kconfig         | 10 ++++------
 drivers/fuse/fuse-mvebu-hd.c | 13 ++++++-------
 drivers/fuse/fuse-mvebu-ld.c | 10 ++++++----
 drivers/fuse/fuse-mvebu.c    |  5 -----
 include/mvebu/fuse-mvebu.h   |  6 +++---
 5 files changed, 19 insertions(+), 25 deletions(-)

diff --git a/drivers/fuse/Kconfig b/drivers/fuse/Kconfig
index 02a90b8f6f..005673e3e9 100644
--- a/drivers/fuse/Kconfig
+++ b/drivers/fuse/Kconfig
@@ -14,13 +14,11 @@ config MVEBU_EFUSE
 	  This efuse driver supports marvell
 	  a38x and a7k/8k SoC chips.
 
-config MVEBU_EFUSE_FAKE
-	bool "Fake eFuse access (dry run)"
+config MVEBU_EFUSE_READ_ONLY
+	bool "eFuse read only access"
 	default n
 	depends on MVEBU_EFUSE
 	help
-	  This enables a "dry run" mode where eFuses are not really programmed.
-	  Instead the eFuse accesses are emulated by writing to and reading
-	  from a memory block.
-	  This is can be used for testing prog scripts.
+	  This enables a "read only" mode. Write attempt
+          will result in an error message.
 endmenu
diff --git a/drivers/fuse/fuse-mvebu-hd.c b/drivers/fuse/fuse-mvebu-hd.c
index e1c508d3ca..1a338fba0d 100644
--- a/drivers/fuse/fuse-mvebu-hd.c
+++ b/drivers/fuse/fuse-mvebu-hd.c
@@ -56,12 +56,7 @@ static int do_mvebu_efuse_hd_prog(struct udevice *dev, int row_id, u32 *new_val)
 		return -EINVAL;
 
 	/* enable fuse prog */
-#ifndef DRY_RUN
 	setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-#else
-	/* avoid build warning for enable DRY_RUN */
-	ctrl_reg = ctrl_reg;
-#endif
 	/* read fuse row value before burn fuse */
 	for (i = 0; i < GET_LEN(row_widths); i++)
 		fuse_read_value[i] = readl(otp_mem + 4 * i);
@@ -75,9 +70,8 @@ static int do_mvebu_efuse_hd_prog(struct udevice *dev, int row_id, u32 *new_val)
 	mdelay(1);
 
 	/* Disable efuse write */
-#ifndef DRY_RUN
 	clrbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-#endif
+
 	return 0;
 }
 
@@ -85,6 +79,11 @@ int mvebu_efuse_hd_prog(struct udevice *dev, int word, int row_id, u32 new_val)
 {
 	int res = 0;
 
+#ifdef EFUSE_READ_ONLY
+	dev_err(&dev->dev, "ERROR: fuse programming disabled!\n");
+	return -EPERM;
+#endif
+
 	if (word < ROW_WORDS_LEN - 1) {
 		prog_val[word] = new_val;
 		valid_prog_words |= (1 << word);
diff --git a/drivers/fuse/fuse-mvebu-ld.c b/drivers/fuse/fuse-mvebu-ld.c
index 0e33a7fb33..7f42678c92 100644
--- a/drivers/fuse/fuse-mvebu-ld.c
+++ b/drivers/fuse/fuse-mvebu-ld.c
@@ -62,12 +62,10 @@ int do_mvebu_efuse_ld_prog(struct udevice *dev, int row_id, u32 *new_val)
 	setbits_le32(ctrl_reg, MVEBU_EFUSE_SRV_CTRL_LD_SEL_USER);
 
 	/* enable fuse prog */
-#ifndef DRY_RUN
 	setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
 
 	/* enable security bit to lock LD efuse row for further programming */
 	setbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_LD_SEC_EN_MASK);
-#endif
 	/* read fuse row value before burn fuse */
 	for (i = 0; i < GET_LEN(row_widths); i++)
 		fuse_read_value[i] = readl(otp_mem + 4 * i);
@@ -84,9 +82,8 @@ int do_mvebu_efuse_ld_prog(struct udevice *dev, int row_id, u32 *new_val)
 	mdelay(1);
 
 	/* Disable efuse write */
-#ifndef DRY_RUN
 	clrbits_le32(ctrl_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
-#endif
+
 	return 0;
 }
 
@@ -94,6 +91,11 @@ int mvebu_efuse_ld_prog(struct udevice *dev, int word, int row_id, u32 new_val)
 {
 	int res = 0;
 
+#ifdef EFUSE_READ_ONLY
+	dev_err(&dev->dev, "ERROR: fuse programming disabled!\n");
+	return -EPERM;
+#endif
+
 	if (word < ROW_WORDS_LEN - 1) {
 		prog_val[word] = new_val;
 		valid_prog_words |= (1 << word);
diff --git a/drivers/fuse/fuse-mvebu.c b/drivers/fuse/fuse-mvebu.c
index 46350a3f8f..5e2161f6db 100644
--- a/drivers/fuse/fuse-mvebu.c
+++ b/drivers/fuse/fuse-mvebu.c
@@ -169,16 +169,11 @@ static int fuse_probe(struct udevice *dev)
 
 	priv->pdata =
 		(struct mvebu_fuse_platform_data *)dev_get_driver_data(dev);
-#ifndef DRY_RUN
 	priv->target_otp_mem =
 		(void *)(((phys_addr_t)dev_read_addr(dev) & ~0x00ffffff) +
 		(((phys_addr_t)fdtdec_get_int(blob, node,
 			"otp-mem", 0)) & 0x00ffffff));
 
-#else
-	priv->target_otp_mem = NULL;
-#endif
-
 	if (device_is_compatible(dev, "marvell,mvebu-fuse-hd"))
 		priv->hd_ld_flag = true;
 	else
diff --git a/include/mvebu/fuse-mvebu.h b/include/mvebu/fuse-mvebu.h
index b338a06392..fbb483f9b1 100644
--- a/include/mvebu/fuse-mvebu.h
+++ b/include/mvebu/fuse-mvebu.h
@@ -9,10 +9,10 @@
 
 #include <common.h>
 
-#if defined(CONFIG_MVEBU_EFUSE_FAKE)
-#define DRY_RUN
+#if defined(CONFIG_MVEBU_EFUSE_READ_ONLY)
+#define EFUSE_READ_ONLY
 #else
-#undef DRY_RUN
+#undef EFUSE_READ_ONLY
 #endif
 
 #define MVEBU_EFUSE_SRV_CTRL_LD_SEL_USER	BIT(6)
-- 
2.29.0

