From 23c8faa42a2571837c093c1d35b943c7943cec32 Mon Sep 17 00:00:00 2001
From: Konstantin Porotchkin <kostap@marvell.com>
Date: Wed, 1 Jan 2020 17:58:51 +0200
Subject: [PATCH 1052/1239] drivers/pci_endpoint: use resizable BAR caps for
 bar size setup

The proper BAR size for DW EP should be set using resizable BAR
capabilities block instead of BAR mask shadow register.
use the BAR mask shadow register only for BAR enable/disable.

Change-Id: Iad876927980982aa425fa238af0abcce782fe9fe
Signed-off-by: Konstantin Porotchkin <kostap@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/20997
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
---
 drivers/pci_endpoint/pcie_dw_mvebu_ep.c | 26 ++++++++++++++++++-------
 drivers/pci_endpoint/pcie_dw_mvebu_ep.h | 13 +++++++++++++
 2 files changed, 32 insertions(+), 7 deletions(-)

diff --git a/drivers/pci_endpoint/pcie_dw_mvebu_ep.c b/drivers/pci_endpoint/pcie_dw_mvebu_ep.c
index 6d7e2e9231..fe3c40b4e0 100644
--- a/drivers/pci_endpoint/pcie_dw_mvebu_ep.c
+++ b/drivers/pci_endpoint/pcie_dw_mvebu_ep.c
@@ -42,18 +42,30 @@ static int pcie_dw_mvebu_ep_setup_bar(struct udevice *dev, uint func_id,
 		v = bar->flags & (~PCI_BASE_ADDRESS_IO_MASK);
 		writel(v, bar_addr);
 	} else {
-		/* clear the top 32 bits of the size */
-		if (bar->flags & PCI_BASE_ADDRESS_MEM_TYPE_64) {
-			writel((bar->size - 1) >> 32, bar_mask + 4);
+		/* clear the top 32 bits of the address */
+		if (bar->flags & PCI_BASE_ADDRESS_MEM_TYPE_64)
 			writel(0, bar_addr + 4);
-		}
+
 		v = bar->flags & (~PCI_BASE_ADDRESS_MEM_MASK);
 		writel(v, bar_addr);
 	}
 
-	/* Set size and enable bar */
-	v = ((bar->size - 1) & U32_MAX) | BAR_ENABLE_MASK;
-	writel(v, bar_mask);
+	/*
+	 * Set the BAR using resizable BAR capability registers
+	 * The minimum (and the default) BAR size is 1MB
+	 * Once the Resizable BAR capability register is set
+	 * the resizable BAR control register at next offset gets
+	 * updated automatically.
+	 */
+	if (bar->size > SZ_1M && PCIE_BAR_IS_RESIZABLE(bar->barno)) {
+		/* BAR size should be power of 2 already */
+		v = ((bar->size >> 20) & PCIE_RESBAR_EXT_CAP_REG_MASK);
+		v <<= PCIE_RESBAR_EXT_CAP_REG_SHIFT;
+		writel(v, pl_regs + PCIE_RESBAR_EXT_CAP_REG(bar->barno));
+	}
+
+	/* Enable bar */
+	setbits_le32(bar_mask, BAR_ENABLE_MASK);
 
 	/* Setup the internal target for the BAR.
 	 * When the PCIe host accesses the bar
diff --git a/drivers/pci_endpoint/pcie_dw_mvebu_ep.h b/drivers/pci_endpoint/pcie_dw_mvebu_ep.h
index 108bebbc4f..e15225a605 100644
--- a/drivers/pci_endpoint/pcie_dw_mvebu_ep.h
+++ b/drivers/pci_endpoint/pcie_dw_mvebu_ep.h
@@ -50,6 +50,19 @@
 
 #define PCIE_SRIOV_DEVID_OFFSET		0x192
 
+#define PCIE_RESBAR_EXT_CAP_HDR_REG	0x25c
+#define PCIE_RESBAR_EXT_CAP_REG(bar)			\
+	({ typeof(bar) _BAR_ = (bar);			\
+		PCIE_RESBAR_EXT_CAP_HDR_REG + 4 +	\
+		(((_BAR_) / 2 + (_BAR_) % 2) & 0x3) * 8; })
+#define PCIE_RESBAR_EXT_CAP_REG_MASK	0x000fffff
+#define PCIE_RESBAR_EXT_CAP_REG_SHIFT	4
+
+#define PCIE_BAR_IS_RESIZABLE(bar)		\
+	({ typeof(bar) _BAR_ = (bar);		\
+		(_BAR_) == 5 || (_BAR_) == 4 ||	\
+		(_BAR_) == 2 || (_BAR_) == 0; })
+
 #define MAX_ATU_REGIONS			16
 #define MAX_ATU_SIZE			(4ul * SZ_1G)
 
-- 
2.29.0

