From b9e93a366573db36ec71f997a017971fc87aa312 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Thu, 30 Apr 2020 16:45:30 -0700
Subject: [PATCH 1144/1239] cmd: marvell: eth_cmds: Update set/get ignore to
 accept cgx lmac index

Update (set/get)_ignore to accept cgx,lmac pair apart from eth device
to help setting for non-NIX interfaces.

Change-Id: I51d49520c3d432f2ff86e6644edabca26d257368
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/27752
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Tested-by: Chandrakala Chavva <cchavva@marvell.com>
---
 cmd/marvell/eth_cmds.c           | 74 +++++++++++++++++++++++---------
 drivers/net/octeontx2/cgx_intf.c | 57 +++++++++++++++++-------
 2 files changed, 94 insertions(+), 37 deletions(-)

diff --git a/cmd/marvell/eth_cmds.c b/cmd/marvell/eth_cmds.c
index a16d0d75ad..01dbc04d6e 100644
--- a/cmd/marvell/eth_cmds.c
+++ b/cmd/marvell/eth_cmds.c
@@ -17,8 +17,9 @@ extern int cgx_intf_get_phy_mod_type(struct udevice *ethdev);
 extern int cgx_intf_set_phy_mod_type(struct udevice *ethdev, int type);
 extern int cgx_intf_set_mode(struct udevice *ethdev, int mode);
 extern int cgx_intf_set_an_lbk(struct udevice *ethdev, int enable);
-extern int cgx_intf_set_ignore(struct udevice *ethdev, int ignore);
-extern int cgx_intf_get_ignore(struct udevice *ethdev);
+extern int cgx_intf_set_ignore(struct udevice *ethdev, int cgxid, int lmacid,
+			       int ignore);
+extern int cgx_intf_get_ignore(struct udevice *ethdev, int cgxid, int lmacid);
 extern int cgx_intf_get_mode(struct udevice *ethdev);
 extern void nix_print_mac_info(struct udevice *dev);
 
@@ -49,24 +50,49 @@ static int do_ethparam_common(cmd_tbl_t *cmdtp, int flag, int argc,
 	const char *cmd;
 	char *endp;
 	const char *devname;
-	int ret = CMD_RET_USAGE, arg;
-	struct udevice *dev;
+	int ret = CMD_RET_USAGE, arg, cgx = -1, lmac = -1;
+	struct udevice *dev = NULL;
 
 	if (argc < 2)
 		return ret;
 
 	cmd = argv[0];
-	devname = argv[1];
 
-	dev = eth_get_dev_by_name(devname);
-	if (!dev) {
-		printf("device interface %s not found\n", devname);
-		return CMD_RET_FAILURE;
-	}
-	if (strncmp(dev->name, "rvu_", 4)) {
-		printf("Invalid eth interface, choose RVU PF device\n");
-		return CMD_RET_FAILURE;
+	if (strncmp(argv[1], "eth", 3)) {
+		if (strcmp(cmd, "set_ignore") == 0) {
+			if (argc != 4)
+				return ret;
+			cgx = simple_strtol(argv[1], &endp, 0);
+			if (cgx < 0 || cgx > 4)
+				return ret;
+			lmac = simple_strtol(argv[2], &endp, 0);
+			if (lmac < 0 || lmac > 3)
+				return ret;
+		} else if (strcmp(cmd, "get_ignore") == 0) {
+			if (argc != 3)
+				return ret;
+			cgx = simple_strtol(argv[1], &endp, 0);
+			if (cgx < 0 || cgx > 4)
+				return ret;
+			lmac = simple_strtol(argv[2], &endp, 0);
+			if (lmac < 0 || lmac > 3)
+				return ret;
+		} else {
+			return ret;
+		}
+	} else {
+		devname = argv[1];
+		dev = eth_get_dev_by_name(devname);
+		if (!dev) {
+			printf("device interface %s not found\n", devname);
+			return CMD_RET_FAILURE;
+		}
+		if (strncmp(dev->name, "rvu_", 4)) {
+			printf("Invalid eth interface choose RVU PF device\n");
+			return CMD_RET_FAILURE;
+		}
 	}
+
 	if (strcmp(cmd, "set_fec") == 0) {
 		if (argc < 3)
 			return CMD_RET_FAILURE;
@@ -84,14 +110,15 @@ static int do_ethparam_common(cmd_tbl_t *cmdtp, int flag, int argc,
 			return CMD_RET_USAGE;
 		ret = cgx_intf_set_an_lbk(dev, arg);
 	} else if (strcmp(cmd, "set_ignore") == 0) {
-		if (argc < 3)
-			return CMD_RET_FAILURE;
-		arg = simple_strtol(argv[2], &endp, 0);
+		if (dev)
+			arg = simple_strtol(argv[2], &endp, 0);
+		else
+			arg = simple_strtol(argv[3], &endp, 0);
 		if (arg < 0 || arg > 1)
 			return ret;
-		ret = cgx_intf_set_ignore(dev, arg);
+		ret = cgx_intf_set_ignore(dev, cgx, lmac, arg);
 	} else if (strcmp(cmd, "get_ignore") == 0) {
-		ret = cgx_intf_get_ignore(dev);
+		ret = cgx_intf_get_ignore(dev, cgx, lmac);
 	} else if (strcmp(cmd, "set_phymod") == 0) {
 		if (argc < 3)
 			return CMD_RET_FAILURE;
@@ -138,18 +165,23 @@ U_BOOT_CMD(set_an_lbk, 3, 1, do_ethparam_common,
 	   "Use 'ethlist' command to display network interface names\n"
 );
 
-U_BOOT_CMD(set_ignore, 3, 1, do_ethparam_common,
+U_BOOT_CMD(set_ignore, 4, 1, do_ethparam_common,
 	   "Set or clear ignore param in persist storage for eth interface",
 	   "Example - set_ignore <ethX> [value]\n"
 	   "0 [clear ignore] or 1 [set ignore]\n"
+	   "Example - set_ignore <cgx#> <lmac#> [value]\n"
+	   "For CGX0 LMAC3 - set_ignore 0 3 [value]\n"
+	   "0 [clear ignore] or 1 [set ignore]\n"
 	   "Helps to ignore all persist settings for selected ethernet\n"
 	   "interface on next boot\n"
 	   "Use 'ethlist' command to display network interface names\n"
 );
 
-U_BOOT_CMD(get_ignore, 2, 1, do_ethparam_common,
+U_BOOT_CMD(get_ignore, 3, 1, do_ethparam_common,
 	   "Display ignore param in persist storage for ethernet interface",
-	   "Example - get_ignore <ethX>\n"
+	   "Example - get_ignore <ethX> or\n"
+	   "Example - get_ignore <cgx#> <lmac#>\n"
+	   "For CGX0 LMAC3 - get_ignore 0 3\n"
 	   "Use 'ethlist' command to display network interface names\n"
 );
 
diff --git a/drivers/net/octeontx2/cgx_intf.c b/drivers/net/octeontx2/cgx_intf.c
index 499f4c781a..dac437770d 100644
--- a/drivers/net/octeontx2/cgx_intf.c
+++ b/drivers/net/octeontx2/cgx_intf.c
@@ -585,42 +585,67 @@ int cgx_intf_set_an_lbk(struct udevice *ethdev, int enable)
 	return 0;
 }
 
-int cgx_intf_get_ignore(struct udevice *ethdev)
+int cgx_intf_get_ignore(struct udevice *ethdev, int cgx, int lmac)
 {
-	struct rvu_pf *rvu = dev_get_priv(ethdev);
-	struct nix *nix = rvu->nix;
+	struct rvu_pf *rvu;
+	struct nix *nix;
 	union cgx_scratchx0 scr0;
-	int ret;
+	int ret, cgx_id = cgx, lmac_id = lmac;
 	union cgx_cmd_s cmd;
 
+	if (ethdev) {
+		rvu = dev_get_priv(ethdev);
+		nix = rvu->nix;
+		cgx_id = nix->lmac->cgx->cgx_id;
+		lmac_id = nix->lmac->lmac_id;
+	}
 	cmd.cmd.id = CGX_CMD_GET_PERSIST_IGNORE;
 
-	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   cmd, &scr0.u, 1);
+	ret = cgx_intf_req(cgx_id, lmac_id, cmd, &scr0.u, 1);
 	if (ret) {
-		printf("Get ignore command failed for %s\n", ethdev->name);
+		if (ethdev)
+			printf("Get ignore command failed for %s\n",
+			       ethdev->name);
+		else
+			printf("Get ignore command failed for CGX%d LMAC%d\n",
+			       cgx_id, lmac_id);
 		return -1;
 	}
-	printf("Persist settings %signored for %s\n",
-	       scr0.s.persist.ignore ? "" : "not ", ethdev->name);
+	if (ethdev)
+		printf("Persist settings %signored for %s\n",
+		       scr0.s.persist.ignore ? "" : "not ", ethdev->name);
+	else
+		printf("Persist settings %signored for CGX%d LMAC%d\n",
+		       scr0.s.persist.ignore ? "" : "not ", cgx_id, lmac_id);
+
 	return 0;
 }
 
-int cgx_intf_set_ignore(struct udevice *ethdev, int ignore)
+int cgx_intf_set_ignore(struct udevice *ethdev, int cgx, int lmac, int ignore)
 {
-	struct rvu_pf *rvu = dev_get_priv(ethdev);
-	struct nix *nix = rvu->nix;
+	struct rvu_pf *rvu;
+	struct nix *nix;
 	union cgx_scratchx0 scr0;
-	int ret;
+	int ret, cgx_id = cgx, lmac_id = lmac;
 	union cgx_cmd_s cmd;
 
+	if (ethdev) {
+		rvu = dev_get_priv(ethdev);
+		nix = rvu->nix;
+		cgx_id = nix->lmac->cgx->cgx_id;
+		lmac_id = nix->lmac->lmac_id;
+	}
 	cmd.cmd.id = CGX_CMD_SET_PERSIST_IGNORE;
 	cmd.persist_args.ignore = ignore;
 
-	ret = cgx_intf_req(nix->lmac->cgx->cgx_id, nix->lmac->lmac_id,
-			   cmd, &scr0.u, 0);
+	ret = cgx_intf_req(cgx_id, lmac_id, cmd, &scr0.u, 0);
 	if (ret) {
-		printf("Set ignore command failed for %s\n", ethdev->name);
+		if (ethdev)
+			printf("Set ignore command failed for %s\n",
+			       ethdev->name);
+		else
+			printf("Set ignore command failed for CGX%d LMAC%d\n",
+			       cgx_id, lmac_id);
 		return -1;
 	}
 
-- 
2.29.0

