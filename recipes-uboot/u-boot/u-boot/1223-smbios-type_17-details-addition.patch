From 303404abbfa90210cdeb7ec2904f0321e896562b Mon Sep 17 00:00:00 2001
From: Sujeet Baranwal <sbaranwal@marvell.com>
Date: Thu, 20 Aug 2020 16:12:08 -0700
Subject: [PATCH 1223/1239] smbios: type_17 details addition

type 17 publishes DRAM information. These information
are transported from earlier booting firmwares which
interact with DRAM either in hard coded ways or retrieved
using SPD lines of DIMM.

These info are kept at shared DRAM location where uboot
could consume it and make it available for smbios table.

Signed-off-by: Sujeet Baranwal <sbaranwal@marvell.com>
Change-Id: I0d8df5c5b0f7c333647e568ee96e59d2e3a1b1bc
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/35175
Reviewed-by: Jia Ma <jiam@marvell.com>
Tested-by: Jia Ma <jiam@marvell.com>
---
 lib/Makefile          |   1 +
 lib/mv_ddr_spd.h      | 288 +++++++++++++++++++++++++++++++++++++++++
 lib/smbios.c          |  48 +++++--
 lib/smbios_ddr_info.c | 290 ++++++++++++++++++++++++++++++++++++++++++
 lib/smbios_ddr_info.h | 126 ++++++++++++++++++
 5 files changed, 744 insertions(+), 9 deletions(-)
 create mode 100644 lib/mv_ddr_spd.h
 create mode 100644 lib/smbios_ddr_info.c
 create mode 100644 lib/smbios_ddr_info.h

diff --git a/lib/Makefile b/lib/Makefile
index 2fffd68f94..d6d220e714 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -34,6 +34,7 @@ obj-$(CONFIG_FIT) += fdtdec_common.o
 obj-$(CONFIG_TEST_FDTDEC) += fdtdec_test.o
 obj-$(CONFIG_GZIP_COMPRESSED) += gzip.o
 obj-$(CONFIG_GENERATE_SMBIOS_TABLE) += smbios.o
+obj-$(CONFIG_GENERATE_SMBIOS_TABLE) += smbios_ddr_info.o
 obj-$(CONFIG_IMAGE_SPARSE) += image-sparse.o
 obj-y += ldiv.o
 obj-$(CONFIG_MD5) += md5.o
diff --git a/lib/mv_ddr_spd.h b/lib/mv_ddr_spd.h
new file mode 100644
index 0000000000..a401240e14
--- /dev/null
+++ b/lib/mv_ddr_spd.h
@@ -0,0 +1,288 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2020, Sujeet Baranwal <sbaranwal@marvell.com>
+ *
+ */
+
+#ifndef _MV_DDR_SPD_H
+#define _MV_DDR_SPD_H
+
+//#include "mv_ddr_topology.h"
+
+/*
+ * Based on JEDEC Standard No. 21-C, 4.1.2.L-4:
+ * Serial Presence Detect (SPD) for DDR4 SDRAM Modules
+ */
+
+/* block 0: base configuration and dram parameters */
+#define MV_DDR_SPD_DATA_BLOCK0_SIZE		128
+/* block 1: module specific parameters sub-block */
+#define MV_DDR_SPD_DATA_BLOCK1M_SIZE		64
+/* block 1: hybrid memory parameters sub-block */
+#define MV_DDR_SPD_DATA_BLOCK1H_SIZE		64
+/* block 2: extended function parameter block */
+#define MV_DDR_SPD_DATA_BLOCK2E_SIZE		64
+/* block 2: manufacturing information */
+#define MV_DDR_SPD_DATA_BLOCK2M_SIZE		64
+/* block 3: end user programmable */
+#define MV_DDR_SPD_DATA_BLOCK3_SIZE		128
+
+#define MV_DDR_SPD_DEV_TYPE_DDR4		0xc
+#define MV_DDR_SPD_MODULE_TYPE_UDIMM		0x2
+#define MV_DDR_SPD_MODULE_TYPE_SO_DIMM		0x3
+#define MV_DDR_SPD_MODULE_TYPE_MINI_UDIMM	0x6
+#define MV_DDR_SPD_MODULE_TYPE_72BIT_SO_UDIMM	0x9
+#define MV_DDR_SPD_MODULE_TYPE_16BIT_SO_DIMM	0xc
+#define MV_DDR_SPD_MODULE_TYPE_32BIT_SO_DIMM	0xd
+
+/*
+ * TODO: For now, the struct contains block 0 & block 1 with module specific
+ * parameters for unbuffered memory module types only.
+ */
+	union mv_ddr_spd_data {
+			unsigned char all_bytes[MV_DDR_SPD_DATA_BLOCK0_SIZE +
+									MV_DDR_SPD_DATA_BLOCK1M_SIZE +
+									MV_DDR_SPD_DATA_BLOCK1H_SIZE +
+									MV_DDR_SPD_DATA_BLOCK2E_SIZE +
+									MV_DDR_SPD_DATA_BLOCK2M_SIZE];
+	struct {
+		/* block 0 */
+		union { /* num of bytes used/num of bytes in spd device/crc coverage */
+			unsigned char all_bits;
+			struct {
+				unsigned char spd_bytes_used:4,
+					spd_bytes_total:3,
+					reserved:1;
+			} bit_fields;
+		} byte_0;
+		union { /* spd revision */
+			unsigned char all_bits;
+			struct {
+				unsigned char addtions_level:4,
+					encoding_level:4;
+			} bit_fields;
+		} byte_1;
+		unsigned char  byte_2; /* key_byte/dram device type */
+		union { /* key byte/module type */
+			unsigned char all_bits;
+			struct {
+				unsigned char module_type:4,
+					hybrid_media:3,
+					hybrid:1;
+			} bit_fields;
+		} byte_3;
+		union { /* sdram density & banks */
+			unsigned char all_bits;
+			struct {
+				unsigned char die_capacity:4,
+					bank_address:2,
+					bank_group:2;
+			} bit_fields;
+		} byte_4;
+		union { /* sdram addressing */
+			unsigned char all_bits;
+			struct {
+				unsigned char col_address:3,
+					row_address:3,
+					reserved:2;
+			} bit_fields;
+		} byte_5;
+		union { /* sdram package type */
+			unsigned char all_bits;
+			struct {
+				unsigned char signal_loading:2,
+					reserved:2,
+					die_count:3,
+					sdram_package_type:1;
+			} bit_fields;
+		} byte_6;
+		union { /* sdram optional features */
+			unsigned char all_bits;
+			struct {
+				unsigned char mac:4, /* max activate count */
+					t_maw:2, /* max activate window */
+					reserved:2; /* all 0s */
+			} bit_fields;
+		} byte_7;
+		unsigned char byte_8; /* sdram thermal & refresh options; reserved; 0x00 */
+		union { /* other sdram optional features */
+			unsigned char all_bits;
+			struct {
+				unsigned char reserved:5, /* all 0s */
+					soft_ppr:1,
+					ppr:2; /* post package repair */
+			} bit_fields;
+		} byte_9;
+		union { /* secondary sdram package type */
+			unsigned char all_bits;
+			struct {
+				unsigned char signal_loading:2,
+					density_ratio:2, /* dram density ratio */
+					die_count:3,
+					sdram_package_type:1;
+			} bit_fields;
+		} byte_10;
+		union { /* module nominal voltage, vdd */
+			unsigned char all_bits;
+			struct {
+				unsigned char operable_1_2V:1,
+					endurant_1_2V:1,
+					operable_1V:1,
+					endurant_1V:1,
+					operable_2V:1,
+					endurant_2V:1,
+					reserved:2; /* all 0s */
+			} bit_fields;
+		} byte_11;
+		union { /* module organization*/
+			unsigned char all_bits;
+			struct {
+				unsigned char device_width:3,
+					dimm_pkg_ranks_num:3, /* package ranks per dimm number */
+					rank_mix:1,
+					reserved:1; /* 0 */
+			} bit_fields;
+		} byte_12;
+		union { /* module memory bus width */
+			unsigned char all_bits;
+			struct {
+				unsigned char primary_bus_width:3, /* in bits */
+					bus_width_ext:2, /* in bits */
+					reserved:3; /* all 0s */
+			} bit_fields;
+		} byte_13;
+		union { /* module thernal sensor */
+			unsigned char all_bits;
+			struct {
+				unsigned char reserved:7,
+					thermal_sensor:1;
+			} bit_fields;
+		} byte_14;
+		union { /* extended module type */
+			unsigned char all_bits;
+			struct {
+				unsigned char ext_base_module_type:4,
+					reserved:4; /* all 0s */
+			} bit_fields;
+		} byte_15;
+		unsigned char byte_16; /* reserved; 0x00 */
+		union { /* timebases */
+			unsigned char all_bits;
+			struct {
+				unsigned char ftb:2, /* fine timebase */
+					mtb:2, /* medium timebase */
+					reserved:4; /* all 0s */
+			} bit_fields;
+		} byte_17;
+		unsigned char byte_18; /* sdram min cycle time (t ck avg min), mtb */
+		unsigned char byte_19; /* sdram max cycle time (t ck avg max), mtb */
+		unsigned char byte_20; /* cas latencies supported, first byte */
+		unsigned char byte_21; /* cas latencies supported, second byte */
+		unsigned char byte_22; /* cas latencies supported, third byte */
+		unsigned char byte_23; /* cas latencies supported, fourth byte */
+		unsigned char byte_24; /* min cas latency time (t aa min), mtb */
+		unsigned char byte_25; /* min ras to cas delay time (t rcd min), mtb */
+		unsigned char byte_26; /* min row precharge delay time (t rp min), mtb */
+		union { /* upper nibbles for t ras min & t rc min */
+			unsigned char all_bits;
+			struct {
+				unsigned char t_ras_min_msn:4, /* t ras min most significant nibble */
+					t_rc_min_msn:4; /* t rc min most significant nibble */
+			} bit_fields;
+		} byte_27;
+		unsigned char byte_28; /* min active to precharge delay time (t ras min), l-s-byte, mtb */
+		unsigned char byte_29; /* min active to active/refresh delay time (t rc min), l-s-byte, mtb */
+		unsigned char byte_30; /* min refresh recovery delay time (t rfc1 min), l-s-byte, mtb */
+		unsigned char byte_31; /* min refresh recovery delay time (t rfc1 min), m-s-byte, mtb */
+		unsigned char byte_32; /* min refresh recovery delay time (t rfc2 min), l-s-byte, mtb */
+		unsigned char byte_33; /* min refresh recovery delay time (t rfc2 min), m-s-byte, mtb */
+		unsigned char byte_34; /* min refresh recovery delay time (t rfc4 min), l-s-byte, mtb */
+		unsigned char byte_35; /* min refresh recovery delay time (t rfc4 min), m-s-byte, mtb */
+		union { /* upper nibble for t faw */
+			unsigned char all_bits;
+			struct {
+				unsigned char t_faw_min_msn:4, /* t faw min most significant nibble */
+					reserved:4;
+			} bit_fields;
+		} byte_36;
+		unsigned char byte_37; /* min four activate window delay time (t faw min), l-s-byte, mtb */
+		/* byte 38: min activate to activate delay time (t rrd_s min), diff bank group, mtb */
+		unsigned char byte_38;
+		/* byte 39: min activate to activate delay time (t rrd_l min), same bank group, mtb */
+		unsigned char byte_39;
+		unsigned char byte_40; /* min cas to cas delay time (t ccd_l min), same bank group, mtb */
+		union { /* upper nibble for t wr min */
+			unsigned char all_bits;
+			struct {
+				unsigned char t_wr_min_msn:4, /* t wr min most significant nibble */
+					reserved:4;
+			} bit_fields;
+		} byte_41;
+		unsigned char byte_42; /* min write recovery time (t wr min) */
+		union { /* upper nibbles for t wtr min */
+			unsigned char all_bits;
+			struct {
+				unsigned char t_wtr_s_min_msn:4, /* t wtr s min most significant nibble */
+					t_wtr_l_min_msn:4; /* t wtr l min most significant nibble */
+			} bit_fields;
+		} byte_43;
+		unsigned char byte_44; /* min write to read time (t wtr s min), diff bank group, mtb */
+		unsigned char byte_45; /* min write to read time (t wtr l min), same bank group, mtb */
+		unsigned char bytes_46_59[14]; /* reserved; all 0s */
+		unsigned char bytes_60_77[18]; /* TODO: connector to sdram bit mapping */
+		unsigned char bytes_78_116[39]; /* reserved; all 0s */
+		/* fine offset for min cas to cas delay time (t ccd_l min), same bank group, ftb */
+		unsigned char byte_117;
+		/* fine offset for min activate to activate delay time (t rrd_l min), same bank group, ftb */
+		unsigned char byte_118;
+		/* fine offset for min activate to activate delay time (t rrd_s min), diff bank group, ftb */
+		unsigned char byte_119;
+		/* fine offset for min active to active/refresh delay time (t rc min), ftb */
+		unsigned char byte_120;
+		unsigned char byte_121; /* fine offset for min row precharge delay time (t rp min), ftb */
+		unsigned char byte_122; /* fine offset for min ras to cas delay time (t rcd min), ftb */
+		unsigned char byte_123; /* fine offset for min cas latency time (t aa min), ftb */
+		unsigned char byte_124; /* fine offset for sdram max cycle time (t ck avg max), ftb */
+		unsigned char byte_125; /* fine offset for sdram min cycle time (t ck avg min), ftb */
+		unsigned char byte_126; /* crc for base configuration section, l-s-byte */
+		unsigned char byte_127; /* crc for base configuration section, m-s-byte */
+		/*
+		 * block 1: module specific parameters for unbuffered memory module types only
+		 */
+		union { /* (unbuffered) raw card extension, module nominal height */
+			unsigned char all_bits;
+			struct {
+				unsigned char nom_height_max:5, /* in mm */
+					raw_cad_ext:3;
+			} bit_fields;
+		} byte_128;
+		union { /* (unbuffered) module maximum thickness */
+			unsigned char all_bits;
+			struct {
+				unsigned char front_thickness_max:4, /* in mm */
+					back_thickness_max:4; /* in mm */
+			} bit_fields;
+		} byte_129;
+		union { /* (unbuffered) reference raw card used */
+			unsigned char all_bits;
+			struct {
+				unsigned char ref_raw_card:5,
+					ref_raw_card_rev:2,
+					ref_raw_card_ext:1;
+			} bit_fields;
+		} byte_130;
+		union { /* (unbuffered) address mapping from edge connector to dram */
+			unsigned char all_bits;
+			struct {
+				unsigned char rank_1_mapping:1,
+					reserved:7;
+			} bit_fields;
+		} byte_131;
+		unsigned char bytes_132_191[60]; /* reserved; all 0s */
+		unsigned char bytes_192_255[MV_DDR_SPD_DATA_BLOCK1H_SIZE];  /* reserved; all 0s */
+		unsigned char bytes_256_319[MV_DDR_SPD_DATA_BLOCK2E_SIZE];  /* reserved; all 0s */
+		unsigned char bytes_320_383[MV_DDR_SPD_DATA_BLOCK2M_SIZE];  /* reserved; all 0s */
+	} byte_fields;
+};
+
+#endif /* _MV_DDR_SPD_H */
diff --git a/lib/smbios.c b/lib/smbios.c
index bbbaa5521c..12ebb13785 100644
--- a/lib/smbios.c
+++ b/lib/smbios.c
@@ -17,6 +17,7 @@
 #include <dm/uclass-internal.h>
 #endif
 #include <linux/bitops.h>
+#include "smbios_ddr_info.h"
 
 static u32 smbios_struct_count;
 
@@ -475,21 +476,50 @@ static int smbios_write_type17_dm(ulong *current, int handle, int index)
 {
 	struct smbios_type17 *t;
 	int len = sizeof(struct smbios_type17);
-	const char *manufacturer = "UNKNOWN";
+	const char *locator = "A1";
+	char str[32];
+
+	get_dram_info_init();
 
 	t = map_sysmem(*current, len);
 	memset(t, 0, sizeof(struct smbios_type17));
 	fill_smbios_header(t, SMBIOS_MEMORY_DEVICE, len, handle + index);
 
-	/* Data to be filled by OEM */
-	/* ...
-	 * ...
-	 * ...
-	 */
+	/* Additional Data to be modified by OEM */
+
 	t->physical_memory_array_handle = 0x0800;
-	t->size = DMTF_TYPE17_4GB;
-	t->form_factor = DMTF_TYPE17_DIMM;
-	t->manufacturer = smbios_add_string(t->eos, manufacturer);
+	t->size = mv_ddr_spd_die_capacity_get();
+	t->form_factor = spd_module_type_to_dtmf_type();
+
+	t->total_width = bus_total_width();
+	t->data_width = bus_data_width();
+
+	t->device_set = SET_1;
+	t->device_locator = smbios_add_string(t->eos, locator);
+
+	t->memory_type = spd_dramdev_type_to_dtmf_type();
+	t->type_detail = spd_module_type_to_dtmf_type();
+	t->speed = get_dram_speed();
+	t->configured_memory_speed = get_dram_speed();
+
+	t->attributes = mv_ddr_spd_pkg_rank_get();
+	t->module_product_id = get_product_id();
+
+	sprintf(str, "%X", get_dram_serial());
+	t->serial_number = smbios_add_string(t->eos, str);
+
+	sprintf(str, "%X", get_module_manufacturer_id());
+	t->module_manufacturer_id = smbios_add_string(t->eos, str);
+
+	sprintf(str, "%X", get_dram_manufacturer_id());
+	t->manufacturer = smbios_add_string(t->eos, str);
+
+	get_dram_module_part_no(str);
+	t->part_number = smbios_add_string(t->eos, str);
+
+	t->minimum_voltage = get_dram_min_volt();
+	t->maximum_voltage  = get_dram_max_volt();
+	t->configured_voltage = get_dram_configured_volt();
 
 	len = t->length + smbios_string_table_len(t->eos);
 	*current += len;
diff --git a/lib/smbios_ddr_info.c b/lib/smbios_ddr_info.c
new file mode 100644
index 0000000000..200b90ad69
--- /dev/null
+++ b/lib/smbios_ddr_info.c
@@ -0,0 +1,290 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020, Sujeet Baranwal <sbaranwal@marvell.com>
+ *
+ */
+
+#include <stdint.h>
+#include <common.h>
+#include <env.h>
+#include <mapmem.h>
+#include <smbios.h>
+#include <tables_csum.h>
+#include <version.h>
+#include <mapmem.h>
+#include "mv_ddr_spd.h"
+#include "smbios_ddr_info.h"
+
+static union mv_ddr_spd_data *spd_data;
+
+u8 mv_ddr_spd_dev_type_get(void)
+{
+	u8 dev_type = spd_data->byte_fields.byte_2;
+	return dev_type;
+}
+
+u8 mv_ddr_spd_module_type_get(void)
+{
+	u8 type_detail = TYPE_SYNCHRONOUS;
+	u8 module_type = spd_data->byte_fields.byte_3.bit_fields.module_type;
+
+	switch (module_type) {
+	case SPD_RDIMM:
+	case SPD_MINI_RDIMM:
+	case SPD_72B_SO_RDIMM:
+		type_detail |= TYPE_REGISTERED_BUFFERED;
+		break;
+	default:
+		break;
+	}
+
+	switch (module_type) {
+	case SPD_UDIMM:
+	case SPD_SO_DIMM:
+	case SPD_MINI_UDIMM:
+	case SPD_72B_SO_UDIMM:
+	case SPD_16B_SO_DIMM:
+	case SPD_32B_SO_DIMM:
+		type_detail |= TYPE_UNBUFFERED_UNREGISTERED;
+		break;
+	default:
+		break;
+	}
+
+	return type_detail;
+}
+
+enum mv_ddr_pkg_rank mv_ddr_spd_bus_width_ext_get(void)
+{
+	u8 bus_width_ext = spd_data->byte_fields.byte_13.bit_fields.bus_width_ext;
+	enum mv_ddr_bus_width_ext ret_val;
+
+	switch (bus_width_ext) {
+	case 0x00:
+		ret_val = MV_DDR_BUS_WIDTH_EXT_0;
+		break;
+	case 0x01:
+		ret_val = MV_DDR_BUS_WIDTH_EXT_8;
+		break;
+	default:
+		ret_val = MV_DDR_BUS_WIDTH_EXT_LAST;
+		break;
+	}
+	return ret_val;
+}
+
+u32 mv_ddr_spd_pri_bus_width_get(void)
+{
+	u8 pri_bus_width = spd_data->byte_fields.byte_13.bit_fields.primary_bus_width;
+	enum mv_ddr_pri_bus_width ret_val;
+
+	switch (pri_bus_width) {
+	case 0x00:
+		ret_val = MV_DDR_PRI_BUS_WIDTH_8;
+		break;
+	case 0x01:
+		ret_val = MV_DDR_PRI_BUS_WIDTH_16;
+		break;
+	case 0x02:
+		ret_val = MV_DDR_PRI_BUS_WIDTH_32;
+		break;
+	case 0x03:
+		ret_val = MV_DDR_PRI_BUS_WIDTH_64;
+		break;
+	default:
+		ret_val = MV_DDR_PRI_BUS_WIDTH_LAST;
+	}
+	return ret_val;
+}
+
+u32 spd_module_type_to_dtmf_type(void)
+{
+	u8 mod_type = mv_ddr_spd_module_type_get();
+
+	switch (mod_type) {
+	case SPD_RDIMM:
+	case SPD_UDIMM:
+	case SPD_LRDIMM:
+	case SPD_MINI_RDIMM:
+	case SPD_MINI_UDIMM:
+		return DTMF_TYPE17_FORM_FACTOR_DIMM;
+
+	case SPD_SO_DIMM:
+	case SPD_72B_SO_RDIMM:
+	case SPD_72B_SO_UDIMM:
+	case SPD_16B_SO_DIMM:
+	case SPD_32B_SO_DIMM:
+		return DTMF_TYPE17_FORM_FACTOR_SODIMM;
+
+	default:
+		return 0;
+	}
+}
+
+u32 spd_dramdev_type_to_dtmf_type(void)
+{
+	u8 mod_type = mv_ddr_spd_dev_type_get();
+
+	switch (mod_type) {
+	case	SPD_DRAM_TYPE_SDRAM:
+		return DTMF_TYPE17_TYPE_SDRAM;
+	case    SPD_DRAM_TYPE_ROM:
+		return DTMF_TYPE17_TYPE_ROM;
+	case    SPD_DRAM_TYPE_DDR_SGRAM:
+		return DTMF_TYPE17_TYPE_SGRAM;
+	case    SPD_DRAM_TYPE_DDR_SDRAM:
+		return DTMF_TYPE17_TYPE_SDRAM;
+
+	case    SPD_DRAM_TYPE_DDR2_SDRAM:
+		return DTMF_TYPE17_TYPE_DDR2;
+
+	case    SPD_DRAM_TYPE_DDR2_SDRAM_FB_DIMM:
+		return DTMF_TYPE17_TYPE_DDR2_FB_DIMM;
+
+	case    SPD_DRAM_TYPE_DDR2_SDRAM_FB_DIMM_PROBE:
+		return DTMF_TYPE17_TYPE_DDR2_FB_DIMM;
+
+	case    SPD_DRAM_TYPE_DDR3_SDRAM:
+		return DTMF_TYPE17_TYPE_DDR3;
+	case    SPD_DRAM_TYPE_DDR4_SDRAM:
+		return DTMF_TYPE17_TYPE_DDR4;
+	default:
+		return	0;
+	}
+}
+
+u32 bus_total_width(void)
+{
+	u32 data_width = mv_ddr_spd_pri_bus_width_get();
+	u32 ext_width = mv_ddr_spd_bus_width_ext_get();
+
+	return data_width + ext_width;
+}
+
+u32 bus_data_width(void)
+{
+	u32 data_width = mv_ddr_spd_pri_bus_width_get();
+
+	return data_width;
+}
+
+u32 mv_ddr_spd_die_capacity_get(void)
+{
+	u32 sdram_capacity, primary_bus_width, sdram_width;
+	u32 logical_ranks_per_dimm, total;
+
+	/* die_capacity = 0 => 256Mbits, from here, it doubles */
+	sdram_capacity = 256 << spd_data->byte_fields.byte_4.bit_fields.die_capacity;
+	primary_bus_width = 8 << spd_data->byte_fields.byte_13.bit_fields.primary_bus_width;
+	sdram_width = 4 << spd_data->byte_fields.byte_12.bit_fields.device_width;
+
+	/* for SDP, DDP, QDP */
+	logical_ranks_per_dimm =  spd_data->byte_fields.byte_12.bit_fields.dimm_pkg_ranks_num + 1;
+
+	/* for 3DS */
+	if (spd_data->byte_fields.byte_6.bit_fields.signal_loading == SINGLE_LOAD_STACK_3DS)
+		if (spd_data->byte_fields.byte_6.bit_fields.die_count)
+			logical_ranks_per_dimm *= (spd_data->byte_fields.byte_6.bit_fields.die_count + 1);
+
+	total = (sdram_capacity /  8) * (primary_bus_width / sdram_width) * logical_ranks_per_dimm;
+	return total;
+}
+
+u32 get_dram_speed(void)
+{
+	u32 speed = *(u32 *)&spd_data->all_bytes[DDR_SPEED_INFO_INDEX];
+
+	/* Speed would be doubled because of DDR */
+	return speed * 2;
+}
+
+u32 get_module_manufacturer_id(void)
+{
+	u32 manufacturer_code = ((u32)spd_data->all_bytes[MODULE_MANUFACTURER_ID_MSB_INDEX] << 8) |
+		(spd_data->all_bytes[MODULE_MANUFACTURER_ID_LSB_INDEX]);
+	return manufacturer_code;
+}
+
+u32 get_dram_manufacturer_id(void)
+{
+	u32 manufacturer_code = ((u32)spd_data->all_bytes[DRAM_MANUFACTURER_ID_MSB_INDEX] << 8) |
+		(spd_data->all_bytes[DRAM_MANUFACTURER_ID_LSB_INDEX]);
+	return manufacturer_code;
+}
+
+u32 get_dram_serial(void)
+{
+	u32 serial = *(u32 *)&spd_data->all_bytes[MODULE_SERIAL_NO_INDEX];
+	return serial;
+}
+
+void get_dram_module_part_no(char *str)
+{
+	char *module_part_no = (char *)&spd_data->all_bytes[MODOULE_PART_NO];
+
+	memcpy(str,  module_part_no, MODULE_PART_LENGTH);
+	str[MODULE_PART_LENGTH + 1] = 0;
+}
+
+u32 get_product_id(void)
+{
+	u16 prod_id =  spd_data->all_bytes[MODOULE_REVISION_CODE];
+	return prod_id;
+}
+
+enum mv_ddr_pkg_rank mv_ddr_spd_pkg_rank_get(void)
+{
+	u8 pkg_rank = spd_data->byte_fields.byte_12.bit_fields.dimm_pkg_ranks_num;
+	enum mv_ddr_pkg_rank ret_val;
+
+	switch (pkg_rank) {
+	case MV_DDR_PKG_RANK_1:
+	case MV_DDR_PKG_RANK_2:
+	case MV_DDR_PKG_RANK_3:
+	case MV_DDR_PKG_RANK_4:
+		ret_val = pkg_rank + 1;
+		break;
+	default:
+		ret_val = MV_DDR_PKG_RANK_LAST;
+	}
+	return ret_val;
+}
+
+u16 get_dram_min_volt(void)
+{
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_1V)
+		return 1000;
+
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_1_2V)
+		return 1200;
+
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_2V)
+		return 2000;
+
+	return 0;
+}
+
+u16 get_dram_max_volt(void)
+{
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_2V)
+		return 2000;
+
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_1_2V)
+		return 1200;
+
+	if (spd_data->byte_fields.byte_11.bit_fields.operable_1V)
+		return 1000;
+
+	return 0;
+}
+
+u16 get_dram_configured_volt(void)
+{
+	/* TBD by OEM, the voltage they run */
+	return 1200;
+}
+
+void get_dram_info_init(void)
+{
+	spd_data = map_sysmem(SHARED_DDR_BTW_BLE_UBOOT, 384);
+}
diff --git a/lib/smbios_ddr_info.h b/lib/smbios_ddr_info.h
new file mode 100644
index 0000000000..b776b0ed0f
--- /dev/null
+++ b/lib/smbios_ddr_info.h
@@ -0,0 +1,126 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2020, Sujeet Baranwal <sbaranwal@marvell.com>
+ *
+ */
+
+#ifndef _SMBIOS_DDR_INFO_H_
+#define _SMBIOS_DDR_INFO_H_
+
+/* The DRAM location where SPD data is stored from firmware running from SRAM */
+#define SHARED_DDR_BTW_BLE_UBOOT	0x6000000
+
+#define MODULE_MANUFACTURER_ID_LSB_INDEX	320
+#define MODULE_MANUFACTURER_ID_MSB_INDEX	321
+#define MODULE_SERIAL_NO_INDEX				325
+#define MODOULE_PART_NO						329
+#define MODOULE_REVISION_CODE				349
+#define DRAM_MANUFACTURER_ID_LSB_INDEX		350
+#define DRAM_MANUFACTURER_ID_MSB_INDEX		351
+
+/* Memory type */
+#define SPD_RDIMM							0x1
+#define SPD_UDIMM							0x2
+#define SPD_SO_DIMM							0x3
+#define SPD_LRDIMM							0x4
+#define SPD_MINI_RDIMM						0x5
+#define SPD_MINI_UDIMM						0x6
+#define SPD_72B_SO_RDIMM					0x8
+#define SPD_72B_SO_UDIMM					0x9
+#define SPD_16B_SO_DIMM						0xC
+#define SPD_32B_SO_DIMM						0xD
+
+#define DTMF_TYPE17_FORM_FACTOR_DIMM		0x09
+#define DTMF_TYPE17_FORM_FACTOR_SODIMM		0x0D
+
+/* DRAM type */
+#define SPD_DRAM_TYPE_FAST_PAGE_MODE			0x01
+#define SPD_DRAM_TYPE_EDO						0x02
+#define SPD_DRAM_TYPE_PIPELINED_NIBBLE			0x03
+#define SPD_DRAM_TYPE_SDRAM						0x04
+#define SPD_DRAM_TYPE_ROM						0x05
+#define SPD_DRAM_TYPE_DDR_SGRAM					0x06
+#define SPD_DRAM_TYPE_DDR_SDRAM					0x07
+#define SPD_DRAM_TYPE_DDR2_SDRAM				0x08
+#define SPD_DRAM_TYPE_DDR2_SDRAM_FB_DIMM		0x09
+#define SPD_DRAM_TYPE_DDR2_SDRAM_FB_DIMM_PROBE	0x0A
+#define SPD_DRAM_TYPE_DDR3_SDRAM				0x0B
+#define SPD_DRAM_TYPE_DDR4_SDRAM				0x0C
+
+#define DTMF_TYPE17_TYPE_SGRAM					0x10
+#define DTMF_TYPE17_TYPE_ROM					0x08
+#define DTMF_TYPE17_TYPE_SDRAM					0x0F
+#define DTMF_TYPE17_TYPE_DDR					0x12
+#define DTMF_TYPE17_TYPE_DDR2					0x13
+#define DTMF_TYPE17_TYPE_DDR2_FB_DIMM			0x14
+#define DTMF_TYPE17_TYPE_DDR3					0x18
+#define DTMF_TYPE17_TYPE_DDR4					0x1A
+
+/* Bus width */
+enum mv_ddr_bus_width_ext { /* number of extension bus width bits */
+	MV_DDR_BUS_WIDTH_EXT_0		= 0,
+	MV_DDR_BUS_WIDTH_EXT_8		= 8,
+	MV_DDR_BUS_WIDTH_EXT_LAST	= 9
+};
+
+enum mv_ddr_pri_bus_width { /* number of primary bus width bits */
+	MV_DDR_PRI_BUS_WIDTH_8		= 8,
+	MV_DDR_PRI_BUS_WIDTH_16		= 16,
+	MV_DDR_PRI_BUS_WIDTH_32		= 32,
+	MV_DDR_PRI_BUS_WIDTH_64		= 64,
+	MV_DDR_PRI_BUS_WIDTH_LAST	= 65
+};
+
+/* Memory Size */
+#define MV_DDR_DIE_CAP_32MB		0x20
+#define MV_DDR_DIE_CAP_64MB		0x40
+#define	MV_DDR_DIE_CAP_128MB	0x80
+#define MV_DDR_DIE_CAP_256MB	0x100
+#define MV_DDR_DIE_CAP_512MB	0x200
+#define MV_DDR_DIE_CAP_1GB		0x400
+#define MV_DDR_DIE_CAP_2GB		0x800
+#define MV_DDR_DIE_CAP_4GB		0x1000
+#define MV_DDR_DIE_CAP_1_5GB	0x600
+#define MV_DDR_DIE_CAP_3GB		0xC00
+
+/* Rank */
+enum mv_ddr_pkg_rank { /* number of package ranks per dimm */
+	MV_DDR_PKG_RANK_1,
+	MV_DDR_PKG_RANK_2,
+	MV_DDR_PKG_RANK_3,
+	MV_DDR_PKG_RANK_4,
+	MV_DDR_PKG_RANK_5,
+	MV_DDR_PKG_RANK_6,
+	MV_DDR_PKG_RANK_7,
+	MV_DDR_PKG_RANK_8,
+	MV_DDR_PKG_RANK_LAST
+};
+
+#define	TYPE_SYNCHRONOUS				BIT(7)
+#define	TYPE_REGISTERED_BUFFERED		BIT(13)
+#define	TYPE_UNBUFFERED_UNREGISTERED	BIT(14)
+
+/* Misc */
+#define SET_1					1
+#define MODULE_PART_LENGTH		20
+#define SINGLE_LOAD_STACK_3DS	0x2
+#define DDR_SPEED_INFO_INDEX	MV_DDR_SPD_DATA_BLOCK0_SIZE
+
+u32 bus_data_width(void);
+u32 get_dram_speed(void);
+u32 get_product_id(void);
+u32 bus_total_width(void);
+u32 get_dram_serial(void);
+u16 get_dram_max_volt(void);
+u16 get_dram_min_volt(void);
+void get_dram_info_init(void);
+u32 get_dram_manufacturer_id(void);
+u16 get_dram_configured_volt(void);
+u32 get_module_manufacturer_id(void);
+void get_dram_module_part_no(char *str);
+u32 mv_ddr_spd_die_capacity_get(void);
+u32 spd_module_type_to_dtmf_type(void);
+u32 spd_dramdev_type_to_dtmf_type(void);
+enum mv_ddr_pkg_rank mv_ddr_spd_pkg_rank_get(void);
+
+#endif /* _SMBIOS_DDR_INFO_H_ */
-- 
2.29.0

