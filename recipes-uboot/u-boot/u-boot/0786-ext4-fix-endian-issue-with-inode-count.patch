From ad379331ea022108f829db01c044c0047734766a Mon Sep 17 00:00:00 2001
From: Aaron Williams <aaron.williams@cavium.com>
Date: Tue, 24 Jul 2018 03:59:06 -0700
Subject: [PATCH 0786/1239] ext4: fix endian issue with inode count

The block group inode count requires a cpu_to_le16 wrapper before setting it.
Additionally, for 64-bit filesystems the upper 16 bits should also be set.

Signed-off-by: Aaron Williams <aaron.williams@cavium.com>
---
 fs/ext4/ext4_common.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/fs/ext4/ext4_common.c b/fs/ext4/ext4_common.c
index a7add7dec8..f67c9aee51 100644
--- a/fs/ext4/ext4_common.c
+++ b/fs/ext4/ext4_common.c
@@ -106,6 +106,15 @@ static inline void ext4fs_bg_itable_unused_dec
 		bg->bg_itable_unused_high = cpu_to_le16(free_inodes >> 16);
 }
 
+static inline void ext4fs_bg_itable_unused_set(struct ext2_block_group *bg,
+					       const struct ext_filesystem *fs,
+					       uint32_t free_inodes)
+{
+	bg->bg_itable_unused = cpu_to_le16(free_inodes & 0xffff);
+	if (fs->gdsize == 64)
+		bg->bg_itable_unused_high = cpu_to_le16(free_inodes >> 16);
+}
+
 uint64_t ext4fs_sb_get_free_blocks(const struct ext2_sblock *sb)
 {
 	uint64_t free_blocks = le32_to_cpu(sb->free_blocks);
@@ -1133,7 +1142,8 @@ int ext4fs_get_new_inode_no(void)
 				uint64_t i_bitmap_blk =
 					ext4fs_bg_get_inode_id(bgd, fs);
 				if (has_gdt_chksum)
-					bgd->bg_itable_unused = free_inodes;
+					ext4fs_bg_itable_unused_set(bgd, fs,
+								free_inodes);
 				if (bg_flags & EXT4_BG_INODE_UNINIT) {
 					put_ext4(i_bitmap_blk * fs->blksz,
 						 zero_buffer, fs->blksz);
-- 
2.29.0

