From b4cb38794b0f3ae8e89d8bc8fc5967d01c982d2c Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@caviumnetworks.com>
Date: Wed, 7 Nov 2018 16:16:07 -0800
Subject: [PATCH 0837/1239] drivers: mmc: octeontx: add errata on calibration
 delay

Pass 1.x will not support calibration of tap delay. Use fixed
value of 4 for MIO_EMM_TAP as workaround.
Also, reduce the number of taps to 512, doc errata.

Signed-off-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 drivers/mmc/octeontx_mmc.c | 33 ++++++++++++++++++++++-----------
 1 file changed, 22 insertions(+), 11 deletions(-)

diff --git a/drivers/mmc/octeontx_mmc.c b/drivers/mmc/octeontx_mmc.c
index dde7b27b5b..e6f2033966 100644
--- a/drivers/mmc/octeontx_mmc.c
+++ b/drivers/mmc/octeontx_mmc.c
@@ -53,6 +53,9 @@
 #include <div64.h>
 #include <watchdog.h>
 #include <console.h>	/* for ctrlc */
+#ifdef CONFIG_ARCH_OCTEONTX2
+#include <asm/arch/octeontx2.h>
+#endif
 
 #ifdef DEBUG
 #define DEBUG_CSR
@@ -4450,29 +4453,37 @@ static int octeontx2_mmc_calibrate_delay(struct mmc *mmc)
 	union cavm_mio_emm_calb emm_calb;
 	union cavm_mio_emm_tap emm_tap;
 	ulong start = get_timer(0);
+	u8 rev;
 
 	/* ASIM doesn't support this */
 	if (slot->is_asim)
 		return 0;
 
-	emm_calb.u = 0;
-	emm_calb.s.start = 1;
-	mmc_write_csr(mmc, CAVM_MIO_EMM_CALB(), emm_calb.u);
-	/* This should only take 3 microseconds */
-	do {
-		udelay(5);
-		emm_tap.u = mmc_read_csr(mmc, CAVM_MIO_EMM_TAP());
-	} while (!emm_tap.s.delay && get_timer(start) < 10);
+	dm_pci_read_config8(slot->host->dev, PCI_REVISION_ID, &rev);
+	/* MIO_EMM errata for T96 pass 1.x */
+	if (is_board_model(CN96XX) && !rev)
+		emm_tap.s.delay = 4;
+	else {
+		emm_calb.u = 0;
+		emm_calb.s.start = 1;
+		mmc_write_csr(mmc, CAVM_MIO_EMM_CALB(), emm_calb.u);
+		/* This should only take 3 microseconds */
+		do {
+			udelay(5);
+			emm_tap.u = mmc_read_csr(mmc, CAVM_MIO_EMM_TAP());
+		} while (!emm_tap.s.delay && get_timer(start) < 10);
+	}
+
 	if (!emm_tap.s.delay) {
 		printf("%s: Error: delay calibration failed, timed out.\n",
 		       __func__);
 		return -1;
 	}
-	/* The tap delay is the number of 10ns clocks it took for 1024
+	/* The tap delay is the number of 10ns clocks it took for 512
 	 * tap delays.  First we multiply the delay by 10,000 to convert
-	 * to ps then divide by 1024 to get the delay in ps per tap delay.
+	 * to ps then divide by 512 to get the delay in ps per tap delay.
 	 */
-	slot->timing_tapps = 10 * 1000 * emm_tap.s.delay / 1024;
+	slot->timing_tapps = 10 * 1000 * emm_tap.s.delay / 512;
 
 	return 0;
 }
-- 
2.29.0

