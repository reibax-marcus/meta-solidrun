From eaee8368f6c9b929c1ab7764e2c689c0802d88f3 Mon Sep 17 00:00:00 2001
From: Aaron Williams <aaron.williams@cavium.com>
Date: Tue, 25 Jun 2019 02:28:58 -0700
Subject: [PATCH 0935/1239] octeontx: serial: Added pci-bootcmd input driver

This adds a pseudo serial driver and console driver
using shared memory accessed across the PCIe bus.
This allows the host utility cavm-remote-bootcmd
and cavm-remote-load to send commands directly to
the U-Boot command line.

In order to enable this, iomux support is also
enabled.  The stdin environment variable must be
set to serial,pci-bootcmd to enable this input.

Change-Id: I4168d20a693d039ae354910b071316c415b9e26e
Signed-off-by: Aaron Williams <aaron.williams@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/11573
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
---
 board/Marvell/octeontx2/octeontx2.c      |  22 ++
 configs/octeontx2_96xx_defconfig         |   3 +
 drivers/serial/Kconfig                   |  11 +
 drivers/serial/Makefile                  |   1 +
 drivers/serial/serial_octeontx_bootcmd.c | 300 +++++++++++++++++++++++
 5 files changed, 337 insertions(+)
 create mode 100644 drivers/serial/serial_octeontx_bootcmd.c

diff --git a/board/Marvell/octeontx2/octeontx2.c b/board/Marvell/octeontx2/octeontx2.c
index 51d61b3dd5..8b1580fd94 100644
--- a/board/Marvell/octeontx2/octeontx2.c
+++ b/board/Marvell/octeontx2/octeontx2.c
@@ -6,6 +6,7 @@
  */
 
 #include <common.h>
+#include <console.h>
 #include <dm.h>
 #include <dm/uclass-internal.h>
 #include <malloc.h>
@@ -253,6 +254,11 @@ int board_late_init(void)
 {
 	char boardname[20];
 	long val;
+#ifdef CONFIG_OCTEONTX_SERIAL_BOOTCMD
+	struct udevice *bootcmd_dev;
+	int ret;
+	char *stdinname = env_get("stdin");
+#endif
 
 	debug("%s()\n", __func__);
 
@@ -270,6 +276,22 @@ int board_late_init(void)
 
 	val = env_get_hex("disable_ooo", 0);
 	atf_configure_ooo(val);
+
+#ifdef CONFIG_OCTEONTX_SERIAL_BOOTCMD
+	/* This will cause the pci-bootcmd driver to be probed. */
+	ret = uclass_get_device_by_name(UCLASS_SERIAL, "pci-bootcmd",
+					&bootcmd_dev);
+	if (!ret && bootcmd_dev)
+		debug("%s: %s found!\n", __func__, bootcmd_dev->name);
+#if CONFIG_IS_ENABLED(CONSOLE_MUX)
+	if (stdinname) {
+		ret = iomux_doenv(stdin, stdinname);
+		if (ret)
+			printf("%s: Error setting stdin to %s\n",
+			       __func__, stdinname);
+	}
+#endif
+#endif
 	return 0;
 }
 
diff --git a/configs/octeontx2_96xx_defconfig b/configs/octeontx2_96xx_defconfig
index 72e6e657f0..143550c611 100644
--- a/configs/octeontx2_96xx_defconfig
+++ b/configs/octeontx2_96xx_defconfig
@@ -101,6 +101,7 @@ CONFIG_DEBUG_UART_BASE=0x87e028000000
 CONFIG_DEBUG_UART_CLOCK=24000000
 CONFIG_DEBUG_UART_SKIP_INIT=y
 CONFIG_PL01X_SERIAL=y
+CONFIG_OCTEONTX_SERIAL_BOOTCMD=y
 CONFIG_DM_SPI=y
 CONFIG_OCTEONTX_SPI=y
 CONFIG_USB=y
@@ -119,3 +120,5 @@ CONFIG_SHA1SUM_VERIFY=y
 CONFIG_CMD_MD5SUM=y
 CONFIG_MD5SUM_VERIFY=y
 CONFIG_CMD_TIME=y
+CONFIG_CONSOLE_MUX=y
+CONFIG_SYS_CONSOLE_IS_IN_ENV=y
diff --git a/drivers/serial/Kconfig b/drivers/serial/Kconfig
index ae2d819ba9..f4bc7ffce2 100644
--- a/drivers/serial/Kconfig
+++ b/drivers/serial/Kconfig
@@ -710,6 +710,17 @@ config OWL_SERIAL
 	  serial port, say Y to this option. If unsure, say N.
 	  Single baudrate is supported in current implementation (115200).
 
+config OCTEONTX_SERIAL_BOOTCMD
+	bool "OcteonTX/OcteonTX2 PCI remote bootcmd input"
+	depends on DM_SERIAL
+	depends on (ARCH_OCTEONTX || ARCH_OCTEONTX2)
+	select CONSOLE_MUX
+	help
+	 This driver supports remote input over the PCIe bus from a host
+	 to U-Boot for entering commands.  It is utilized by the host
+	 commands cavm-remote-load and cavm-remote-bootcmd.  This driver
+	 should be used in addition to the standard PL011 serial driver.
+
 config PXA_SERIAL
 	bool "PXA serial port support"
 	help
diff --git a/drivers/serial/Makefile b/drivers/serial/Makefile
index 06ee30697d..2f702cbdf7 100644
--- a/drivers/serial/Makefile
+++ b/drivers/serial/Makefile
@@ -63,6 +63,7 @@ obj-$(CONFIG_BCM283X_PL011_SERIAL) += serial_bcm283x_pl011.o
 obj-$(CONFIG_MSM_SERIAL) += serial_msm.o
 obj-$(CONFIG_MVEBU_A3700_UART) += serial_mvebu_a3700.o
 obj-$(CONFIG_MPC8XX_CONS) += serial_mpc8xx.o
+obj-$(CONFIG_OCTEONTX_SERIAL_BOOTCMD) += serial_octeontx_bootcmd.o
 obj-$(CONFIG_NULLDEV_SERIAL) += serial_nulldev.o
 obj-$(CONFIG_OWL_SERIAL) += serial_owl.o
 obj-$(CONFIG_OMAP_SERIAL) += serial_omap.o
diff --git a/drivers/serial/serial_octeontx_bootcmd.c b/drivers/serial/serial_octeontx_bootcmd.c
new file mode 100644
index 0000000000..3a59c57002
--- /dev/null
+++ b/drivers/serial/serial_octeontx_bootcmd.c
@@ -0,0 +1,300 @@
+/*
+ * Copyright (C) 2019 Marvell International Ltd.
+ *
+ * SPDX-License-Identifier:     BSD-3-Clause
+ * https://spdx.org/licenses
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <asm/io.h>
+#include <serial.h>
+#include <linux/compiler.h>
+#include <watchdog.h>
+#include <stdio_dev.h>
+#include <input.h>
+
+#undef CONFIG_LOGLEVEL
+#define CONFIG_LOGLEVEL 10
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define OCTEONTX_BOOTCMD_BUF_SIZE		4096
+
+/** "BOOTCMD!" */
+#define OCTEONTX_PIC_IO_BUF_MAGIC		0x21444d43544f4f42
+#define OCTEONTX_PCI_IO_BUF_OWNER_INVALID	0
+#define OCTEONTX_PCI_IO_BUF_OWNER_OCTEONTX	1
+#define OCTEONTX_PCI_IO_BUF_OWNER_HOST		2
+
+#define DRIVER_NAME				"pci-bootcmd"
+
+#ifndef CONFIG_DM_SERIAL
+# error CONFIG_DM_SERIAL required
+#endif
+
+struct octeontx_pci_io_buf {
+	u64 magic;
+	u32 owner;
+	u32 len;
+	char data[0];
+};
+
+struct octeontx_bootcmd_platdata {
+	fdt_addr_t base;
+	fdt_size_t size;
+};
+
+struct octeontx_bootcmd_data {
+	struct octeontx_pci_io_buf *buf;
+	struct udevice *dev;
+	fdt_size_t size;	/** Size of buffer descriptor & data */
+	unsigned long data_size;/** Size of buffer data */
+	u32 copy_offset;
+	bool eol;
+	bool started;
+	bool unlocked;
+};
+
+static struct udevice *bootcmd_dev;
+
+static int octeontx_bootcmd_start(struct udevice *dev)
+{
+	struct octeontx_bootcmd_data *bc = dev_get_priv(dev);
+	struct octeontx_pci_io_buf *buf = bc->buf;
+	struct octeontx_bootcmd_platdata *plat = dev_get_platdata(bc->dev);
+
+	if (bc->started) {
+		debug("%s: Already started\n", __func__);
+		return 0;
+	}
+
+	dev_dbg(bc->dev, "%s(%s)\n", __func__, dev->name);
+	/* Get address of IO buffer and check it */
+	bc->size = plat->size;
+	bc->data_size = bc->size - sizeof(struct octeontx_pci_io_buf);
+	bc->copy_offset = 0;
+	bc->eol = false;
+
+	buf->len = 0;
+	buf->data[0] = '\0';
+	buf->magic = OCTEONTX_PIC_IO_BUF_MAGIC;
+	if (bc->unlocked)
+		buf->owner = OCTEONTX_PCI_IO_BUF_OWNER_HOST;
+	else
+		buf->owner = OCTEONTX_PCI_IO_BUF_OWNER_OCTEONTX;
+
+	bc->unlocked = true;
+	bc->started = true;
+	__iowmb();
+	flush_dcache_range((ulong)buf, (ulong)buf + bc->size);
+
+	return 0;
+}
+
+/**
+ * Return if there are any pending characters for input or output
+ * @param	dev	serial device
+ * @param	input	true to check for pending input
+ *
+ * @return	1 if pending data, 0 if no data available
+ */
+static int octeontx_bootcmd_pending(struct udevice *dev, bool input)
+{
+	struct octeontx_bootcmd_data *bc = dev_get_priv(dev);
+	struct octeontx_pci_io_buf *buf = bc->buf;
+
+	if (!bc->started) {
+		dev_dbg("%s: Error: not started\n", __func__);
+		return 0;
+	}
+
+	invalidate_dcache_range((ulong)buf,
+				(ulong)buf + bc->size);
+	__iormb();
+	if (input) {
+		if (bc->eol)
+			return 1;
+		if (buf->owner != OCTEONTX_PCI_IO_BUF_OWNER_OCTEONTX)
+			return 0;
+		if ((buf->len > bc->copy_offset) &&
+		    (buf->data[bc->copy_offset] != '\0'))
+			return 1;
+		return 0;
+	}
+
+	return 0;
+}
+
+static int octeontx_bootcmd_putc(struct udevice *dev, const char ch)
+{
+	return 0;
+}
+
+static int octeontx_bootcmd_getc(struct udevice *dev)
+{
+	struct octeontx_bootcmd_data *bc = dev_get_priv(dev);
+	struct octeontx_pci_io_buf *buf = bc->buf;
+	char c;
+	int end;
+
+	if (!bc->started) {
+		dev_dbg(dev, "%s: Error: start not called\n", __func__);
+		return -1;
+	}
+	/* There's no EOL for boot commands so we fake it. */
+	if (bc->eol) {
+		bc->eol = false;
+		return '\n';
+	}
+
+	while (!octeontx_bootcmd_pending(dev, true)) {
+		WATCHDOG_RESET();
+		udelay(0);
+	}
+
+	__iormb();
+	c = buf->data[bc->copy_offset];
+	buf->data[bc->copy_offset++] = '\0';
+
+	end = bc->data_size < CONFIG_SYS_CBSIZE ?
+			bc->data_size - 1 : CONFIG_SYS_CBSIZE - 1;
+	if ((bc->copy_offset >= end) || (buf->data[bc->copy_offset] == '\0')) {
+		bc->copy_offset = 0;
+		buf->len = 0;
+		buf->owner = OCTEONTX_PCI_IO_BUF_OWNER_HOST;
+		bc->eol = true;
+	}
+	__iowmb();
+	flush_dcache_range((ulong)buf, (ulong)buf + bc->size);
+
+	return c;
+}
+
+/**
+ * stdio driver getc
+ *
+ * @param	dev	stdio device
+ * @return	character returned from input
+ */
+static int bootcmd_stdio_getc(struct stdio_dev *dev)
+{
+	struct dm_serial_ops *ops;
+
+	if (!bootcmd_dev) {
+		printf("%s(%s): Error: bootcmd_dev NULL!\n",
+		       __func__, dev->name);
+		return -1;
+	}
+	ops = device_get_ops(bootcmd_dev);
+	return ops->getc(bootcmd_dev);
+}
+
+/**
+ * stdio driver testc
+ *
+ * @param	dev	stdio device
+ *
+ * @return	-1 on error, 1 if pending data, 0 if no data
+ */
+static int bootcmd_stdio_tstc(struct stdio_dev *dev)
+{
+	struct dm_serial_ops *ops;
+
+	if (!bootcmd_dev) {
+		printf("%s(%s): Error: bootcmd_dev NULL!\n",
+		       __func__, dev->name);
+		return -1;
+	}
+	ops = device_get_ops(bootcmd_dev);
+
+	return ops->pending(bootcmd_dev, true);
+}
+
+/**
+ * Probe function for bootcmd driver
+ *
+ * @param	dev	serial device
+ *
+ * @return	0 for success, otherwise error
+ */
+static int octeontx_bootcmd_probe(struct udevice *dev)
+{
+	struct octeontx_bootcmd_data *bc;
+	struct octeontx_pci_io_buf *buf;
+	struct octeontx_bootcmd_platdata *plat = dev_get_platdata(dev);
+	struct stdio_dev bdev;
+	int ret;
+
+	dev_dbg(dev, "%s(%s)\n", __func__, dev->name);
+	bc = dev_get_priv(dev);
+	buf = (struct octeontx_pci_io_buf *)(plat->base);
+	bc->buf = buf;
+	bc->dev = dev;
+	bc->unlocked = true;
+	dev_dbg(dev, "%s: bootcmd IO buffer: %p\n", __func__, buf);
+	ret = octeontx_bootcmd_start(dev);
+	if (!ret) {
+		bootcmd_dev = dev;
+		memset(&bdev, 0, sizeof(bdev));
+		snprintf(bdev.name, sizeof(bdev.name), DRIVER_NAME);
+		bdev.flags = DEV_FLAGS_INPUT;
+		bdev.getc = bootcmd_stdio_getc;
+		bdev.tstc = bootcmd_stdio_tstc;
+		pr_debug("%s: Registering stdin driver %s from device %s, bootcmd_dev: %p\n",
+			 __func__, bdev.name, bootcmd_dev->name, bootcmd_dev);
+		ret = stdio_register(&bdev);
+		if (ret)
+			printf("%s: Error registering stdin device %s\n",
+			       __func__, bdev.name);
+	}
+	return ret;
+}
+
+/**
+ * Extracts the platform data from the device tree
+ *
+ * @param	dev	serial device
+ *
+ * @return	0 for success, otherwise error
+ */
+static int octeontx_bootcmd_ofdata_to_platdata(struct udevice *dev)
+{
+	struct octeontx_bootcmd_platdata *plat = dev_get_platdata(dev);
+	fdt_addr_t addr;
+	fdt_size_t size;
+
+	addr = devfdt_get_addr_size_index(dev, 0, &size);
+	dev_dbg(dev, "%s(%s): base: 0x%llx, size: 0x%llx\n", __func__,
+		dev->name, addr, size);
+	if (addr == FDT_ADDR_T_NONE)
+		return -EINVAL;
+
+	plat->base = addr;
+	plat->size = size;
+	return 0;
+}
+
+static const struct dm_serial_ops octeontx_bootcmd_ops = {
+	.putc = octeontx_bootcmd_putc,
+	.pending = octeontx_bootcmd_pending,
+	.getc = octeontx_bootcmd_getc,
+};
+
+static const struct udevice_id octeontx_bootcmd_serial_id[] = {
+	{ .compatible = "marvell,pci-bootcmd", },
+	{ },
+};
+
+U_BOOT_DRIVER(octeontx_bootcmd) = {
+	.name	= DRIVER_NAME,
+	.id	= UCLASS_SERIAL,
+	.of_match = of_match_ptr(octeontx_bootcmd_serial_id),
+	.ofdata_to_platdata = of_match_ptr(octeontx_bootcmd_ofdata_to_platdata),
+	.platdata_auto_alloc_size = sizeof(struct octeontx_bootcmd_platdata),
+	.probe = octeontx_bootcmd_probe,
+	.ops = &octeontx_bootcmd_ops,
+	.priv_auto_alloc_size = sizeof(struct octeontx_bootcmd_data),
+	.flags = DM_FLAG_PRE_RELOC,
+};
-- 
2.29.0

