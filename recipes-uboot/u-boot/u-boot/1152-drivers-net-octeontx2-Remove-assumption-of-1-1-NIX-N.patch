From a383a920c4e7d5cbf302471ba71f5e72767aa28c Mon Sep 17 00:00:00 2001
From: Rick Farrington <rfarrington@marvell.com>
Date: Tue, 12 May 2020 23:18:41 -0400
Subject: [PATCH 1152/1239] drivers: net: octeontx2: Remove assumption of 1:1
 NIX->NPA LF mapping

Don't assume that the NPA LF IDs are identical to the NIX LF IDs.
In the presence of multiple NIX blocks, they will be different.

Change-Id: Icf0d4a3b3546f3a691b596db2633765ae70180b4
Signed-off-by: Rick Farrington <rfarrington@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/28577
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
---
 drivers/net/octeontx2/nix.c | 15 ++++++++-------
 drivers/net/octeontx2/nix.h |  3 ++-
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/net/octeontx2/nix.c b/drivers/net/octeontx2/nix.c
index bc5e835e8c..683ebe63cc 100644
--- a/drivers/net/octeontx2/nix.c
+++ b/drivers/net/octeontx2/nix.c
@@ -98,7 +98,7 @@ static int npa_setup_pool(struct npa *npa, u32 pool_id,
 	return 0;
 }
 
-int npa_lf_setup(struct nix *nix)
+int npa_lf_setup(struct nix *nix, int npa_lf)
 {
 	struct rvu_pf *rvu = dev_get_priv(nix->dev);
 	struct nix_af *nix_af = nix->nix_af;
@@ -121,6 +121,7 @@ int npa_lf_setup(struct nix *nix)
 	block_addr.s.block = RVU_BLOCK_ADDR_E_NPA;
 	npa->npa_base = rvu->pf_base + block_addr.u;
 	npa->npa_af = nix_af->npa_af;
+	npa->lf = npa_lf;
 	nix->npa = npa;
 
 	npa_af_const.u = npa_af_reg_read(npa->npa_af, NPA_AF_CONST());
@@ -169,10 +170,10 @@ int npa_lf_setup(struct nix *nix)
 		}
 	}
 
-	err = npa_lf_admin_setup(npa, nix->lf, (dma_addr_t)npa->aura_ctx);
+	err = npa_lf_admin_setup(npa, npa->lf, (dma_addr_t)npa->aura_ctx);
 	if (err) {
 		printf("%s: Error setting up NPA LF admin for lf %d\n",
-		       __func__, nix->lf);
+		       __func__, npa->lf);
 		return err;
 	}
 
@@ -190,7 +191,7 @@ int npa_lf_setup(struct nix *nix)
 		aura->s.count = npa->q_len[idx];
 		aura->s.limit = npa->q_len[idx];
 		aura->s.ena = 1;
-		err = npa_attach_aura(nix_af, nix->lf, aura, idx);
+		err = npa_attach_aura(nix_af, npa->lf, aura, idx);
 		if (err)
 			return err;
 
@@ -208,7 +209,7 @@ int npa_lf_setup(struct nix *nix)
 		pool->s.ptr_start = 0;
 		pool->s.ptr_end = (1ULL << 40) -  1;
 		pool->s.ena = 1;
-		err = npa_attach_pool(nix_af, nix->lf, pool, idx);
+		err = npa_attach_pool(nix_af, npa->lf, pool, idx);
 		if (err)
 			return err;
 	}
@@ -241,7 +242,7 @@ int npa_lf_shutdown(struct nix *nix)
 	int err;
 	int pool;
 
-	err = npa_lf_admin_shutdown(nix->nix_af, nix->lf, NPA_POOL_COUNT);
+	err = npa_lf_admin_shutdown(nix->nix_af, npa->lf, NPA_POOL_COUNT);
 	if (err) {
 		printf("%s: Error %d shutting down NPA LF admin\n",
 		       __func__, err);
@@ -434,7 +435,7 @@ struct nix *nix_lf_alloc(struct udevice *dev)
 	debug("%s(%s Link %x Chan %x Pknd %x)\n", __func__, dev->name,
 	      nix->lmac->link_num, nix->lmac->chan_num,	nix->lmac->pknd);
 
-	err = npa_lf_setup(nix);
+	err = npa_lf_setup(nix, rvu->npa_lfid);
 	if (err)
 		return NULL;
 
diff --git a/drivers/net/octeontx2/nix.h b/drivers/net/octeontx2/nix.h
index e26ac2789b..a742b3cb3d 100644
--- a/drivers/net/octeontx2/nix.h
+++ b/drivers/net/octeontx2/nix.h
@@ -142,6 +142,7 @@ struct npa {
 	u32			q_len[NPA_POOL_COUNT];
 	u32			buf_size[NPA_POOL_COUNT];
 	u32			stack_pages[NPA_POOL_COUNT];
+	int			lf;
 };
 
 struct nix_af {
@@ -326,7 +327,7 @@ int npa_attach_pool(struct nix_af *nix_af, int lf,
 		    const union npa_pool_s *desc, u32 pool_id);
 int npa_af_setup(struct npa_af *npa_af);
 int npa_af_shutdown(struct npa_af *npa_af);
-int npa_lf_setup(struct nix *nix);
+int npa_lf_setup(struct nix *nix, int npa_lf);
 int npa_lf_shutdown(struct nix *nix);
 int npa_lf_admin_setup(struct npa *npa, int lf, dma_addr_t aura_base);
 int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count);
-- 
2.29.0

