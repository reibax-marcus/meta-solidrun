From 99137e7095e80d9db24f6c8acac7b024ebe26d25 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Wed, 18 May 2016 23:29:46 -0400
Subject: [PATCH 0472/1239] net: thunderx: Use ECAM-based enumeration for VNIC

Use ECAM-based enumeration and registers to get the configuration
This make the driver code future-proof

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
---
 drivers/net/cavium/nic.h          |  26 +++----
 drivers/net/cavium/nic_main.c     |  90 ++++++++++++++++--------
 drivers/net/cavium/nicvf_main.c   | 111 ++++++++++++++++++++----------
 drivers/net/cavium/nicvf_queues.c |   2 +-
 include/cavium/thunderx_vnic.h    |   3 +-
 5 files changed, 151 insertions(+), 81 deletions(-)

diff --git a/drivers/net/cavium/nic.h b/drivers/net/cavium/nic.h
index 0f114141a9..4d72a2e58b 100644
--- a/drivers/net/cavium/nic.h
+++ b/drivers/net/cavium/nic.h
@@ -20,7 +20,8 @@
 
 /* PCI device IDs */
 #define	PCI_DEVICE_ID_THUNDER_NIC_PF	0xA01E
-#define	PCI_DEVICE_ID_THUNDER_NIC_VF	0x0011
+#define	PCI_DEVICE_ID_THUNDER_NIC_VF_1	0x0011
+#define PCI_DEVICE_ID_THUNDER_NIC_VF_2	0xA034
 #define	PCI_DEVICE_ID_THUNDER_BGX	0xA026
 
 /* Subsystem device IDs */
@@ -37,8 +38,6 @@
 #define	NIC_CHANS_PER_INF		128
 #define	NIC_MAX_CHANS			(NIC_INTF_COUNT * NIC_CHANS_PER_INF)
 
-#define	IS_PASS1(rev)	(rev == 0x0 || rev == 0x1 || rev == 0x2)
-
 /* PCI BAR nos */
 #define	PCI_CFG_REG_BAR_NUM		0
 #define	PCI_MSIX_REG_BAR_NUM		4
@@ -254,7 +253,7 @@ struct nicvf {
 	uint8_t			num_qs;
 	void			*addnl_qs;
 	uint16_t		vf_mtu;
-	uint64_t		reg_base;
+	void __iomem		*reg_base;
 #define	MAX_QUEUES_PER_QSET			8
 	struct nicvf_cq_poll	*napi[8];
 
@@ -283,19 +282,22 @@ struct nicvf {
 	bool			hw_tso;
 };
 
+inline int node_id(void *addr)
+{
+	return ((uintptr_t)addr >> 44) & 0x3;
+}
+
 struct nicpf {
+	struct udevice		*udev;
 	struct eth_device	*netdev;
 	struct hw_info		*hw;
-#define NIC_NODE_ID_MASK	0x300000000000
-#define NIC_NODE_ID(x)		((x & NODE_ID_MASK) >> 44)
 	uint8_t			node;
-	unsigned int	flags;
-	unsigned int	rev;
-	uint16_t		total_vf_cnt;   /* Total num of VF supported */
-	uint16_t		num_vf_en;      /* No of VF enabled */
-	uint64_t		reg_base;       /* Register start address */
+	unsigned int		flags;
+	uint16_t		total_vf_cnt;	/* Total num of VF supported */
+	uint16_t		num_vf_en;	/* No of VF enabled */
+	void __iomem		*reg_base;	/* Register start address */
 	u16			rss_ind_tbl_size;
-	u8			num_sqs_en;     /* Secondary qsets enabled */
+	u8			num_sqs_en;	/* Secondary qsets enabled */
 	u64			nicvf[MAX_NUM_VFS_SUPPORTED];
 	u8			vf_sqs[MAX_NUM_VFS_SUPPORTED][MAX_SQS_PER_VF];
 	u8			pqs_vf[MAX_NUM_VFS_SUPPORTED];
diff --git a/drivers/net/cavium/nic_main.c b/drivers/net/cavium/nic_main.c
index 00ebd93325..a66b910e2c 100644
--- a/drivers/net/cavium/nic_main.c
+++ b/drivers/net/cavium/nic_main.c
@@ -13,7 +13,9 @@
 #include <netdev.h>
 #include <malloc.h>
 #include <miiphy.h>
-
+#include <dm.h>
+#include <misc.h>
+#include <pci.h>
 #include <asm/io.h>
 
 #include <cavium/thunderx_vnic.h>
@@ -46,16 +48,12 @@ static int nic_rcv_queue_sw_sync(struct nicpf *nic);
 /* Register read/write APIs */
 static void nic_reg_write(struct nicpf *nic, uint64_t offset, uint64_t val)
 {
-	uint64_t addr = nic->reg_base + offset;
-
-	writeq(val, (void *)addr);
+	writeq(val, nic->reg_base + offset);
 }
 
 static uint64_t nic_reg_read(struct nicpf *nic, uint64_t offset)
 {
-	uint64_t addr = nic->reg_base + offset;
-
-	return readq((void *)addr);
+	return readq(nic->reg_base + offset);
 }
 
 static u64 nic_get_mbx_addr(int vf)
@@ -73,7 +71,7 @@ static void nic_send_msg_to_vf(struct nicpf *nic, int vf, union nic_mbx *mbx)
 	 * when PF writes to MBOX(1), in next revisions when
 	 * PF writes to MBOX(0)
 	 */
-	if (IS_PASS1(nic->rev_id)) {
+	if (pass1_silicon(nic->rev_id)) {
 		/* see the comment for nic_reg_write()/nic_reg_read()
 		 * functions above
 		 */
@@ -90,7 +88,6 @@ static void nic_mbx_send_ready(struct nicpf *nic, int vf)
 	union nic_mbx mbx = {};
 	int bgx_idx, lmac, timeout = 5, link = -1;
 	const u8 *mac;
-	struct lmac *lmac_dev;
 
 	mbx.nic_cfg.msg = NIC_MBOX_MSG_READY;
 	mbx.nic_cfg.vf_id = vf;
@@ -223,7 +220,7 @@ void nic_handle_mbx_intr(struct nicpf *nic, int vf)
 		 * for consistency enabling the same on 88xx pass2
 		 * where this is introduced.
 		 */
-		if (pass2_silicon(nic->rev))
+		if (pass2_silicon(nic->rev_id))
 			nic_reg_write(nic, NIC_PF_RX_CFG, 0x01);
 		break;
 	case NIC_MBOX_MSG_RQ_BP_CFG:
@@ -591,7 +588,7 @@ static void nic_config_cpi(struct nicpf *nic, struct cpi_cfg_msg *cfg)
 			padd = cpi % 8; /* 3 bits CS out of 6bits DSCP */
 
 		/* Leave RSS_SIZE as '0' to disable RSS */
-		if (IS_PASS1(nic->rev_id)) {
+		if (pass1_silicon(nic->rev_id)) {
 			nic_reg_write(nic, NIC_PF_CPI_0_2047_CFG | (cpi << 3),
 				      (vnic << 24) | (padd << 16) |
 				      (rssi_base + rssi));
@@ -709,34 +706,26 @@ static void nic_tx_channel_cfg(struct nicpf *nic, u8 vnic,
 			      lmac + (bgx * MAX_LMAC_PER_BGX));
 }
 
-struct nicpf *nic_initialize(unsigned int node)
+int nic_initialize(struct udevice *dev)
 {
-	struct nicpf *nic;
-
-	nic = malloc(sizeof(struct nicpf));
-	if (!nic)
-		return nic;
+	struct nicpf *nic = dev_get_priv(dev);
+	size_t size;
 
+	nic->udev = dev;
 	nic->hw = malloc(sizeof(struct hw_info));
 	if (!nic->hw) {
-		free(nic);
-		return NULL;
+		return -ENOMEM;
 	}
 
 	/* MAP PF's configuration registers */
-	nic->reg_base = CSR_PA(node, NIC_PF_BAR0);
+	nic->reg_base = dm_pci_map_bar(dev, 0, &size, PCI_REGION_MEM);
 	if (!nic->reg_base) {
 		printf("Cannot map config register space, aborting\n");
 		goto exit;
 	}
 
-
-#if 0
-	nic->node = NIC_NODE_ID(pci_resource_start(pdev, PCI_CFG_REG_BAR_NUM));
-#endif
-
-	nic->node = node;
-	nic->rev_id = 3;
+	nic->node = node_id(nic->reg_base);
+	dm_pci_read_config8(dev, PCI_REVISION_ID, &nic->rev_id);
 
 	/* By default set NIC in TNS bypass mode */
 	nic->flags &= ~NIC_TNS_ENABLED;
@@ -751,10 +740,51 @@ struct nicpf *nic_initialize(unsigned int node)
 
 	nic->rss_ind_tbl_size = rounddown_pow_of_two(nic->rss_ind_tbl_size);
 
-	return nic;
+	return 0;
 exit:
-	free(nic);
-	return NULL;
+	free(nic->hw);
+	return -ENODEV;
+}
+
+int thunderx_nic_probe(struct udevice *dev)
+{
+	int vf;
+	int num_vfs;
+	struct nicpf *nicpf;
+
+	nic_initialize(dev);
+	nicpf = dev_get_priv(dev);
+
+	num_vfs = pci_sriov_init(dev, nicpf->num_vf_en);
+
+	for (vf = 0; vf < num_vfs; vf++) {
+		 nicvf_initialize(dev, vf);
+	}
+
+	return 0;
 }
 
+static const struct misc_ops thunderx_nic_ops = {
+};
+
+static const struct udevice_id thunderx_nic_ids[] = {
+	{ .compatible = "cavium,nic" },
+	{}
+};
+
+U_BOOT_DRIVER(thunderx_nic) = {
+	.name	= "thunderx_nic",
+	.id	= UCLASS_MISC,
+	.probe	= thunderx_nic_probe,
+	.of_match = thunderx_nic_ids,
+	.ops	= &thunderx_nic_ops,
+	.priv_auto_alloc_size = sizeof(struct nicpf),
+};
+
+static struct pci_device_id thunderx_nic_supported[] = {
+	{ PCI_VDEVICE(CAVIUM, PCI_DEVICE_ID_THUNDER_NIC_PF) },
+	{}
+};
+
+U_BOOT_PCI_DEVICE(thunderx_nic, thunderx_nic_supported);
 
diff --git a/drivers/net/cavium/nicvf_main.c b/drivers/net/cavium/nicvf_main.c
index d6ffca265c..4dbaaf6df9 100644
--- a/drivers/net/cavium/nicvf_main.c
+++ b/drivers/net/cavium/nicvf_main.c
@@ -9,7 +9,10 @@
 
 #include <config.h>
 #include <common.h>
+#include <dm.h>
+#include <pci.h>
 #include <net.h>
+#include <misc.h>
 #include <netdev.h>
 #include <malloc.h>
 #include <asm/io.h>
@@ -27,29 +30,25 @@
 /* Register read/write APIs */
 void nicvf_reg_write(struct nicvf *nic, uint64_t offset, uint64_t val)
 {
-	uint64_t addr = nic->reg_base + offset;
-
-	writeq(val, (void *)addr);
+	writeq(val, nic->reg_base + offset);
 }
 
 uint64_t nicvf_reg_read(struct nicvf *nic, uint64_t offset)
 {
-	uint64_t addr = nic->reg_base + offset;
-
-	return readq((void *)addr);
+	return readq(nic->reg_base + offset);
 }
 
 void nicvf_queue_reg_write(struct nicvf *nic, uint64_t offset,
 			   uint64_t qidx, uint64_t val)
 {
-	uint64_t addr = nic->reg_base + offset;
+	void *addr = nic->reg_base + offset;
 
 	writeq(val, (void *)(addr + (qidx << NIC_Q_NUM_SHIFT)));
 }
 
 uint64_t nicvf_queue_reg_read(struct nicvf *nic, uint64_t offset, uint64_t qidx)
 {
-	uint64_t addr = nic->reg_base + offset;
+	void *addr = nic->reg_base + offset;
 
 	return readq((void *)(addr + (qidx << NIC_Q_NUM_SHIFT)));
 }
@@ -451,74 +450,114 @@ int nicvf_open(struct eth_device *netdev, bd_t *bis)
 	return 0;
 }
 
-int nicvf_initialize(struct nicpf *nicpf, int vf_num, unsigned int node)
+int nicvf_initialize(struct udevice *pdev, int vf_num)
 {
 	struct eth_device *netdev = NULL;
-	struct nicvf *nic = NULL;
-	int    err;
+	struct nicvf *nicvf = NULL;
+	int    ret;
+	size_t size;
 
 	netdev = malloc(sizeof(struct eth_device));
 
 	if (!netdev) {
-		err = -1;
+		ret = -ENOMEM;
 		goto fail;
 	}
 
-	nic = malloc(sizeof(struct nicvf));
+	nicvf = malloc(sizeof(struct nicvf));
 
-	if (!nic) {
-		err = -1;
+	if (!nicvf) {
+		ret = -ENOMEM;
 		goto fail;
 	}
 
-	netdev->priv = nic;
-	nic->netdev = netdev;
-	nic->nicpf = nicpf;
-	nic->vf_id = vf_num;
+	netdev->priv = nicvf;
+	nicvf->netdev = netdev;
+	nicvf->nicpf = dev_get_priv(pdev);
+	nicvf->vf_id = vf_num;
 
-	nic->rev_id = 3;
 
 	/* Enable TSO support */
-	nic->hw_tso = true;
+	nicvf->hw_tso = true;
+
+	nicvf->reg_base = dm_pci_map_bar(pdev, 9, &size, PCI_REGION_MEM);
+
+	nicvf->reg_base += size * nicvf->vf_id;
 
-	/* MAP VF's configuration registers */
-	nic->reg_base = CSR_PA(node, NIC_VFX_BAR0(vf_num));
-	if (!nic->reg_base) {
+	debug("nicvf->reg_base: %p\n", nicvf->reg_base);
+
+	if (!nicvf->reg_base) {
 		printf("Cannot map config register space, aborting\n");
-		err = -1;
+		ret = -1;
 		goto fail;
 	}
 
-	err = nicvf_set_qset_resources(nic);
-	if (err)
+	ret = nicvf_set_qset_resources(nicvf);
+	if (ret)
 		return -1;
 
-	snprintf(netdev->name, sizeof(netdev->name), "vnic%u", vf_num);
+	snprintf(netdev->name, sizeof(netdev->name), "vnic%u", nicvf->vf_id);
 
 	netdev->halt = nicvf_stop;
 	netdev->init = nicvf_open;
 	netdev->send = nicvf_xmit;
 	netdev->recv = nicvf_recv;
 
-	if (!eth_getenv_enetaddr_by_index("eth", vf_num, netdev->enetaddr)) {
+	if (!eth_getenv_enetaddr_by_index("eth", nicvf->vf_id, netdev->enetaddr)) {
 		eth_getenv_enetaddr("ethaddr", netdev->enetaddr);
-		netdev->enetaddr[5] += vf_num;
+		netdev->enetaddr[5] += nicvf->vf_id;
 	}
 
-	err = eth_register(netdev);
+	ret = eth_register(netdev);
 
-	if (err) {
+	if (ret) {
 		printf("Failed to register netdevice\n");
-		return -1;
+		return ret;
 	}
 
 
 	return 0;
 fail:
-	if (nic)
-		free(nic);
+	if (nicvf)
+		free(nicvf);
 	if(netdev)
 		free(netdev);
-	return err;
+	return ret;
+}
+
+int thunderx_vnic_probe(struct udevice *dev)
+{
+	int pos;
+	printf("%s: %d, dev: %p, bdf: %x\n", __FUNCTION__, __LINE__, dev, dm_pci_get_bdf(dev));
+
+	pos = dm_pci_find_capability(dev, PCI_CAP_ID_EA);
+
+	printf("%s: %d, pos: %d\n", __FUNCTION__, __LINE__, pos);
+
+	return 0;
 }
 
+static const struct misc_ops thunderx_vnic_ops = {
+};
+
+static const struct udevice_id thunderx_vnic_ids[] = {
+	{ .compatible = "cavium,vnic" },
+	{}
+};
+
+U_BOOT_DRIVER(thunderx_vnic) = {
+	.name	= "thunderx_vnic",
+	.id	= UCLASS_MISC,
+	.probe	= thunderx_vnic_probe,
+	.of_match = thunderx_vnic_ids,
+	.ops	= &thunderx_vnic_ops,
+	.priv_auto_alloc_size = sizeof(struct nicvf),
+};
+
+static struct pci_device_id thunderx_vnic_supported[] = {
+	{ PCI_VDEVICE(CAVIUM, PCI_DEVICE_ID_THUNDER_NIC_VF_1) },
+	{ PCI_VDEVICE(CAVIUM, PCI_DEVICE_ID_THUNDER_NIC_VF_2) },
+	{}
+};
+
+U_BOOT_PCI_DEVICE(thunderx_vnic, thunderx_vnic_supported);
diff --git a/drivers/net/cavium/nicvf_queues.c b/drivers/net/cavium/nicvf_queues.c
index 6d4725b41d..4ec67fa849 100644
--- a/drivers/net/cavium/nicvf_queues.c
+++ b/drivers/net/cavium/nicvf_queues.c
@@ -190,7 +190,7 @@ static int nicvf_init_cmp_queue(struct nicvf *nic,
 		return -1;
 	}
 	cq->desc = cq->dmem.base;
-	if (!IS_PASS1(nic->rev_id))
+	if (!pass1_silicon(nic->rev_id))
 		cq->thresh = CMP_QUEUE_CQE_THRESH;
 	else
 		cq->thresh = 0;
diff --git a/include/cavium/thunderx_vnic.h b/include/cavium/thunderx_vnic.h
index 66238319c3..e79284c8c5 100644
--- a/include/cavium/thunderx_vnic.h
+++ b/include/cavium/thunderx_vnic.h
@@ -10,8 +10,7 @@
 struct nicpf;
 struct nicvf;
 
-struct nicpf *nic_initialize(unsigned int node);
-int nicvf_initialize(struct nicpf *, int vf_num, unsigned int node);
+int nicvf_initialize(struct udevice *dev, int vf_num);
 int thunderx_bgx_initialize(unsigned int bgx_idx, unsigned int node);
 void bgx_get_count(int node, int *bgx_count);
 int bgx_get_lmac_count(int node, int bgx_idx);
-- 
2.29.0

