From 9daf90585dfa528008b1e4b2a68001170b8ed30a Mon Sep 17 00:00:00 2001
From: Rick Farrington <Ricardo.Farrington@cavium.com>
Date: Tue, 22 Oct 2019 11:30:53 -0400
Subject: [PATCH 0973/1239] cmd: attest: add FIT image kernel ID support to
 Software Attestation

Also changed attest cmd to use new SMC API.

Change-Id: I546122f42cb33d5c41572128460d5ed2d33c97d3
Signed-off-by: Rick Farrington <Ricardo.Farrington@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/17670
Reviewed-by: Derek Chickles <Derek.Chickles@cavium.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Tested-by: Chandrakala Chavva <cchavva@marvell.com>
---
 arch/arm/include/asm/arch-octeontx2/board.h  |   1 +
 arch/arm/include/asm/arch-octeontx2/smc-id.h |   6 +-
 arch/arm/include/asm/arch-octeontx2/smc.h    |   2 +-
 board/Marvell/octeontx2/smc.c                |  26 ++-
 cmd/marvell/octeontx2_attest_cmds.c          | 166 ++++++++++++++++++-
 5 files changed, 181 insertions(+), 20 deletions(-)

diff --git a/arch/arm/include/asm/arch-octeontx2/board.h b/arch/arm/include/asm/arch-octeontx2/board.h
index 7ee8205c06..a62018a339 100644
--- a/arch/arm/include/asm/arch-octeontx2/board.h
+++ b/arch/arm/include/asm/arch-octeontx2/board.h
@@ -35,6 +35,7 @@ enum sw_attestation_tlv_type {
 	ATT_IMG_ATF_BL31,
 	ATT_IMG_ATF_BL33,
 	ATT_SIG_NONCE,
+	ATT_IMG_FIT_KERNEL,
 
 	ATT_TLV_TYPE_COUNT,
 };
diff --git a/arch/arm/include/asm/arch-octeontx2/smc-id.h b/arch/arm/include/asm/arch-octeontx2/smc-id.h
index 791363a2cb..c7f9fa73fc 100644
--- a/arch/arm/include/asm/arch-octeontx2/smc-id.h
+++ b/arch/arm/include/asm/arch-octeontx2/smc-id.h
@@ -33,9 +33,9 @@
 #define OCTEONTX2_MDIO_DBG_READ		0xc2000d01
 #define OCTEONTX2_MDIO_DBG_WRITE	0xc2000d02
 
-/* X1:  0 - query for buffer ptr
- *     !0 - nonce len
- */
 #define OCTEONTX_ATTESTATION_QUERY	0xc2000d03
+#define OCTEONTX_ATTESTATION_QUERY_SUBCMD_LEGACY 0
+#define OCTEONTX_ATTESTATION_QUERY_SUBCMD_BUFFER 1
+#define OCTEONTX_ATTESTATION_QUERY_SUBCMD_INFO   2
 
 #endif /* __SMC_ID_H__ */
diff --git a/arch/arm/include/asm/arch-octeontx2/smc.h b/arch/arm/include/asm/arch-octeontx2/smc.h
index e0a9efbddb..1c8f439b89 100644
--- a/arch/arm/include/asm/arch-octeontx2/smc.h
+++ b/arch/arm/include/asm/arch-octeontx2/smc.h
@@ -19,6 +19,6 @@ ssize_t smc_mdio_dbg_read(int cgx_lmac, int mode, int phyaddr, int devad,
 			  int reg);
 ssize_t smc_mdio_dbg_write(int cgx_lmac, int mode, int phyaddr, int devad,
 			   int reg, int val);
-ssize_t smc_attest(long nonce_len);
+ssize_t smc_attest(long subcmd, long ctx_arg);
 
 #endif
diff --git a/board/Marvell/octeontx2/smc.c b/board/Marvell/octeontx2/smc.c
index c785993997..b15f08b1e4 100644
--- a/board/Marvell/octeontx2/smc.c
+++ b/board/Marvell/octeontx2/smc.c
@@ -105,22 +105,34 @@ ssize_t smc_mdio_dbg_write(int cgx_lmac, int mode, int phyaddr, int devad,
 
 /*
  * on entry,
- *   nonce_len: <= 0, query for buffer address
- *               > 0 specifies nonce length
+ *   subcmd:  one of OCTEONTX_ATTESTATION_QUERY_SUBCMD_xxx
+ *   ctx_arg: subcmd-specific argument
  *
  * returns,
  *   signed value: <0 - error code
  *                  0 - success
  */
-ssize_t smc_attest(long nonce_len)
+ssize_t smc_attest(long subcmd, long ctx_arg)
 {
 	struct pt_regs regs;
 
 	regs.regs[0] = OCTEONTX_ATTESTATION_QUERY;
-	/* X1 - nonce len */
-	regs.regs[1] = nonce_len;
-	/* X2 - subfunction (useful for adding future cmd extensions) */
-	regs.regs[2] = 0;
+	regs.regs[1] = ctx_arg;
+	regs.regs[2] = subcmd;
+
+	switch (subcmd) {
+	/* deprecated sub-command */
+	case OCTEONTX_ATTESTATION_QUERY_SUBCMD_LEGACY:
+		return -1;
+
+	case OCTEONTX_ATTESTATION_QUERY_SUBCMD_BUFFER:
+	case OCTEONTX_ATTESTATION_QUERY_SUBCMD_INFO:
+		/* no args */
+		break;
+
+	default:
+		return -1;
+	}
 
 	smc_call(&regs);
 
diff --git a/cmd/marvell/octeontx2_attest_cmds.c b/cmd/marvell/octeontx2_attest_cmds.c
index 89b1a67370..6824b4c699 100644
--- a/cmd/marvell/octeontx2_attest_cmds.c
+++ b/cmd/marvell/octeontx2_attest_cmds.c
@@ -8,8 +8,13 @@
 #include <common.h>
 #include <command.h>
 #include <malloc.h>
+#include <image.h>
 #include <asm/arch/smc.h>
 #include <asm/arch/board.h>
+#include <asm/arch/smc-id.h>
+
+static int get_fit_image_ids(const char *img_str,
+			     sw_attestation_tlv_t **tlv_ptr, void *tlv_limit);
 
 static void hexdump(const char *prefix, unsigned char *buf, int len)
 {
@@ -39,6 +44,7 @@ static const char *tlv_type_name(enum sw_attestation_tlv_type type)
 		[ATT_IMG_ATF_BL31] = "ATT_IMG_ATF_BL31",
 		[ATT_IMG_ATF_BL33] = "ATT_IMG_ATF_BL33",
 		[ATT_SIG_NONCE] = "ATT_SIG_NONCE",
+		[ATT_IMG_FIT_KERNEL] = "ATT_IMG_FIT_KERNEL",
 	};
 	if (type < 0 || type >= ATT_TLV_TYPE_COUNT)
 		return "Unknown";
@@ -50,13 +56,14 @@ static int do_attest(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 {
 	ssize_t len;
 	uintptr_t attest_ret;
+	const char *img_str;
 	sw_attestation_info_hdr_t *att_info;
 	sw_attestation_tlv_t *tlv;
 	void *tlv_limit, *next_tlv, *cert, *sig;
 	unsigned long nonce_len;
 
 	if (argc < 2) {
-		printf("Please specify a nonce string.\n");
+		printf("Please specify nonce string & optional FIT address.\n");
 		return CMD_RET_USAGE;
 	}
 
@@ -67,8 +74,13 @@ static int do_attest(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 		return CMD_RET_USAGE;
 	}
 
-	/* query for buffer address */
-	attest_ret = smc_attest(0);
+	if (argc > 2)
+		img_str = argv[2];
+	else
+		img_str = NULL;
+
+	/* query for buffer address & len */
+	attest_ret = smc_attest(OCTEONTX_ATTESTATION_QUERY_SUBCMD_BUFFER, 0);
 
 	if ((ssize_t)attest_ret <= 0) {
 		printf("Error: unable to obtain buffer address.\n");
@@ -77,10 +89,31 @@ static int do_attest(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 
 	att_info = (void *)attest_ret;
 
-	/* Pass nonce data to service in buffer */
-	memcpy(att_info->input_nonce, argv[1], nonce_len);
+	if (ntohl(att_info->magic_be) != ATTESTATION_MAGIC_ID) {
+		printf("Error: invalid buffer magic ID.\n");
+		return CMD_RET_FAILURE;
+	}
 
-	attest_ret = smc_attest(nonce_len);
+	tlv = att_info->tlv_list;
+	tlv_limit = (void *)tlv + (long)(ntohs(att_info->tlv_len_be));
+
+	/* Pass nonce data & optional FIT image data to service */
+	len = nonce_len;
+	tlv->type_be = htons(ATT_SIG_NONCE);
+	tlv->length_be = htons(len);
+	memcpy(tlv->value, argv[1], len);
+	tlv = (sw_attestation_tlv_t *)&tlv->value[len];
+
+	if (img_str) {
+		if (get_fit_image_ids(img_str, &tlv, tlv_limit) != 0) {
+			printf("Error parsing FIT image attestation IDs\n");
+			return CMD_RET_FAILURE;
+		}
+	}
+
+	len = (uintptr_t)tlv - (uintptr_t)att_info->tlv_list;
+
+	attest_ret = smc_attest(OCTEONTX_ATTESTATION_QUERY_SUBCMD_INFO, len);
 
 	if ((ssize_t)attest_ret != 0) {
 		printf("Error %ld from attest command\n", attest_ret);
@@ -126,9 +159,124 @@ static int do_attest(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 	return CMD_RET_SUCCESS;
 }
 
-U_BOOT_CMD(attest, 2, 0, do_attest,
+/*
+ * get_fit_image_ids()
+ *
+ * This extracts the kernel image hash from within a FIT image and
+ * adds it as a TLV entry to be submitted to ATF as part of the
+ * Software Attestation information.
+ *
+ * on entry,
+ *   img_str:   FIT image specifier; this supports syntax <addr>:kernel@x.
+ *              If not kernel is specified, the first one will be used.
+ *   tlv_ptr:   address of TLV entries to be filled-in
+ *   tlv_limit: limit of TLV data
+ *
+ * returns,
+ *   0 upon success
+ *   -1 upon error
+ */
+static int get_fit_image_ids(const char *img_str,
+			     sw_attestation_tlv_t **tlv_ptr, void *tlv_limit)
+{
+	int images_noffset, ndepth, count, ret, len, fit_value_len;
+	int subnoffset, noffset;
+	u8 img_type;
+	u8 *fit_value;
+	void *fit_hdr;
+	const char *name, *img_name;
+	uintptr_t img_addr;
+	sw_attestation_tlv_t *tlv;
+
+	if (!tlv_ptr)
+		return -1;
+
+	tlv = *tlv_ptr;
+
+	/* default to error */
+	ret = -1;
+
+	img_addr = simple_strtoul(img_str, NULL, 16);
+	fit_parse_subimage(img_str, img_addr, &img_addr, &img_name);
+	fit_hdr = (void *)img_addr;
+
+	if ((genimg_get_format(fit_hdr) != IMAGE_FORMAT_FIT) ||
+	    !fit_check_format(fit_hdr))
+		return ret;
+
+	/* Find images parent node offset */
+	images_noffset = fdt_path_offset(fit_hdr, FIT_IMAGES_PATH);
+	if (images_noffset < 0)
+		return ret;
+
+	for (ndepth = 0, count = 0,
+	     noffset = fdt_next_node(fit_hdr, images_noffset, &ndepth);
+			(noffset >= 0) && (ndepth > 0);
+			noffset = img_name ? -1 :
+				  fdt_next_node(fit_hdr, noffset, &ndepth)) {
+		/* if image was specified, use its offset */
+		if (img_name) {
+			noffset = fdt_subnode_offset(fit_hdr, images_noffset,
+						     img_name);
+			if (noffset < 0) {
+				printf("Unable to locate '%s'...\n", img_name);
+				continue;
+			}
+			ndepth = 1;
+		}
+
+		if (ndepth == 1) {
+			/*
+			 * Direct child node of the images parent node,
+			 * i.e. component image node.
+			 */
+			count++;
+
+			fit_image_get_type(fit_hdr, noffset, &img_type);
+			if (img_type != IH_TYPE_KERNEL) {
+				printf("img type not KERNEL (%d)\n", img_type);
+				continue;
+			}
+
+			/* locate the HASH for this image */
+			fdt_for_each_subnode(subnoffset, fit_hdr, noffset) {
+				name = fit_get_name(fit_hdr, subnoffset, NULL);
+				if (strncmp(name, FIT_HASH_NODENAME,
+					    strlen(FIT_HASH_NODENAME)))
+					continue;
+
+				if (fit_image_hash_get_value(fit_hdr,
+							     subnoffset,
+							     &fit_value,
+							     &fit_value_len))
+					continue;
+
+				len = fit_value_len;
+				tlv->type_be = htons(ATT_IMG_FIT_KERNEL);
+				tlv->length_be = htons(len);
+				if (((uintptr_t)tlv + len) > (uintptr_t)
+				    tlv_limit)
+					break;
+
+				memcpy(tlv->value, fit_value, len);
+				tlv = (sw_attestation_tlv_t *)&tlv->value[len];
+				ret = 0;
+				break;
+			}
+			break;
+		}
+	}
+
+	*tlv_ptr = tlv;
+
+	return ret;
+}
+
+U_BOOT_CMD(attest, 3, 0, do_attest,
 	   "Retrieve attestation information",
-	   "<nonce_string>\n"
-	   "    - where <nonce_string> consists of ASCII characters\n"
+	   "<nonce_string> [<FIT_addr>]\n"
+	   "    - <nonce_string> consists of ASCII characters.\n"
+	   "    - <FIT_addr> specifies FIT image containing Linux kernel.\n"
+	   "      This supports the FIT syntax <address:kernel@x>.\n"
 	   "\nExample: attest ABCDEF0123\n"
 );
-- 
2.29.0

