From b908fd3804ea775d2daa472175bc54c13f3eb158 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@caviumnetworks.com>
Date: Thu, 16 Aug 2018 17:24:19 -0700
Subject: [PATCH 0817/1239] net: octeontx2: add lf/af shutdown functions for
 nix and npa

Add support for shutdown of all nix/npa lf/af blocks.
Disables all queues, contexts, memory for pool/aura(NPA)
or SQ/RQ/CQ (NIX) and resets lf/af blocks.

Signed-off-by: Suneel Garapati <sgarapati@caviumnetworks.com>
---
 drivers/net/cavium/octeontx2/nix.c    |   4 +-
 drivers/net/cavium/octeontx2/nix.h    |   4 +
 drivers/net/cavium/octeontx2/nix_af.c | 247 ++++++++++++++------------
 drivers/net/cavium/octeontx2/rvu_af.c |   8 +-
 drivers/net/cavium/octeontx2/rvu_pf.c |   7 +
 5 files changed, 154 insertions(+), 116 deletions(-)

diff --git a/drivers/net/cavium/octeontx2/nix.c b/drivers/net/cavium/octeontx2/nix.c
index 7e1ea4e213..2d8a89ff18 100644
--- a/drivers/net/cavium/octeontx2/nix.c
+++ b/drivers/net/cavium/octeontx2/nix.c
@@ -354,7 +354,8 @@ int nix_lf_shutdown(struct nix *nix)
 	int index;
 	int err;
 
-	err = nix_lf_admin_shutdown(nix_af, nix->lf, NIX_CQ_COUNT, 1, 1);
+	err = nix_lf_admin_shutdown(nix_af, nix->lf, nix->cq_cnt,
+					nix->rq_cnt, nix->sq_cnt);
 	if (err) {
 		printf("%s: Error shutting down LF admin\n", __func__);
 		return err;
@@ -376,6 +377,7 @@ int nix_lf_shutdown(struct nix *nix)
 	for (index = 0; index < NIX_CQ_COUNT; index++)
 		qmem_free(&nix->cq[index]);
 
+	debug("%s: nix lf %d reset -- \n", __func__, nix->lf);
 	return 0;
 }
 
diff --git a/drivers/net/cavium/octeontx2/nix.h b/drivers/net/cavium/octeontx2/nix.h
index 49cc714150..bd97a4e2b4 100644
--- a/drivers/net/cavium/octeontx2/nix.h
+++ b/drivers/net/cavium/octeontx2/nix.h
@@ -301,15 +301,19 @@ int npa_attach_aura(struct nix_af *nix_af, int lf,
 int npa_attach_pool(struct nix_af *nix_af, int lf,
 			const union cavm_npa_pool_s *desc, u32 pool_id);
 int npa_af_setup(struct npa_af *npa_af);
+int npa_af_shutdown(struct npa_af *npa_af);
 int npa_lf_setup(struct nix *nix);
+int npa_lf_shutdown(struct nix *nix);
 int npa_lf_admin_setup(struct npa *npa, int lf, dma_addr_t aura_base);
 int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count);
 
 int npc_lf_admin_setup(struct nix *nix);
+int npc_af_shutdown(struct nix_af *nix_af);
 
 int nix_af_setup(struct nix_af *nix_af);
 int nix_af_shutdown(struct nix_af *nix_af);
 int nix_lf_setup(struct nix *nix);
+int nix_lf_shutdown(struct nix *nix);
 struct nix *nix_lf_alloc(struct udevice *dev);
 int nix_lf_admin_setup(struct nix *nix);
 int nix_lf_admin_shutdown(struct nix_af *nix_af, int lf,
diff --git a/drivers/net/cavium/octeontx2/nix_af.c b/drivers/net/cavium/octeontx2/nix_af.c
index b21cf83a05..3099225513 100644
--- a/drivers/net/cavium/octeontx2/nix_af.c
+++ b/drivers/net/cavium/octeontx2/nix_af.c
@@ -160,8 +160,16 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 	u32 head;
 	union cavm_npa_aq_inst_s *inst;
 	volatile union cavm_npa_aq_res_s *res;
-	union cavm_npa_aura_s *aura_ctx;
-	union cavm_npa_pool_s *pool_ctx;
+	struct npa_aq_pool_request {
+		union cavm_npa_aq_res_s	resp	ALIGNED;
+		union cavm_npa_pool_s	p0	ALIGNED;
+		union cavm_npa_pool_s	p1	ALIGNED;
+	} pool_req ALIGNED;
+	struct npa_aq_aura_request {
+		union cavm_npa_aq_res_s	resp	ALIGNED;
+		union cavm_npa_aura_s	a0	ALIGNED;
+		union cavm_npa_aura_s	a1	ALIGNED;
+	} aura_req ALIGNED;
 	union cavm_npa_af_aq_status aq_stat;
 	union cavm_npa_af_lf_rst lf_rst;
 	struct npa_af *npa = nix_af->npa_af;
@@ -171,7 +179,7 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 		aq_stat.u = npa_af_reg_read(npa, CAVM_NPA_AF_AQ_STATUS());
 		head = aq_stat.s.head_ptr;
 		inst = (union cavm_npa_aq_inst_s *)(npa->aq.inst.base) + head;
-		res = npa->aq.res.base;
+		res = &pool_req.resp;
 
 		memset(inst, 0, sizeof(*inst));
 		inst->s.cindex = pool_id;
@@ -179,14 +187,11 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 		inst->s.doneint = 0;
 		inst->s.ctype = CAVM_NPA_AQ_CTYPE_E_POOL;
 		inst->s.op = CAVM_NPA_AQ_INSTOP_E_WRITE;
-		inst->s.res_addr = npa->aq.res.iova;
-
-		/* Context base address */
-		pool_ctx = (union cavm_npa_pool_s *)
-				(npa->aq.res.base + CONFIG_SYS_CACHELINE_SIZE);
-		memset(npa->aq.res.base, 0, npa->aq.res.entry_sz);
-		pool_ctx[0].s.ena = 0;
-		pool_ctx[1].s.ena = 1;	/* Write mask */
+		inst->s.res_addr = (u64)&pool_req.resp;
+
+		memset((void *)&pool_req, 0, sizeof(pool_req));
+		pool_req.p0.s.ena = 0;
+		pool_req.p1.s.ena = 1;	/* Write mask */
 		__iowmb();
 
 		npa_af_reg_write(npa, CAVM_NPA_AF_AQ_DOOR(), 1);
@@ -197,17 +202,20 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 			WATCHDOG_RESET();
 
 		if (res->s.compcode != CAVM_NPA_AQ_COMP_E_GOOD) {
-			printf("%s: Error: result 0x%x not good\n",
-			       __func__, res->s.compcode);
+			printf("%s: Error: result 0x%x not good for lf %d \n"
+			       " aura id %d", __func__, res->s.compcode, lf,
+				pool_id);
 			return -1;
 		}
+		debug("%s(LF %d, pool id %d) disabled\n", __func__, lf,
+			 pool_id);
 	}
 
 	for (pool_id = 0; pool_id < pool_count; pool_id++) {
 		aq_stat.u = npa_af_reg_read(npa, CAVM_NPA_AF_AQ_STATUS());
 		head = aq_stat.s.head_ptr;
 		inst = (union cavm_npa_aq_inst_s *)(npa->aq.inst.base) + head;
-		res = npa->aq.res.base;
+		res = &aura_req.resp;
 
 		memset(inst, 0, sizeof(*inst));
 		inst->s.cindex = pool_id;
@@ -215,14 +223,11 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 		inst->s.doneint = 0;
 		inst->s.ctype = CAVM_NPA_AQ_CTYPE_E_AURA;
 		inst->s.op = CAVM_NPA_AQ_INSTOP_E_WRITE;
-		inst->s.res_addr = npa->aq.res.iova;
-
-		/* Context base address */
-		aura_ctx = (union cavm_npa_aura_s *)
-				(npa->aq.res.base + CONFIG_SYS_CACHELINE_SIZE);
-		memset(npa->aq.res.base, 0, npa->aq.res.entry_sz);
-		aura_ctx[0].s.ena = 0;
-		aura_ctx[1].s.ena = 1;	/* Write mask */
+		inst->s.res_addr = (u64)&aura_req.resp;
+
+		memset((void *)&aura_req, 0, sizeof(aura_req));
+		aura_req.a0.s.ena = 0;
+		aura_req.a1.s.ena = 1;	/* Write mask */
 		__iowmb();
 
 		npa_af_reg_write(npa, CAVM_NPA_AF_AQ_DOOR(), 1);
@@ -233,10 +238,13 @@ int npa_lf_admin_shutdown(struct nix_af *nix_af, int lf, u32 pool_count)
 			WATCHDOG_RESET();
 
 		if (res->s.compcode != CAVM_NPA_AQ_COMP_E_GOOD) {
-			printf("%s: Error: result 0x%x not good\n",
-			       __func__, res->s.compcode);
+			printf("%s: Error: result 0x%x not good for lf %d \n"
+			       " aura id %d", __func__, res->s.compcode, lf,
+				pool_id);
 			return -1;
 		}
+		debug("%s(LF %d, aura id %d) disabled\n", __func__, lf,
+			 pool_id);
 	}
 
 	/* Reset the LF */
@@ -299,6 +307,29 @@ int npa_af_setup(struct npa_af *npa_af)
 	return 0;
 }
 
+int npa_af_shutdown(struct npa_af *npa_af)
+{
+	union cavm_npa_af_blk_rst blk_rst;
+
+	blk_rst.u = 0;
+	blk_rst.s.rst = 1;
+	npa_af_reg_write(npa_af, CAVM_NPA_AF_BLK_RST(), blk_rst.u);
+
+	/* Wait for reset to complete */
+	do {
+		blk_rst.u = npa_af_reg_read(npa_af, CAVM_NPA_AF_BLK_RST());
+		WATCHDOG_RESET();
+	} while (blk_rst.s.busy);
+
+	blk_rst.u = 0;
+	npa_af_reg_write(npa_af, CAVM_NPA_AF_BLK_RST(), blk_rst.u);
+
+	rvu_aq_free(&npa_af->aq);
+
+	debug("%s: npa af reset -- \n", __func__);
+
+	return 0;
+}
 
 /***************
  * NIX API 
@@ -714,15 +745,23 @@ int nix_lf_admin_shutdown(struct nix_af *nix_af, int lf,
 			  u32 cq_count, u32 rq_count, u32 sq_count)
 {
 	union cavm_nixx_af_rx_sw_sync sw_sync;
-	union cavm_nix_aq_inst_s *inst;
-	volatile union cavm_nix_aq_res_s *res;
-	union cavm_nix_cq_ctx_s *cq_context;
-	union cavm_nix_rq_ctx_s *rq_context;
-	union cavm_nix_sq_ctx_s *sq_context;
-	union cavm_nixx_af_aq_status aq_status;
+	struct nix_aq_cq_request {
+		union cavm_nix_aq_res_s	resp	ALIGNED;
+		union cavm_nix_cq_ctx_s	cq0	ALIGNED;
+		union cavm_nix_cq_ctx_s	cq1	ALIGNED;
+	} cq_req ALIGNED;
+	struct nix_aq_rq_request {
+		union cavm_nix_aq_res_s	resp	ALIGNED;
+		union cavm_nix_rq_ctx_s	rq0	ALIGNED;
+		union cavm_nix_rq_ctx_s	rq1	ALIGNED;
+	} rq_req ALIGNED;
+	struct nix_aq_sq_request {
+		union cavm_nix_aq_res_s	resp	ALIGNED;
+		union cavm_nix_sq_ctx_s	sq0	ALIGNED;
+		union cavm_nix_sq_ctx_s	sq1	ALIGNED;
+	} sq_req ALIGNED;
 	union cavm_nixx_af_lf_rst lf_rst;
-	ulong start;
-	int index;
+	int index, err;
 
 	/* Flush all tx packets */
 	sw_sync.u = 0;
@@ -735,99 +774,57 @@ int nix_lf_admin_shutdown(struct nix_af *nix_af, int lf,
 	} while (sw_sync.s.ena);
 
 	for (index = 0; index < rq_count; index++) {
-		aq_status.u = nix_af_reg_read(nix_af, CAVM_NIXX_AF_AQ_STATUS());
-		inst = (union cavm_nix_aq_inst_s *)(nix_af->aq.inst.base) +
-							aq_status.s.head_ptr;
-		inst->s.cindex = index;
-		inst->s.lf = lf;
-		inst->s.doneint = 0;
-		inst->s.ctype = CAVM_NIX_AQ_CTYPE_E_RQ;
-		inst->s.op = CAVM_NPA_AQ_INSTOP_E_WRITE;
-		inst->s.res_addr = nix_af->aq.res.iova;
-
-		res = (union cavm_nix_aq_res_s *)(nix_af->aq.res.base);
-		rq_context = nix_af->aq.res.base + CONFIG_SYS_CACHELINE_SIZE;
-
-		memset((void *)res, 0, sizeof(*res));
-
-		rq_context[0].s.ena = 0;	/* Context */
-		rq_context[1].s.ena = 1;	/* Mask */
+		memset((void *)&rq_req, 0, sizeof(rq_req));
+		rq_req.rq0.s.ena = 0;	/* Context */
+		rq_req.rq1.s.ena = 1;	/* Mask */
 		__iowmb();
 
-		nix_af_reg_write(nix_af, CAVM_NIXX_AF_AQ_DOOR(), 1);
-		start = get_timer(0);
-		while ((res->s.compcode == CAVM_NIX_AQ_COMP_E_NOTDONE) &&
-		       (get_timer(start) < 1000))
-			WATCHDOG_RESET();
-		if (res->s.compcode != CAVM_NIX_AQ_COMP_E_GOOD) {
-			printf("%s: Bad result code 0x%x\n",
-			       __func__, res->s.compcode);
-			return -1;
+		err = nix_aq_issue_command(nix_af, lf,
+					   CAVM_NIX_AQ_INSTOP_E_WRITE,
+					   CAVM_NIX_AQ_CTYPE_E_RQ,
+					   index, &rq_req.resp);
+		if (err) {
+			printf("%s: Error disabling LF %d RQ(%d)\n",
+				 __func__, lf, index);
+			return err;
 		}
+		debug("%s: LF %d RQ(%d) disabled\n", __func__, lf, index);
 	}
 
-	for (index = 0; index < rq_count; index++) {
-		aq_status.u = nix_af_reg_read(nix_af, CAVM_NIXX_AF_AQ_STATUS());
-		inst = (union cavm_nix_aq_inst_s *)(nix_af->aq.inst.base) +
-							aq_status.s.head_ptr;
-		inst->s.cindex = index;
-		inst->s.lf = lf;
-		inst->s.doneint = 0;
-		inst->s.ctype = CAVM_NIX_AQ_CTYPE_E_SQ;
-		inst->s.op = CAVM_NPA_AQ_INSTOP_E_WRITE;
-		inst->s.res_addr = nix_af->aq.res.iova;
-
-		res = nix_af->aq.res.base;
-		sq_context = nix_af->aq.res.base + CONFIG_SYS_CACHELINE_SIZE;
-
-		memset((void *)res, 0, sizeof(*res));
-
-		sq_context[0].s.ena = 0;	/* Context */
-		sq_context[1].s.ena = 1;	/* Mask */
+	for (index = 0; index < sq_count; index++) {
+		memset((void *)&sq_req, 0, sizeof(sq_req));
+		sq_req.sq0.s.ena = 0;	/* Context */
+		sq_req.sq1.s.ena = 1;	/* Mask */
 		__iowmb();
 
-		nix_af_reg_write(nix_af, CAVM_NIXX_AF_AQ_DOOR(), 1);
-		start = get_timer(0);
-		while ((res->s.compcode == CAVM_NIX_AQ_COMP_E_NOTDONE) &&
-		       (get_timer(start) < 1000))
-			WATCHDOG_RESET();
-		if (res->s.compcode != CAVM_NIX_AQ_COMP_E_GOOD) {
-			printf("%s: Bad result code 0x%x\n",
-			       __func__, res->s.compcode);
-			return -1;
+		err = nix_aq_issue_command(nix_af, lf,
+					   CAVM_NIX_AQ_INSTOP_E_WRITE,
+					   CAVM_NIX_AQ_CTYPE_E_SQ,
+					   index, &sq_req.resp);
+		if (err) {
+			printf("%s: Error disabling LF %d SQ(%d)\n",
+				 __func__, lf, index);
+			return err;
 		}
+		debug("%s: LF %d SQ(%d) disabled\n", __func__, lf, index);
 	}
 
-	for (index = 0; index < rq_count; index++) {
-		aq_status.u = nix_af_reg_read(nix_af, CAVM_NIXX_AF_AQ_STATUS());
-		inst = (union cavm_nix_aq_inst_s *)(nix_af->aq.inst.base) +
-							aq_status.s.head_ptr;
-		inst->s.cindex = index;
-		inst->s.lf = lf;
-		inst->s.doneint = 0;
-		inst->s.ctype = CAVM_NIX_AQ_CTYPE_E_CQ;
-		inst->s.op = CAVM_NPA_AQ_INSTOP_E_WRITE;
-		inst->s.res_addr = nix_af->aq.res.iova;
-
-		res = nix_af->aq.res.base;
-		cq_context = nix_af->aq.res.base + CONFIG_SYS_CACHELINE_SIZE;
-
-		memset((void *)res, 0, sizeof(*res));
-
-		cq_context[0].s.ena = 0;	/* Context */
-		cq_context[1].s.ena = 1;	/* Mask */
+	for (index = 0; index < cq_count; index++) {
+		memset((void *)&cq_req, 0, sizeof(cq_req));
+		cq_req.cq0.s.ena = 0;	/* Context */
+		cq_req.cq1.s.ena = 1;	/* Mask */
 		__iowmb();
 
-		nix_af_reg_write(nix_af, CAVM_NIXX_AF_AQ_DOOR(), 1);
-		start = get_timer(0);
-		while ((res->s.compcode == CAVM_NIX_AQ_COMP_E_NOTDONE) &&
-		       (get_timer(start) < 1000))
-			WATCHDOG_RESET();
-		if (res->s.compcode != CAVM_NIX_AQ_COMP_E_GOOD) {
-			printf("%s: Bad result code 0x%x\n",
-			       __func__, res->s.compcode);
-			return -1;
+		err = nix_aq_issue_command(nix_af, lf,
+					   CAVM_NIX_AQ_INSTOP_E_WRITE,
+					   CAVM_NIX_AQ_CTYPE_E_CQ,
+					   index, &cq_req.resp);
+		if (err) {
+			printf("%s: Error disabling LF %d CQ(%d)\n",
+				 __func__, lf, index);
+			return err;
 		}
+		debug("%s: LF %d CQ(%d) disabled\n", __func__, lf, index);
 	}
 
 	/* Reset the LF */
@@ -936,6 +933,28 @@ int npc_lf_admin_setup(struct nix *nix)
 	return 0;
 }
 
+int npc_af_shutdown(struct nix_af *nix_af)
+{
+	union cavm_npc_af_blk_rst blk_rst;
+
+	blk_rst.u = 0;
+	blk_rst.s.rst = 1;
+	npc_af_reg_write(nix_af, CAVM_NPC_AF_BLK_RST(), blk_rst.u);
+
+	/* Wait for reset to complete */
+	do {
+		blk_rst.u = npc_af_reg_read(nix_af, CAVM_NPC_AF_BLK_RST());
+		WATCHDOG_RESET();
+	} while (blk_rst.s.busy);
+
+	blk_rst.u = 0;
+	npc_af_reg_write(nix_af, CAVM_NPC_AF_BLK_RST(), blk_rst.u);
+
+	debug("%s: npc af reset -- \n", __func__);
+
+	return 0;
+}
+
 int nix_af_setup(struct nix_af *nix_af)
 {
 	int err;
@@ -1035,8 +1054,10 @@ int nix_af_shutdown(struct nix_af *nix_af)
 
 	blk_rst.u = 0;
 	nix_af_reg_write(nix_af, CAVM_NIXX_AF_BLK_RST(), blk_rst.u);
-	rvu_aq_free(&nix_af->npa_af->aq);
+
 	rvu_aq_free(&nix_af->aq);
 
+	debug("%s: nix af reset -- \n", __func__);
+
 	return 0;
 }
diff --git a/drivers/net/cavium/octeontx2/rvu_af.c b/drivers/net/cavium/octeontx2/rvu_af.c
index 0037f5a71e..3a83d9029d 100644
--- a/drivers/net/cavium/octeontx2/rvu_af.c
+++ b/drivers/net/cavium/octeontx2/rvu_af.c
@@ -149,9 +149,13 @@ int rvu_af_probe(struct udevice *dev)
 
 int rvu_af_remove(struct udevice *dev)
 {
-	struct nix_af *nix_af = dev_get_priv(dev);
+	struct rvu_af *rvu_af = dev_get_priv(dev);
 
-	nix_af_shutdown(nix_af);
+	nix_af_shutdown(rvu_af->nix_af);
+	npa_af_shutdown(rvu_af->nix_af->npa_af);
+	npc_af_shutdown(rvu_af->nix_af);
+
+	debug("%s: rvu af down -- \n", __func__);
 	return 0;
 }
 
diff --git a/drivers/net/cavium/octeontx2/rvu_pf.c b/drivers/net/cavium/octeontx2/rvu_pf.c
index 15ff6a0d19..1b01b63980 100644
--- a/drivers/net/cavium/octeontx2/rvu_pf.c
+++ b/drivers/net/cavium/octeontx2/rvu_pf.c
@@ -92,6 +92,13 @@ int rvu_pf_probe(struct udevice *dev)
 
 int rvu_pf_remove(struct udevice *dev)
 {
+	struct rvu_pf *rvu = dev_get_priv(dev);
+
+	nix_lf_shutdown(rvu->nix);
+	npa_lf_shutdown(rvu->nix);
+
+	debug("%s: rvu pf%d down -- \n", __func__,  rvu->pfid);
+
 	return 0;
 }
 
-- 
2.29.0

