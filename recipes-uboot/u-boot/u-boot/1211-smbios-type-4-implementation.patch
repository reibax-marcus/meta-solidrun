From aa662b94464de70d43e5613bf1545d1e49107cb1 Mon Sep 17 00:00:00 2001
From: Sujeet Baranwal <sbaranwal@marvell.com>
Date: Mon, 27 Jul 2020 13:35:00 -0700
Subject: [PATCH 1211/1239] smbios: type 4 implementation

SMBIOS type 4 is implemented for Armada CN9130. It
adds CPU & SoC specific information to SMBIOS table.

Signed-off-by: Sujeet Baranwal <sbaranwal@marvell.com>
Change-Id: I4013b54a7cde88c47b922004444dbd00925a1a90
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/35162
Tested-by: Jia Ma <jiam@marvell.com>
Reviewed-by: Jia Ma <jiam@marvell.com>
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
---
 lib/smbios.c | 60 +++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 52 insertions(+), 8 deletions(-)

diff --git a/lib/smbios.c b/lib/smbios.c
index 7b74971f68..cffd75cb0a 100644
--- a/lib/smbios.c
+++ b/lib/smbios.c
@@ -176,21 +176,40 @@ static int smbios_write_type3(ulong *current, int handle)
 
 static void smbios_write_type4_dm(struct smbios_type4 *t)
 {
+	u8 proc_type = 0;
+	u8 voltage = 0;
+	u8 core_count = 0;
+	u8 core_enabled = 0;
+	u8 thread_count = 0;
+	u16 max_speed = 0;
+	u16 proc_char = 0;
+	u8 status = 0;
 	u16 processor_family = SMBIOS_PROCESSOR_FAMILY_UNKNOWN;
 	const char *vendor = "Unknown";
 	const char *name = "Unknown";
+	const char *serial_number = "Unknown";
+	const char *asset_tag = "Unknown";
+	const char *part_number = "Unknown";
+	const char *socket_designation = "Unknown";
 
 #ifdef CONFIG_CPU
 	char processor_name[49];
 	char vendor_name[49];
 	struct udevice *dev = NULL;
+	struct cpu_info info;
 
 	uclass_find_first_device(UCLASS_CPU, &dev);
 	if (dev) {
 		struct cpu_platdata *plat = dev_get_parent_platdata(dev);
+		cpu_get_info(dev, &info);
+		processor_family = is_proc_arm(info.cpu_type);
+		if (processor_family) {
+			t->processor_family = DMTF_CHECK_FAMILY2;
+			t->processor_family2 = processor_family;
+		} else {
+			t->processor_family = processor_family;
+		}
 
-		if (plat->family)
-			processor_family = plat->family;
 		t->processor_id[0] = plat->id[0];
 		t->processor_id[1] = plat->id[1];
 
@@ -198,12 +217,37 @@ static void smbios_write_type4_dm(struct smbios_type4 *t)
 			vendor = vendor_name;
 		if (!cpu_get_desc(dev, processor_name, sizeof(processor_name)))
 			name = processor_name;
+
+		core_count = cpu_get_count(dev);
+		status = plat->status;
+		proc_type = plat->proc_type;
+		voltage = plat->voltage;
+		core_enabled = plat->core_enabled;
+		thread_count = plat->thread_count;
+		max_speed = plat->max_speed;
+		proc_char = plat->proc_char;
+		serial_number = plat->serial_number;
+		asset_tag = plat->asset_tag;
+		part_number = plat->part_number;
+		socket_designation = plat->socket_designation;
 	}
 #endif
 
 	t->processor_family = processor_family;
 	t->processor_manufacturer = smbios_add_string(t->eos, vendor);
 	t->processor_version = smbios_add_string(t->eos, name);
+	t->status =  status;
+	t->processor_type = proc_type;
+	t->voltage = voltage;
+	t->core_count = core_count;
+	t->core_enabled = core_enabled;
+	t->thread_count = thread_count;
+	t->max_speed = max_speed;
+	t->processor_characteristics = proc_char;
+	t->serial_number = smbios_add_string(t->eos, serial_number);
+	t->asset_tag = smbios_add_string(t->eos, asset_tag);
+	t->part_number = smbios_add_string(t->eos, part_number);
+	t->socket_designation = smbios_add_string(t->eos, socket_designation);
 }
 
 static int smbios_write_type4(ulong *current, int handle)
@@ -216,12 +260,11 @@ static int smbios_write_type4(ulong *current, int handle)
 	fill_smbios_header(t, SMBIOS_PROCESSOR_INFORMATION, len, handle);
 	t->processor_type = SMBIOS_PROCESSOR_TYPE_CENTRAL;
 	smbios_write_type4_dm(t);
-	t->status = SMBIOS_PROCESSOR_STATUS_ENABLED;
+
+	t->l1_cache_handle = 0x500;
+	t->l2_cache_handle = 0x502;
+	t->l3_cache_handle = 0xFFFF;
 	t->processor_upgrade = SMBIOS_PROCESSOR_UPGRADE_NONE;
-	t->l1_cache_handle = 0xffff;
-	t->l2_cache_handle = 0xffff;
-	t->l3_cache_handle = 0xffff;
-	t->processor_family2 = t->processor_family;
 
 	len = t->length + smbios_string_table_len(t->eos);
 	*current += len;
@@ -294,10 +337,11 @@ ulong write_smbios_table(ulong addr)
 
 	/* populate minimum required tables */
 	for (i = 0; i < ARRAY_SIZE(smbios_write_funcs); i++) {
-		int tmp = smbios_write_funcs[i]((ulong *)&addr, handle++);
+		int tmp = smbios_write_funcs[i]((ulong *)&addr, handle);
 
 		max_struct_size = max(max_struct_size, tmp);
 		len += tmp;
+		handle += 0x100;
 	}
 
 	memcpy(se->anchor, "_SM_", 4);
-- 
2.29.0

