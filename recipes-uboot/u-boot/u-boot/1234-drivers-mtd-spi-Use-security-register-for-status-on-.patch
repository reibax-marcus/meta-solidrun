From f097f6fc4354313b1bc1f41faf8dfaee796d089c Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Thu, 22 Oct 2020 19:36:27 -0700
Subject: [PATCH 1234/1239] drivers: mtd: spi: Use security register for status
 on Macronix

For erase and write operation status, add support to read
security register status bits P_ERR and E_ERR and enable
it for mx66l2g45g flash part to use it.

Change-Id: If237400510813eb146fcaeea43e575ca94ff8dba
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/boot/u-boot/+/38516
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
---
 drivers/mtd/spi/spi-nor-core.c | 48 ++++++++++++++++++++++++++++++++--
 include/linux/mtd/spi-nor.h    |  6 +++++
 2 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/drivers/mtd/spi/spi-nor-core.c b/drivers/mtd/spi/spi-nor-core.c
index c918c5759b..0517999029 100755
--- a/drivers/mtd/spi/spi-nor-core.c
+++ b/drivers/mtd/spi/spi-nor-core.c
@@ -176,6 +176,25 @@ static int read_fsr(struct spi_nor *nor)
 	return val;
 }
 
+/*
+ * Read the security register, returning its value in the location
+ * Return the register value.
+ * Returns negative if error occurred.
+ */
+static int read_scur(struct spi_nor *nor)
+{
+	int ret;
+	u8 val;
+
+	ret = nor->read_reg(nor, SPINOR_OP_RD_SCUR, &val, 1);
+	if (ret < 0) {
+		pr_debug("error %d reading SCUR\n", ret);
+		return ret;
+	}
+
+	return val;
+}
+
 /*
  * Read configuration register, returning its value in the
  * location. Return the configuration register value.
@@ -395,9 +414,28 @@ static int spi_nor_fsr_ready(struct spi_nor *nor)
 	return fsr & FSR_READY;
 }
 
+static int spi_nor_scur_ready(struct spi_nor *nor)
+{
+	int scur = read_scur(nor);
+
+	if (scur < 0)
+		return scur;
+
+	if (scur & (SCUR_E_ERR | SCUR_P_ERR)) {
+		if (scur & SCUR_E_ERR)
+			dev_dbg(nor->dev, "Erase operation failed.\n");
+		else
+			dev_dbg(nor->dev, "Program operation failed.\n");
+
+		return -EIO;
+	}
+
+	return 1;
+}
+
 static int spi_nor_ready(struct spi_nor *nor)
 {
-	int sr, fsr;
+	int sr, fsr, scur;
 
 	sr = spi_nor_sr_ready(nor);
 	if (sr < 0)
@@ -405,7 +443,11 @@ static int spi_nor_ready(struct spi_nor *nor)
 	fsr = nor->flags & SNOR_F_USE_FSR ? spi_nor_fsr_ready(nor) : 1;
 	if (fsr < 0)
 		return fsr;
-	return sr && fsr;
+	scur = nor->flags & SNOR_F_USE_SCUR ? spi_nor_scur_ready(nor) : 1;
+	if (scur < 0)
+		return scur;
+
+	return sr && fsr && scur;
 }
 
 /*
@@ -2925,6 +2967,8 @@ int spi_nor_scan(struct spi_nor *nor)
 		nor->flash_lock = mx_lock;
 		nor->flash_unlock = mx_unlock;
 		nor->flash_is_locked = mx_is_locked;
+		if (!strcmp(mtd->name, "mx66l2g45g"))
+			nor->flags |= SNOR_F_USE_SCUR;
 	}
 #endif
 
diff --git a/include/linux/mtd/spi-nor.h b/include/linux/mtd/spi-nor.h
index 120cf82f46..e93a187b53 100644
--- a/include/linux/mtd/spi-nor.h
+++ b/include/linux/mtd/spi-nor.h
@@ -109,6 +109,7 @@
 
 /* Used for Macronix flashes only. */
 #define SPINOR_OP_RD_CR		0x15	/* Read CR register */
+#define SPINOR_OP_RD_SCUR	0x2b	/* Read Security register */
 
 /* Used for Spansion flashes only. */
 #define SPINOR_OP_BRWR		0x17	/* Bank register write */
@@ -151,6 +152,10 @@
 /* Status Register 2 bits. */
 #define SR2_QUAD_EN_BIT7	BIT(7)
 
+/* Macronix Security Register bits */
+#define SCUR_E_ERR		BIT(6)
+#define SCUR_P_ERR		BIT(5)
+
 /* Supported SPI protocols */
 #define SNOR_PROTO_INST_MASK	GENMASK(23, 16)
 #define SNOR_PROTO_INST_SHIFT	16
@@ -243,6 +248,7 @@ enum spi_nor_option_flags {
 	SNOR_F_READY_XSR_RDY	= BIT(4),
 	SNOR_F_USE_CLSR		= BIT(5),
 	SNOR_F_BROKEN_RESET	= BIT(6),
+	SNOR_F_USE_SCUR		= BIT(7),
 };
 
 /**
-- 
2.29.0

